{"mappings":"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","sources":["<anon>","modules/main.js","modules/actor/actor.js","modules/game/combat.js","modules/game/damage.js","modules/system/utils.js","modules/game/tests.js","modules/libraries/tagify.min.js","modules/game/modifiers.js","modules/game/consequences.js","modules/actor/actor-sheet.js","modules/item/item.js","modules/item/item-sheet.js","modules/system/hooks.js","modules/system/macros.js","modules/system/chat.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n/**\n * Capitalize the first letter of the string\n *\n * @param {string} word\n * @returns {string}\n * @private\n */ function $ba32b9ea93ee5c3a$export$9a00dee1beb8f576(word) {\n    return word.charAt(0).toUpperCase() + word.slice(1);\n}\nfunction $ba32b9ea93ee5c3a$export$99454b2c58b3846f({ scene_id: scene_id = null, token_id: token_id = null, actor_id: actor_id = null }) {\n    if (scene_id && token_id) return game.scenes.get(scene_id)?.tokens.get(token_id)?.actor || null;\n    else if (actor_id) return game.actors.get(actor_id) || null;\n    else return null;\n}\nfunction $ba32b9ea93ee5c3a$export$9c490b34b2f16a34(arr) {\n    const mid = Math.floor(arr.length / 2), nums = [\n        ...arr\n    ].sort((a, b)=>a - b);\n    return arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n}\nfunction $ba32b9ea93ee5c3a$export$6d905af60429adc0(member_list) {\n    return member_list[Math.floor(Math.random() * member_list.length)];\n}\n\n\nvar $f7972d8082eaa7d7$exports = {};\n/**\n * Tagify (v 4.17.9) - tags input component\n * By undefined\n * https://github.com/yairEO/tagify\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n * \n * THE SOFTWARE IS NOT PERMISSIBLE TO BE SOLD.\n */ !function(t1, e) {\n    $f7972d8082eaa7d7$exports = e();\n}($f7972d8082eaa7d7$exports, function() {\n    \"use strict\";\n    function t1(t1, e) {\n        var i = Object.keys(t1);\n        if (Object.getOwnPropertySymbols) {\n            var s = Object.getOwnPropertySymbols(t1);\n            e && (s = s.filter(function(e) {\n                return Object.getOwnPropertyDescriptor(t1, e).enumerable;\n            })), i.push.apply(i, s);\n        }\n        return i;\n    }\n    function e(e) {\n        for(var s = 1; s < arguments.length; s++){\n            var a = null != arguments[s] ? arguments[s] : {};\n            s % 2 ? t1(Object(a), !0).forEach(function(t1) {\n                i(e, t1, a[t1]);\n            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(a)) : t1(Object(a)).forEach(function(t1) {\n                Object.defineProperty(e, t1, Object.getOwnPropertyDescriptor(a, t1));\n            });\n        }\n        return e;\n    }\n    function i(t1, e, i) {\n        return (e = function(t1) {\n            var e = function(t1, e) {\n                if (\"object\" != typeof t1 || null === t1) return t1;\n                var i = t1[Symbol.toPrimitive];\n                if (void 0 !== i) {\n                    var s = i.call(t1, e || \"default\");\n                    if (\"object\" != typeof s) return s;\n                    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n                }\n                return (\"string\" === e ? String : Number)(t1);\n            }(t1, \"string\");\n            return \"symbol\" == typeof e ? e : String(e);\n        }(e)) in t1 ? Object.defineProperty(t1, e, {\n            value: i,\n            enumerable: !0,\n            configurable: !0,\n            writable: !0\n        }) : t1[e] = i, t1;\n    }\n    var s = \"\\u200B\";\n    const a = (t1, e, i, s)=>(t1 = \"\" + t1, e = \"\" + e, s && (t1 = t1.trim(), e = e.trim()), i ? t1 == e : t1.toLowerCase() == e.toLowerCase()), n = (t1, e)=>t1 && Array.isArray(t1) && t1.map((t1)=>o(t1, e));\n    function o(t1, e) {\n        var i, s = {};\n        for(i in t1)e.indexOf(i) < 0 && (s[i] = t1[i]);\n        return s;\n    }\n    function r(t1) {\n        var e = document.createElement(\"div\");\n        return t1.replace(/\\&#?[0-9a-z]+;/gi, function(t1) {\n            return e.innerHTML = t1, e.innerText;\n        });\n    }\n    function l(t1) {\n        return (new DOMParser).parseFromString(t1.trim(), \"text/html\").body.firstElementChild;\n    }\n    function d(t1, e) {\n        for(e = e || \"previous\"; t1 = t1[e + \"Sibling\"];)if (3 == t1.nodeType) return t1;\n    }\n    function h(t1) {\n        return \"string\" == typeof t1 ? t1.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/`|'/g, \"&#039;\") : t1;\n    }\n    function g(t1) {\n        var e = Object.prototype.toString.call(t1).split(\" \")[1].slice(0, -1);\n        return t1 === Object(t1) && \"Array\" != e && \"Function\" != e && \"RegExp\" != e && \"HTMLUnknownElement\" != e;\n    }\n    function p(t1, e, i) {\n        function s(t1, e) {\n            for(var i in e)if (e.hasOwnProperty(i)) {\n                if (g(e[i])) {\n                    g(t1[i]) ? s(t1[i], e[i]) : t1[i] = Object.assign({}, e[i]);\n                    continue;\n                }\n                if (Array.isArray(e[i])) {\n                    t1[i] = Object.assign([], e[i]);\n                    continue;\n                }\n                t1[i] = e[i];\n            }\n        }\n        return t1 instanceof Object || (t1 = {}), s(t1, e), i && s(t1, i), t1;\n    }\n    function c() {\n        const t1 = [], e = {};\n        for (let i of arguments)for (let s of i)g(s) ? e[s.value] || (t1.push(s), e[s.value] = 1) : t1.includes(s) || t1.push(s);\n        return t1;\n    }\n    function u(t1) {\n        return String.prototype.normalize ? \"string\" == typeof t1 ? t1.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\") : void 0 : t1;\n    }\n    var m = ()=>/(?=.*chrome)(?=.*android)/i.test(navigator.userAgent);\n    function v() {\n        return \"10000000-1000-4000-8000-100000000000\".replace(/[018]/g, (t1)=>(t1 ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> t1 / 4).toString(16));\n    }\n    function f(t1) {\n        return t1 && t1.classList && t1.classList.contains(this.settings.classNames.tag);\n    }\n    function T(t1, e) {\n        var i = window.getSelection();\n        return e = e || i.getRangeAt(0), \"string\" == typeof t1 && (t1 = document.createTextNode(t1)), e && (e.deleteContents(), e.insertNode(t1)), t1;\n    }\n    function w(t1, e, i) {\n        return t1 ? (e && (t1.__tagifyTagData = i ? e : p({}, t1.__tagifyTagData || {}, e)), t1.__tagifyTagData) : (console.warn(\"tag element doesn't exist\", t1, e), e);\n    }\n    function b(t1) {\n        if (t1 && t1.parentNode) {\n            var e = t1, i = window.getSelection(), s = i.getRangeAt(0);\n            i.rangeCount && (s.setStartAfter(e), s.collapse(!0), i.removeAllRanges(), i.addRange(s));\n        }\n    }\n    function y(t1, e) {\n        t1.forEach((t1)=>{\n            if (w(t1.previousSibling) || !t1.previousSibling) {\n                var i = document.createTextNode(s);\n                t1.before(i), e && b(i);\n            }\n        });\n    }\n    var x = {\n        delimiters: \",\",\n        pattern: null,\n        tagTextProp: \"value\",\n        maxTags: 1 / 0,\n        callbacks: {},\n        addTagOnBlur: !0,\n        onChangeAfterBlur: !0,\n        duplicates: !1,\n        whitelist: [],\n        blacklist: [],\n        enforceWhitelist: !1,\n        userInput: !0,\n        keepInvalidTags: !1,\n        createInvalidTags: !0,\n        mixTagsAllowedAfter: /,|\\.|\\:|\\s/,\n        mixTagsInterpolator: [\n            \"[[\",\n            \"]]\"\n        ],\n        backspace: !0,\n        skipInvalid: !1,\n        pasteAsTags: !0,\n        editTags: {\n            clicks: 2,\n            keepInvalid: !0\n        },\n        transformTag: ()=>{},\n        trim: !0,\n        a11y: {\n            focusableTags: !1\n        },\n        mixMode: {\n            insertAfterTag: \"\\xa0\"\n        },\n        autoComplete: {\n            enabled: !0,\n            rightKey: !1\n        },\n        classNames: {\n            namespace: \"tagify\",\n            mixMode: \"tagify--mix\",\n            selectMode: \"tagify--select\",\n            input: \"tagify__input\",\n            focus: \"tagify--focus\",\n            tagNoAnimation: \"tagify--noAnim\",\n            tagInvalid: \"tagify--invalid\",\n            tagNotAllowed: \"tagify--notAllowed\",\n            scopeLoading: \"tagify--loading\",\n            hasMaxTags: \"tagify--hasMaxTags\",\n            hasNoTags: \"tagify--noTags\",\n            empty: \"tagify--empty\",\n            inputInvalid: \"tagify__input--invalid\",\n            dropdown: \"tagify__dropdown\",\n            dropdownWrapper: \"tagify__dropdown__wrapper\",\n            dropdownHeader: \"tagify__dropdown__header\",\n            dropdownFooter: \"tagify__dropdown__footer\",\n            dropdownItem: \"tagify__dropdown__item\",\n            dropdownItemActive: \"tagify__dropdown__item--active\",\n            dropdownItemHidden: \"tagify__dropdown__item--hidden\",\n            dropdownInital: \"tagify__dropdown--initial\",\n            tag: \"tagify__tag\",\n            tagText: \"tagify__tag-text\",\n            tagX: \"tagify__tag__removeBtn\",\n            tagLoading: \"tagify__tag--loading\",\n            tagEditing: \"tagify__tag--editable\",\n            tagFlash: \"tagify__tag--flash\",\n            tagHide: \"tagify__tag--hide\"\n        },\n        dropdown: {\n            classname: \"\",\n            enabled: 2,\n            maxItems: 10,\n            searchKeys: [\n                \"value\",\n                \"searchBy\"\n            ],\n            fuzzySearch: !0,\n            caseSensitive: !1,\n            accentedSearch: !0,\n            includeSelectedTags: !1,\n            highlightFirst: !1,\n            closeOnSelect: !0,\n            clearOnSelect: !0,\n            position: \"all\",\n            appendTarget: null\n        },\n        hooks: {\n            beforeRemoveTag: ()=>Promise.resolve(),\n            beforePaste: ()=>Promise.resolve(),\n            suggestionClick: ()=>Promise.resolve()\n        }\n    };\n    function O() {\n        this.dropdown = {};\n        for(let t1 in this._dropdown)this.dropdown[t1] = \"function\" == typeof this._dropdown[t1] ? this._dropdown[t1].bind(this) : this._dropdown[t1];\n        this.dropdown.refs();\n    }\n    var D = {\n        refs () {\n            this.DOM.dropdown = this.parseTemplate(\"dropdown\", [\n                this.settings\n            ]), this.DOM.dropdown.content = this.DOM.dropdown.querySelector(\"[data-selector='tagify-suggestions-wrapper']\");\n        },\n        getHeaderRef () {\n            return this.DOM.dropdown.querySelector(\"[data-selector='tagify-suggestions-header']\");\n        },\n        getFooterRef () {\n            return this.DOM.dropdown.querySelector(\"[data-selector='tagify-suggestions-footer']\");\n        },\n        getAllSuggestionsRefs () {\n            return [\n                ...this.DOM.dropdown.content.querySelectorAll(this.settings.classNames.dropdownItemSelector)\n            ];\n        },\n        show (t1) {\n            var e, i, s, n = this.settings, o = \"mix\" == n.mode && !n.enforceWhitelist, r = !n.whitelist || !n.whitelist.length, l = \"manual\" == n.dropdown.position;\n            if (t1 = void 0 === t1 ? this.state.inputText : t1, !(r && !o && !n.templates.dropdownItemNoMatch || !1 === n.dropdown.enable || this.state.isLoading || this.settings.readonly)) {\n                if (clearTimeout(this.dropdownHide__bindEventsTimeout), this.suggestedListItems = this.dropdown.filterListItems(t1), t1 && !this.suggestedListItems.length && (this.trigger(\"dropdown:noMatch\", t1), n.templates.dropdownItemNoMatch && (s = n.templates.dropdownItemNoMatch.call(this, {\n                    value: t1\n                }))), !s) {\n                    if (this.suggestedListItems.length) t1 && o && !this.state.editing.scope && !a(this.suggestedListItems[0].value, t1) && this.suggestedListItems.unshift({\n                        value: t1\n                    });\n                    else {\n                        if (!t1 || !o || this.state.editing.scope) return this.input.autocomplete.suggest.call(this), void this.dropdown.hide();\n                        this.suggestedListItems = [\n                            {\n                                value: t1\n                            }\n                        ];\n                    }\n                    i = \"\" + (g(e = this.suggestedListItems[0]) ? e.value : e), n.autoComplete && i && 0 == i.indexOf(t1) && this.input.autocomplete.suggest.call(this, e);\n                }\n                this.dropdown.fill(s), n.dropdown.highlightFirst && this.dropdown.highlightOption(this.DOM.dropdown.content.querySelector(n.classNames.dropdownItemSelector)), this.state.dropdown.visible || setTimeout(this.dropdown.events.binding.bind(this)), this.state.dropdown.visible = t1 || !0, this.state.dropdown.query = t1, this.setStateSelection(), l || setTimeout(()=>{\n                    this.dropdown.position(), this.dropdown.render();\n                }), setTimeout(()=>{\n                    this.trigger(\"dropdown:show\", this.DOM.dropdown);\n                });\n            }\n        },\n        hide (t1) {\n            var e = this.DOM, i = e.scope, s = e.dropdown, a = \"manual\" == this.settings.dropdown.position && !t1;\n            if (s && document.body.contains(s) && !a) return window.removeEventListener(\"resize\", this.dropdown.position), this.dropdown.events.binding.call(this, !1), i.setAttribute(\"aria-expanded\", !1), s.parentNode.removeChild(s), setTimeout(()=>{\n                this.state.dropdown.visible = !1;\n            }, 100), this.state.dropdown.query = this.state.ddItemData = this.state.ddItemElm = this.state.selection = null, this.state.tag && this.state.tag.value.length && (this.state.flaggedTags[this.state.tag.baseOffset] = this.state.tag), this.trigger(\"dropdown:hide\", s), this;\n        },\n        toggle (t1) {\n            this.dropdown[this.state.dropdown.visible && !t1 ? \"hide\" : \"show\"]();\n        },\n        render () {\n            var t1, e, i, s = (t1 = this.DOM.dropdown, (i = t1.cloneNode(!0)).style.cssText = \"position:fixed; top:-9999px; opacity:0\", document.body.appendChild(i), e = i.clientHeight, i.parentNode.removeChild(i), e), a = this.settings;\n            return \"number\" == typeof a.dropdown.enabled && a.dropdown.enabled >= 0 ? (this.DOM.scope.setAttribute(\"aria-expanded\", !0), document.body.contains(this.DOM.dropdown) || (this.DOM.dropdown.classList.add(a.classNames.dropdownInital), this.dropdown.position(s), a.dropdown.appendTarget.appendChild(this.DOM.dropdown), setTimeout(()=>this.DOM.dropdown.classList.remove(a.classNames.dropdownInital))), this) : this;\n        },\n        fill (t1) {\n            t1 = \"string\" == typeof t1 ? t1 : this.dropdown.createListHTML(t1 || this.suggestedListItems);\n            var e, i = this.settings.templates.dropdownContent.call(this, t1);\n            this.DOM.dropdown.content.innerHTML = (e = i) ? e.replace(/\\>[\\r\\n ]+\\</g, \"><\").split(/>\\s+</).join(\"><\").trim() : \"\";\n        },\n        fillHeaderFooter () {\n            var t1 = this.dropdown.filterListItems(this.state.dropdown.query), e = this.parseTemplate(\"dropdownHeader\", [\n                t1\n            ]), i = this.parseTemplate(\"dropdownFooter\", [\n                t1\n            ]), s = this.dropdown.getHeaderRef(), a = this.dropdown.getFooterRef();\n            e && s?.parentNode.replaceChild(e, s), i && a?.parentNode.replaceChild(i, a);\n        },\n        refilter (t1) {\n            t1 = t1 || this.state.dropdown.query || \"\", this.suggestedListItems = this.dropdown.filterListItems(t1), this.dropdown.fill(), this.suggestedListItems.length || this.dropdown.hide(), this.trigger(\"dropdown:updated\", this.DOM.dropdown);\n        },\n        position (t1) {\n            var e = this.settings.dropdown;\n            if (\"manual\" != e.position) {\n                var i, s, a, n, o, r, l = this.DOM.dropdown, d = e.placeAbove, h = e.appendTarget === document.body, g = h ? window.pageYOffset : e.appendTarget.scrollTop, p = document.fullscreenElement || document.webkitFullscreenElement || document.documentElement, c = p.clientHeight, u = Math.max(p.clientWidth || 0, window.innerWidth || 0) > 480 ? e.position : \"all\", m = this.DOM[\"input\" == u ? \"input\" : \"scope\"];\n                if (t1 = t1 || l.clientHeight, this.state.dropdown.visible) {\n                    if (\"text\" == u ? (a = (i = function() {\n                        const t1 = document.getSelection();\n                        if (t1.rangeCount) {\n                            const e = t1.getRangeAt(0), i = e.startContainer, s = e.startOffset;\n                            let a, n;\n                            if (s > 0) return n = document.createRange(), n.setStart(i, s - 1), n.setEnd(i, s), a = n.getBoundingClientRect(), {\n                                left: a.right,\n                                top: a.top,\n                                bottom: a.bottom\n                            };\n                            if (i.getBoundingClientRect) return i.getBoundingClientRect();\n                        }\n                        return {\n                            left: -9999,\n                            top: -9999\n                        };\n                    }()).bottom, s = i.top, n = i.left, o = \"auto\") : (r = function(t1) {\n                        for(var e = 0, i = 0; t1 && t1 != p;)e += t1.offsetLeft || 0, i += t1.offsetTop || 0, t1 = t1.parentNode;\n                        return {\n                            left: e,\n                            top: i\n                        };\n                    }(e.appendTarget), s = (i = m.getBoundingClientRect()).top - r.top, a = i.bottom - 1 - r.top, n = i.left - r.left, o = i.width + \"px\"), !h) {\n                        let t1 = function() {\n                            for(var t1 = 0, i = e.appendTarget.parentNode; i;)t1 += i.scrollTop || 0, i = i.parentNode;\n                            return t1;\n                        }();\n                        s += t1, a += t1;\n                    }\n                    s = Math.floor(s), a = Math.ceil(a), d = void 0 === d ? c - i.bottom < t1 : d, l.style.cssText = \"left:\" + (n + window.pageXOffset) + \"px; width:\" + o + \";\" + (d ? \"top: \" + (s + g) + \"px\" : \"top: \" + (a + g) + \"px\"), l.setAttribute(\"placement\", d ? \"top\" : \"bottom\"), l.setAttribute(\"position\", u);\n                }\n            }\n        },\n        events: {\n            binding () {\n                let t1 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];\n                var e = this.dropdown.events.callbacks, i = this.listeners.dropdown = this.listeners.dropdown || {\n                    position: this.dropdown.position.bind(this, null),\n                    onKeyDown: e.onKeyDown.bind(this),\n                    onMouseOver: e.onMouseOver.bind(this),\n                    onMouseLeave: e.onMouseLeave.bind(this),\n                    onClick: e.onClick.bind(this),\n                    onScroll: e.onScroll.bind(this)\n                }, s = t1 ? \"addEventListener\" : \"removeEventListener\";\n                \"manual\" != this.settings.dropdown.position && (document[s](\"scroll\", i.position, !0), window[s](\"resize\", i.position), window[s](\"keydown\", i.onKeyDown)), this.DOM.dropdown[s](\"mouseover\", i.onMouseOver), this.DOM.dropdown[s](\"mouseleave\", i.onMouseLeave), this.DOM.dropdown[s](\"mousedown\", i.onClick), this.DOM.dropdown.content[s](\"scroll\", i.onScroll);\n            },\n            callbacks: {\n                onKeyDown (t1) {\n                    if (this.state.hasFocus && !this.state.composing) {\n                        var e = this.DOM.dropdown.querySelector(this.settings.classNames.dropdownItemActiveSelector), i = this.dropdown.getSuggestionDataByNode(e);\n                        switch(t1.key){\n                            case \"ArrowDown\":\n                            case \"ArrowUp\":\n                            case \"Down\":\n                            case \"Up\":\n                                t1.preventDefault();\n                                var s = this.dropdown.getAllSuggestionsRefs(), a = \"ArrowUp\" == t1.key || \"Up\" == t1.key;\n                                e && (e = this.dropdown.getNextOrPrevOption(e, !a)), e && e.matches(this.settings.classNames.dropdownItemSelector) || (e = s[a ? s.length - 1 : 0]), this.dropdown.highlightOption(e, !0);\n                                break;\n                            case \"Escape\":\n                            case \"Esc\":\n                                this.dropdown.hide();\n                                break;\n                            case \"ArrowRight\":\n                                if (this.state.actions.ArrowLeft) return;\n                            case \"Tab\":\n                                if (\"mix\" != this.settings.mode && e && !this.settings.autoComplete.rightKey && !this.state.editing) {\n                                    t1.preventDefault();\n                                    var n = this.dropdown.getMappedValue(i);\n                                    return this.input.autocomplete.set.call(this, n), !1;\n                                }\n                                return !0;\n                            case \"Enter\":\n                                t1.preventDefault(), this.settings.hooks.suggestionClick(t1, {\n                                    tagify: this,\n                                    tagData: i,\n                                    suggestionElm: e\n                                }).then(()=>{\n                                    if (e) return this.dropdown.selectOption(e), e = this.dropdown.getNextOrPrevOption(e, !a), void this.dropdown.highlightOption(e);\n                                    this.dropdown.hide(), \"mix\" != this.settings.mode && this.addTags(this.state.inputText.trim(), !0);\n                                }).catch((t1)=>t1);\n                                break;\n                            case \"Backspace\":\n                                {\n                                    if (\"mix\" == this.settings.mode || this.state.editing.scope) return;\n                                    const t1 = this.input.raw.call(this);\n                                    \"\" != t1 && 8203 != t1.charCodeAt(0) || (!0 === this.settings.backspace ? this.removeTags() : \"edit\" == this.settings.backspace && setTimeout(this.editTag.bind(this), 0));\n                                }\n                        }\n                    }\n                },\n                onMouseOver (t1) {\n                    var e = t1.target.closest(this.settings.classNames.dropdownItemSelector);\n                    e && this.dropdown.highlightOption(e);\n                },\n                onMouseLeave (t1) {\n                    this.dropdown.highlightOption();\n                },\n                onClick (t1) {\n                    if (0 == t1.button && t1.target != this.DOM.dropdown && t1.target != this.DOM.dropdown.content) {\n                        var e = t1.target.closest(this.settings.classNames.dropdownItemSelector), i = this.dropdown.getSuggestionDataByNode(e);\n                        this.state.actions.selectOption = !0, setTimeout(()=>this.state.actions.selectOption = !1, 50), this.settings.hooks.suggestionClick(t1, {\n                            tagify: this,\n                            tagData: i,\n                            suggestionElm: e\n                        }).then(()=>{\n                            e ? this.dropdown.selectOption(e, t1) : this.dropdown.hide();\n                        }).catch((t1)=>console.warn(t1));\n                    }\n                },\n                onScroll (t1) {\n                    var e = t1.target, i = e.scrollTop / (e.scrollHeight - e.parentNode.clientHeight) * 100;\n                    this.trigger(\"dropdown:scroll\", {\n                        percentage: Math.round(i)\n                    });\n                }\n            }\n        },\n        getSuggestionDataByNode (t1) {\n            var e = t1 && t1.getAttribute(\"value\");\n            return this.suggestedListItems.find((t1)=>t1.value == e) || null;\n        },\n        getNextOrPrevOption (t1) {\n            let e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];\n            var i = this.dropdown.getAllSuggestionsRefs(), s = i.findIndex((e)=>e === t1);\n            return e ? i[s + 1] : i[s - 1];\n        },\n        highlightOption (t1, e) {\n            var i, s = this.settings.classNames.dropdownItemActive;\n            if (this.state.ddItemElm && (this.state.ddItemElm.classList.remove(s), this.state.ddItemElm.removeAttribute(\"aria-selected\")), !t1) return this.state.ddItemData = null, this.state.ddItemElm = null, void this.input.autocomplete.suggest.call(this);\n            i = this.dropdown.getSuggestionDataByNode(t1), this.state.ddItemData = i, this.state.ddItemElm = t1, t1.classList.add(s), t1.setAttribute(\"aria-selected\", !0), e && (t1.parentNode.scrollTop = t1.clientHeight + t1.offsetTop - t1.parentNode.clientHeight), this.settings.autoComplete && (this.input.autocomplete.suggest.call(this, i), this.dropdown.position());\n        },\n        selectOption (t1, e) {\n            var i = this.settings.dropdown, s = i.clearOnSelect, a = i.closeOnSelect;\n            if (!t1) return this.addTags(this.state.inputText, !0), void (a && this.dropdown.hide());\n            e = e || {};\n            var n = t1.getAttribute(\"value\"), o = \"noMatch\" == n, r = this.suggestedListItems.find((t1)=>(t1.value ?? t1) == n);\n            this.trigger(\"dropdown:select\", {\n                data: r,\n                elm: t1,\n                event: e\n            }), n && (r || o) ? (this.state.editing ? this.onEditTagDone(null, p({\n                __isValid: !0\n            }, this.normalizeTags([\n                r\n            ])[0])) : this[\"mix\" == this.settings.mode ? \"addMixTags\" : \"addTags\"]([\n                r || this.input.raw.call(this)\n            ], s), this.DOM.input.parentNode && (setTimeout(()=>{\n                this.DOM.input.focus(), this.toggleFocusClass(!0);\n            }), a && setTimeout(this.dropdown.hide.bind(this)), t1.addEventListener(\"transitionend\", ()=>{\n                this.dropdown.fillHeaderFooter(), setTimeout(()=>t1.remove(), 100);\n            }, {\n                once: !0\n            }), t1.classList.add(this.settings.classNames.dropdownItemHidden))) : a && setTimeout(this.dropdown.hide.bind(this));\n        },\n        selectAll (t1) {\n            this.suggestedListItems.length = 0, this.dropdown.hide(), this.dropdown.filterListItems(\"\");\n            var e = this.dropdown.filterListItems(\"\");\n            return t1 || (e = this.state.dropdown.suggestions), this.addTags(e, !0), this;\n        },\n        filterListItems (t1, e) {\n            var i, s, a, n, o, r = this.settings, l = r.dropdown, d = (e = e || {}, []), h = [], p = r.whitelist, c = l.maxItems >= 0 ? l.maxItems : 1 / 0, m = l.searchKeys, v = 0;\n            if (!(t1 = \"select\" == r.mode && this.value.length && this.value[0][r.tagTextProp] == t1 ? \"\" : t1) || !m.length) return d = l.includeSelectedTags ? p : p.filter((t1)=>!this.isTagDuplicate(g(t1) ? t1.value : t1)), this.state.dropdown.suggestions = d, d.slice(0, c);\n            function f(t1, e) {\n                return e.toLowerCase().split(\" \").every((e)=>t1.includes(e.toLowerCase()));\n            }\n            for(o = l.caseSensitive ? \"\" + t1 : (\"\" + t1).toLowerCase(); v < p.length; v++){\n                let t1, r;\n                i = p[v] instanceof Object ? p[v] : {\n                    value: p[v]\n                };\n                let c = !Object.keys(i).some((t1)=>m.includes(t1)) ? [\n                    \"value\"\n                ] : m;\n                l.fuzzySearch && !e.exact ? (a = c.reduce((t1, e)=>t1 + \" \" + (i[e] || \"\"), \"\").toLowerCase().trim(), l.accentedSearch && (a = u(a), o = u(o)), t1 = 0 == a.indexOf(o), r = a === o, s = f(a, o)) : (t1 = !0, s = c.some((t1)=>{\n                    var s = \"\" + (i[t1] || \"\");\n                    return l.accentedSearch && (s = u(s), o = u(o)), l.caseSensitive || (s = s.toLowerCase()), r = s === o, e.exact ? s === o : 0 == s.indexOf(o);\n                })), n = !l.includeSelectedTags && this.isTagDuplicate(g(i) ? i.value : i), s && !n && (r && t1 ? h.push(i) : \"startsWith\" == l.sortby && t1 ? d.unshift(i) : d.push(i));\n            }\n            return this.state.dropdown.suggestions = h.concat(d), \"function\" == typeof l.sortby ? l.sortby(h.concat(d), o) : h.concat(d).slice(0, c);\n        },\n        getMappedValue (t1) {\n            var e = this.settings.dropdown.mapValueTo;\n            return e ? \"function\" == typeof e ? e(t1) : t1[e] || t1.value : t1.value;\n        },\n        createListHTML (t1) {\n            return p([], t1).map((t1, i)=>{\n                \"string\" != typeof t1 && \"number\" != typeof t1 || (t1 = {\n                    value: t1\n                });\n                var s = this.dropdown.getMappedValue(t1);\n                return s = \"string\" == typeof s ? h(s) : s, this.settings.templates.dropdownItem.apply(this, [\n                    e(e({}, t1), {}, {\n                        mappedValue: s\n                    }),\n                    this\n                ]);\n            }).join(\"\");\n        }\n    };\n    const M = \"@yaireo/tagify/\";\n    var I, N = {\n        empty: \"empty\",\n        exceed: \"number of tags exceeded\",\n        pattern: \"pattern mismatch\",\n        duplicate: \"already exists\",\n        notAllowed: \"not allowed\"\n    }, S = {\n        wrapper: (t1, e)=>`<tags class=\"${e.classNames.namespace} ${e.mode ? `${e.classNames[e.mode + \"Mode\"]}` : \"\"} ${t1.className}\"\\n                    ${e.readonly ? \"readonly\" : \"\"}\\n                    ${e.disabled ? \"disabled\" : \"\"}\\n                    ${e.required ? \"required\" : \"\"}\\n                    ${\"select\" === e.mode ? \"spellcheck='false'\" : \"\"}\\n                    tabIndex=\"-1\">\\n            <span ${!e.readonly && e.userInput ? \"contenteditable\" : \"\"} tabIndex=\"0\" data-placeholder=\"${e.placeholder || \"&#8203;\"}\" aria-placeholder=\"${e.placeholder || \"\"}\"\\n                class=\"${e.classNames.input}\"\\n                role=\"textbox\"\\n                aria-autocomplete=\"both\"\\n                aria-multiline=\"${\"mix\" == e.mode}\"></span>\\n                &#8203;\\n        </tags>`,\n        tag (t1, e) {\n            let i = e.settings;\n            return `<tag title=\"${t1.title || t1.value}\"\\n                    contenteditable='false'\\n                    spellcheck='false'\\n                    tabIndex=\"${i.a11y.focusableTags ? 0 : -1}\"\\n                    class=\"${i.classNames.tag} ${t1.class || \"\"}\"\\n                    ${this.getAttributes(t1)}>\\n            <x title='' class=\"${i.classNames.tagX}\" role='button' aria-label='remove tag'></x>\\n            <div>\\n                <span class=\"${i.classNames.tagText}\">${t1[i.tagTextProp] || t1.value}</span>\\n            </div>\\n        </tag>`;\n        },\n        dropdown (t1) {\n            var e = t1.dropdown, i = \"manual\" == e.position, s = `${t1.classNames.dropdown}`;\n            return `<div class=\"${i ? \"\" : s} ${e.classname}\" role=\"listbox\" aria-labelledby=\"dropdown\">\\n                    <div data-selector='tagify-suggestions-wrapper' class=\"${t1.classNames.dropdownWrapper}\"></div>\\n                </div>`;\n        },\n        dropdownContent (t1) {\n            var e = this.settings, i = this.state.dropdown.suggestions;\n            return `\\n            ${e.templates.dropdownHeader.call(this, i)}\\n            ${t1}\\n            ${e.templates.dropdownFooter.call(this, i)}\\n        `;\n        },\n        dropdownItem (t1) {\n            return `<div ${this.getAttributes(t1)}\\n                    class='${this.settings.classNames.dropdownItem} ${t1.class ? t1.class : \"\"}'\\n                    tabindex=\"0\"\\n                    role=\"option\">${t1.mappedValue || t1.value}</div>`;\n        },\n        dropdownHeader (t1) {\n            return `<header data-selector='tagify-suggestions-header' class=\"${this.settings.classNames.dropdownHeader}\"></header>`;\n        },\n        dropdownFooter (t1) {\n            var e = t1.length - this.settings.dropdown.maxItems;\n            return e > 0 ? `<footer data-selector='tagify-suggestions-footer' class=\"${this.settings.classNames.dropdownFooter}\">\\n                ${e} more items. Refine your search.\\n            </footer>` : \"\";\n        },\n        dropdownItemNoMatch: null\n    };\n    var E = {\n        customBinding () {\n            this.customEventsList.forEach((t1)=>{\n                this.on(t1, this.settings.callbacks[t1]);\n            });\n        },\n        binding () {\n            let t1 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];\n            var e, i = this.events.callbacks, s = t1 ? \"addEventListener\" : \"removeEventListener\";\n            if (!this.state.mainEvents || !t1) {\n                for(var a in this.state.mainEvents = t1, t1 && !this.listeners.main && (this.events.bindGlobal.call(this), this.settings.isJQueryPlugin && jQuery(this.DOM.originalInput).on(\"tagify.removeAllTags\", this.removeAllTags.bind(this))), e = this.listeners.main = this.listeners.main || {\n                    focus: [\n                        \"input\",\n                        i.onFocusBlur.bind(this)\n                    ],\n                    keydown: [\n                        \"input\",\n                        i.onKeydown.bind(this)\n                    ],\n                    click: [\n                        \"scope\",\n                        i.onClickScope.bind(this)\n                    ],\n                    dblclick: [\n                        \"scope\",\n                        i.onDoubleClickScope.bind(this)\n                    ],\n                    paste: [\n                        \"input\",\n                        i.onPaste.bind(this)\n                    ],\n                    drop: [\n                        \"input\",\n                        i.onDrop.bind(this)\n                    ],\n                    compositionstart: [\n                        \"input\",\n                        i.onCompositionStart.bind(this)\n                    ],\n                    compositionend: [\n                        \"input\",\n                        i.onCompositionEnd.bind(this)\n                    ]\n                })this.DOM[e[a][0]][s](a, e[a][1]);\n                clearInterval(this.listeners.main.originalInputValueObserverInterval), this.listeners.main.originalInputValueObserverInterval = setInterval(i.observeOriginalInputValue.bind(this), 500);\n                var n = this.listeners.main.inputMutationObserver || new MutationObserver(i.onInputDOMChange.bind(this));\n                n.disconnect(), \"mix\" == this.settings.mode && n.observe(this.DOM.input, {\n                    childList: !0\n                });\n            }\n        },\n        bindGlobal (t1) {\n            var e, i = this.events.callbacks, s = t1 ? \"removeEventListener\" : \"addEventListener\";\n            if (this.listeners && (t1 || !this.listeners.global)) for (e of (this.listeners.global = this.listeners.global || [\n                {\n                    type: this.isIE ? \"keydown\" : \"input\",\n                    target: this.DOM.input,\n                    cb: i[this.isIE ? \"onInputIE\" : \"onInput\"].bind(this)\n                },\n                {\n                    type: \"keydown\",\n                    target: window,\n                    cb: i.onWindowKeyDown.bind(this)\n                },\n                {\n                    type: \"blur\",\n                    target: this.DOM.input,\n                    cb: i.onFocusBlur.bind(this)\n                },\n                {\n                    type: \"click\",\n                    target: document,\n                    cb: i.onClickAnywhere.bind(this)\n                }\n            ], this.listeners.global))e.target[s](e.type, e.cb);\n        },\n        unbindGlobal () {\n            this.events.bindGlobal.call(this, !0);\n        },\n        callbacks: {\n            onFocusBlur (t1) {\n                var e = this.settings, i = t1.target ? this.trim(t1.target.textContent) : \"\", s = this.value?.[0]?.[e.tagTextProp], a = t1.type, n = e.dropdown.enabled >= 0, o = {\n                    relatedTarget: t1.relatedTarget\n                }, r = this.state.actions.selectOption && (n || !e.dropdown.closeOnSelect), l = this.state.actions.addNew && n, d = t1.relatedTarget && f.call(this, t1.relatedTarget) && this.DOM.scope.contains(t1.relatedTarget);\n                if (\"blur\" == a) {\n                    if (t1.relatedTarget === this.DOM.scope) return this.dropdown.hide(), void this.DOM.input.focus();\n                    this.postUpdate(), e.onChangeAfterBlur && this.triggerChangeEvent();\n                }\n                if (!r && !l) {\n                    if (this.state.hasFocus = \"focus\" == a && +new Date, this.toggleFocusClass(this.state.hasFocus), \"mix\" != e.mode) {\n                        if (\"focus\" == a) return this.trigger(\"focus\", o), void (0 !== e.dropdown.enabled && e.userInput || this.dropdown.show(this.value.length ? \"\" : void 0));\n                        \"blur\" == a && (this.trigger(\"blur\", o), this.loading(!1), \"select\" == e.mode && (d && (this.removeTags(), i = \"\"), s === i && (i = \"\")), i && !this.state.actions.selectOption && e.addTagOnBlur && this.addTags(i, !0)), this.DOM.input.removeAttribute(\"style\"), this.dropdown.hide();\n                    } else \"focus\" == a ? this.trigger(\"focus\", o) : \"blur\" == t1.type && (this.trigger(\"blur\", o), this.loading(!1), this.dropdown.hide(), this.state.dropdown.visible = void 0, this.setStateSelection());\n                }\n            },\n            onCompositionStart (t1) {\n                this.state.composing = !0;\n            },\n            onCompositionEnd (t1) {\n                this.state.composing = !1;\n            },\n            onWindowKeyDown (t1) {\n                var e, i = document.activeElement, s = f.call(this, i) && this.DOM.scope.contains(document.activeElement), a = s && i.hasAttribute(\"readonly\");\n                if (s && !a) switch(e = i.nextElementSibling, t1.key){\n                    case \"Backspace\":\n                        this.settings.readonly || (this.removeTags(i), (e || this.DOM.input).focus());\n                        break;\n                    case \"Enter\":\n                        setTimeout(this.editTag.bind(this), 0, i);\n                }\n            },\n            onKeydown (t1) {\n                var e = this.settings;\n                if (!this.state.composing && e.userInput) {\n                    \"select\" == e.mode && e.enforceWhitelist && this.value.length && \"Tab\" != t1.key && t1.preventDefault();\n                    var i = this.trim(t1.target.textContent);\n                    if (this.trigger(\"keydown\", {\n                        event: t1\n                    }), \"mix\" == e.mode) {\n                        switch(t1.key){\n                            case \"Left\":\n                            case \"ArrowLeft\":\n                                this.state.actions.ArrowLeft = !0;\n                                break;\n                            case \"Delete\":\n                            case \"Backspace\":\n                                if (this.state.editing) return;\n                                var s = document.getSelection(), a = \"Delete\" == t1.key && s.anchorOffset == (s.anchorNode.length || 0), n = s.anchorNode.previousSibling, o = 1 == s.anchorNode.nodeType || !s.anchorOffset && n && 1 == n.nodeType && s.anchorNode.previousSibling;\n                                r(this.DOM.input.innerHTML);\n                                var l, h, g, p = this.getTagElms(), c = 1 === s.anchorNode.length && s.anchorNode.nodeValue == String.fromCharCode(8203);\n                                if (\"edit\" == e.backspace && o) return l = 1 == s.anchorNode.nodeType ? null : s.anchorNode.previousElementSibling, setTimeout(this.editTag.bind(this), 0, l), void t1.preventDefault();\n                                if (m() && o instanceof Element) return g = d(o), o.hasAttribute(\"readonly\") || o.remove(), this.DOM.input.focus(), void setTimeout(()=>{\n                                    b(g), this.DOM.input.click();\n                                });\n                                if (\"BR\" == s.anchorNode.nodeName) return;\n                                if ((a || o) && 1 == s.anchorNode.nodeType ? h = 0 == s.anchorOffset ? a ? p[0] : null : p[Math.min(p.length, s.anchorOffset) - 1] : a ? h = s.anchorNode.nextElementSibling : o instanceof Element && (h = o), 3 == s.anchorNode.nodeType && !s.anchorNode.nodeValue && s.anchorNode.previousElementSibling && t1.preventDefault(), (o || a) && !e.backspace) return void t1.preventDefault();\n                                if (\"Range\" != s.type && !s.anchorOffset && s.anchorNode == this.DOM.input && \"Delete\" != t1.key) return void t1.preventDefault();\n                                if (\"Range\" != s.type && h && h.hasAttribute(\"readonly\")) return void b(d(h));\n                                \"Delete\" == t1.key && c && w(s.anchorNode.nextSibling) && this.removeTags(s.anchorNode.nextSibling), clearTimeout(I), I = setTimeout(()=>{\n                                    var t1 = document.getSelection();\n                                    r(this.DOM.input.innerHTML), !a && t1.anchorNode.previousSibling, this.value = [].map.call(p, (t1, e)=>{\n                                        var i = w(t1);\n                                        if (t1.parentNode || i.readonly) return i;\n                                        this.trigger(\"remove\", {\n                                            tag: t1,\n                                            index: e,\n                                            data: i\n                                        });\n                                    }).filter((t1)=>t1);\n                                }, 20);\n                        }\n                        return !0;\n                    }\n                    switch(t1.key){\n                        case \"Backspace\":\n                            \"select\" == e.mode && e.enforceWhitelist && this.value.length ? this.removeTags() : this.state.dropdown.visible && \"manual\" != e.dropdown.position || \"\" != t1.target.textContent && 8203 != i.charCodeAt(0) || (!0 === e.backspace ? this.removeTags() : \"edit\" == e.backspace && setTimeout(this.editTag.bind(this), 0));\n                            break;\n                        case \"Esc\":\n                        case \"Escape\":\n                            if (this.state.dropdown.visible) return;\n                            t1.target.blur();\n                            break;\n                        case \"Down\":\n                        case \"ArrowDown\":\n                            this.state.dropdown.visible || this.dropdown.show();\n                            break;\n                        case \"ArrowRight\":\n                            {\n                                let t1 = this.state.inputSuggestion || this.state.ddItemData;\n                                if (t1 && e.autoComplete.rightKey) return void this.addTags([\n                                    t1\n                                ], !0);\n                                break;\n                            }\n                        case \"Tab\":\n                            {\n                                let s = \"select\" == e.mode;\n                                if (!i || s) return !0;\n                                t1.preventDefault();\n                            }\n                        case \"Enter\":\n                            if (this.state.dropdown.visible && \"manual\" != e.dropdown.position) return;\n                            t1.preventDefault(), setTimeout(()=>{\n                                this.state.dropdown.visible || this.state.actions.selectOption || this.addTags(i, !0);\n                            });\n                    }\n                }\n            },\n            onInput (t1) {\n                this.postUpdate();\n                var e = this.settings;\n                if (\"mix\" == e.mode) return this.events.callbacks.onMixTagsInput.call(this, t1);\n                var i = this.input.normalize.call(this), s = i.length >= e.dropdown.enabled, a = {\n                    value: i,\n                    inputElm: this.DOM.input\n                }, n = this.validateTag({\n                    value: i\n                });\n                \"select\" == e.mode && this.toggleScopeValidation(n), a.isValid = n, this.state.inputText != i && (this.input.set.call(this, i, !1), -1 != i.search(e.delimiters) ? this.addTags(i) && this.input.set.call(this) : e.dropdown.enabled >= 0 && this.dropdown[s ? \"show\" : \"hide\"](i), this.trigger(\"input\", a));\n            },\n            onMixTagsInput (t1) {\n                var e, i, s, a, n, o, r, l, d = this.settings, h = this.value.length, g = this.getTagElms(), c = document.createDocumentFragment(), u = window.getSelection().getRangeAt(0), v = [].map.call(g, (t1)=>w(t1).value);\n                if (\"deleteContentBackward\" == t1.inputType && m() && this.events.callbacks.onKeydown.call(this, {\n                    target: t1.target,\n                    key: \"Backspace\"\n                }), y(this.getTagElms()), this.value.slice().forEach((t1)=>{\n                    t1.readonly && !v.includes(t1.value) && c.appendChild(this.createTagElem(t1));\n                }), c.childNodes.length && (u.insertNode(c), this.setRangeAtStartEnd(!1, c.lastChild)), g.length != h) return this.value = [].map.call(this.getTagElms(), (t1)=>w(t1)), void this.update({\n                    withoutChangeEvent: !0\n                });\n                if (this.hasMaxTags()) return !0;\n                if (window.getSelection && (o = window.getSelection()).rangeCount > 0 && 3 == o.anchorNode.nodeType) {\n                    if ((u = o.getRangeAt(0).cloneRange()).collapse(!0), u.setStart(o.focusNode, 0), s = (e = u.toString().slice(0, u.endOffset)).split(d.pattern).length - 1, (i = e.match(d.pattern)) && (a = e.slice(e.lastIndexOf(i[i.length - 1]))), a) {\n                        if (this.state.actions.ArrowLeft = !1, this.state.tag = {\n                            prefix: a.match(d.pattern)[0],\n                            value: a.replace(d.pattern, \"\")\n                        }, this.state.tag.baseOffset = o.baseOffset - this.state.tag.value.length, l = this.state.tag.value.match(d.delimiters)) return this.state.tag.value = this.state.tag.value.replace(d.delimiters, \"\"), this.state.tag.delimiters = l[0], this.addTags(this.state.tag.value, d.dropdown.clearOnSelect), void this.dropdown.hide();\n                        n = this.state.tag.value.length >= d.dropdown.enabled;\n                        try {\n                            r = (r = this.state.flaggedTags[this.state.tag.baseOffset]).prefix == this.state.tag.prefix && r.value[0] == this.state.tag.value[0], this.state.flaggedTags[this.state.tag.baseOffset] && !this.state.tag.value && delete this.state.flaggedTags[this.state.tag.baseOffset];\n                        } catch (t1) {}\n                        (r || s < this.state.mixMode.matchedPatternCount) && (n = !1);\n                    } else this.state.flaggedTags = {};\n                    this.state.mixMode.matchedPatternCount = s;\n                }\n                setTimeout(()=>{\n                    this.update({\n                        withoutChangeEvent: !0\n                    }), this.trigger(\"input\", p({}, this.state.tag, {\n                        textContent: this.DOM.input.textContent\n                    })), this.state.tag && this.dropdown[n ? \"show\" : \"hide\"](this.state.tag.value);\n                }, 10);\n            },\n            onInputIE (t1) {\n                var e = this;\n                setTimeout(function() {\n                    e.events.callbacks.onInput.call(e, t1);\n                });\n            },\n            observeOriginalInputValue () {\n                this.DOM.originalInput.parentNode || this.destroy(), this.DOM.originalInput.value != this.DOM.originalInput.tagifyValue && this.loadOriginalValues();\n            },\n            onClickAnywhere (t1) {\n                t1.target == this.DOM.scope || this.DOM.scope.contains(t1.target) || (this.toggleFocusClass(!1), this.state.hasFocus = !1);\n            },\n            onClickScope (t1) {\n                var e = this.settings, i = t1.target.closest(\".\" + e.classNames.tag), s = +new Date - this.state.hasFocus;\n                if (t1.target != this.DOM.scope) {\n                    if (!t1.target.classList.contains(e.classNames.tagX)) return i ? (this.trigger(\"click\", {\n                        tag: i,\n                        index: this.getNodeIndex(i),\n                        data: w(i),\n                        event: t1\n                    }), void (1 !== e.editTags && 1 !== e.editTags.clicks || this.events.callbacks.onDoubleClickScope.call(this, t1))) : void (t1.target == this.DOM.input && (\"mix\" == e.mode && this.fixFirefoxLastTagNoCaret(), s > 500) ? this.state.dropdown.visible ? this.dropdown.hide() : 0 === e.dropdown.enabled && \"mix\" != e.mode && this.dropdown.show(this.value.length ? \"\" : void 0) : \"select\" != e.mode || 0 !== e.dropdown.enabled || this.state.dropdown.visible || this.dropdown.show());\n                    this.removeTags(t1.target.parentNode);\n                } else this.DOM.input.focus();\n            },\n            onPaste (t1) {\n                t1.preventDefault();\n                var e, i, s = this.settings;\n                if (\"select\" == s.mode && s.enforceWhitelist || !s.userInput) return !1;\n                s.readonly || (e = t1.clipboardData || window.clipboardData, i = e.getData(\"Text\"), s.hooks.beforePaste(t1, {\n                    tagify: this,\n                    pastedText: i,\n                    clipboardData: e\n                }).then((e)=>{\n                    void 0 === e && (e = i), e && (this.injectAtCaret(e, window.getSelection().getRangeAt(0)), \"mix\" == this.settings.mode ? this.events.callbacks.onMixTagsInput.call(this, t1) : this.settings.pasteAsTags ? this.addTags(this.state.inputText + e, !0) : this.state.inputText = e);\n                }).catch((t1)=>t1));\n            },\n            onDrop (t1) {\n                t1.preventDefault();\n            },\n            onEditTagInput (t1, e) {\n                var i = t1.closest(\".\" + this.settings.classNames.tag), s = this.getNodeIndex(i), a = w(i), n = this.input.normalize.call(this, t1), o = {\n                    [this.settings.tagTextProp]: n,\n                    __tagId: a.__tagId\n                }, r = this.validateTag(o);\n                this.editTagChangeDetected(p(a, o)) || !0 !== t1.originalIsValid || (r = !0), i.classList.toggle(this.settings.classNames.tagInvalid, !0 !== r), a.__isValid = r, i.title = !0 === r ? a.title || a.value : r, n.length >= this.settings.dropdown.enabled && (this.state.editing && (this.state.editing.value = n), this.dropdown.show(n)), this.trigger(\"edit:input\", {\n                    tag: i,\n                    index: s,\n                    data: p({}, this.value[s], {\n                        newValue: n\n                    }),\n                    event: e\n                });\n            },\n            onEditTagPaste (t1, e) {\n                var i = (e.clipboardData || window.clipboardData).getData(\"Text\");\n                e.preventDefault();\n                var s = T(i);\n                this.setRangeAtStartEnd(!1, s);\n            },\n            onEditTagFocus (t1) {\n                this.state.editing = {\n                    scope: t1,\n                    input: t1.querySelector(\"[contenteditable]\")\n                };\n            },\n            onEditTagBlur (t1) {\n                if (this.state.hasFocus || this.toggleFocusClass(), this.DOM.scope.contains(t1)) {\n                    var e, i, s = this.settings, a = t1.closest(\".\" + s.classNames.tag), n = w(a), o = this.input.normalize.call(this, t1), r = {\n                        [s.tagTextProp]: o,\n                        __tagId: n.__tagId\n                    }, l = n.__originalData, d = this.editTagChangeDetected(p(n, r)), h = this.validateTag(r);\n                    if (o) {\n                        if (d) {\n                            if (e = this.hasMaxTags(), i = p({}, l, {\n                                [s.tagTextProp]: this.trim(o),\n                                __isValid: h\n                            }), s.transformTag.call(this, i, l), !0 !== (h = (!e || !0 === l.__isValid) && this.validateTag(i))) {\n                                if (this.trigger(\"invalid\", {\n                                    data: i,\n                                    tag: a,\n                                    message: h\n                                }), s.editTags.keepInvalid) return;\n                                s.keepInvalidTags ? i.__isValid = h : i = l;\n                            } else s.keepInvalidTags && (delete i.title, delete i[\"aria-invalid\"], delete i.class);\n                            this.onEditTagDone(a, i);\n                        } else this.onEditTagDone(a, l);\n                    } else this.onEditTagDone(a);\n                }\n            },\n            onEditTagkeydown (t1, e) {\n                if (!this.state.composing) switch(this.trigger(\"edit:keydown\", {\n                    event: t1\n                }), t1.key){\n                    case \"Esc\":\n                    case \"Escape\":\n                        e.parentNode.replaceChild(e.__tagifyTagData.__originalHTML, e), this.state.editing = !1;\n                    case \"Enter\":\n                    case \"Tab\":\n                        t1.preventDefault(), t1.target.blur();\n                }\n            },\n            onDoubleClickScope (t1) {\n                var e, i, s = t1.target.closest(\".\" + this.settings.classNames.tag), a = w(s), n = this.settings;\n                s && n.userInput && !1 !== a.editable && (e = s.classList.contains(this.settings.classNames.tagEditing), i = s.hasAttribute(\"readonly\"), \"select\" == n.mode || n.readonly || e || i || !this.settings.editTags || this.editTag(s), this.toggleFocusClass(!0), this.trigger(\"dblclick\", {\n                    tag: s,\n                    index: this.getNodeIndex(s),\n                    data: w(s)\n                }));\n            },\n            onInputDOMChange (t1) {\n                t1.forEach((t1)=>{\n                    t1.addedNodes.forEach((t1)=>{\n                        if (\"<div><br></div>\" == t1.outerHTML) t1.replaceWith(document.createElement(\"br\"));\n                        else if (1 == t1.nodeType && t1.querySelector(this.settings.classNames.tagSelector)) {\n                            let e = document.createTextNode(\"\");\n                            3 == t1.childNodes[0].nodeType && \"BR\" != t1.previousSibling.nodeName && (e = document.createTextNode(\"\\n\")), t1.replaceWith(e, ...[\n                                ...t1.childNodes\n                            ].slice(0, -1)), b(e);\n                        } else if (f.call(this, t1)) {\n                            if (3 != t1.previousSibling?.nodeType || t1.previousSibling.textContent || t1.previousSibling.remove(), t1.previousSibling && \"BR\" == t1.previousSibling.nodeName) {\n                                t1.previousSibling.replaceWith(\"\\n\" + s);\n                                let e = t1.nextSibling, i = \"\";\n                                for(; e;)i += e.textContent, e = e.nextSibling;\n                                i.trim() && b(t1.previousSibling);\n                            } else t1.previousSibling && !w(t1.previousSibling) || t1.before(s);\n                        }\n                    }), t1.removedNodes.forEach((t1)=>{\n                        t1 && \"BR\" == t1.nodeName && f.call(this, e) && (this.removeTags(e), this.fixFirefoxLastTagNoCaret());\n                    });\n                });\n                var e = this.DOM.input.lastChild;\n                e && \"\" == e.nodeValue && e.remove(), e && \"BR\" == e.nodeName || this.DOM.input.appendChild(document.createElement(\"br\"));\n            }\n        }\n    };\n    function _(t1, e) {\n        if (!t1) {\n            console.warn(\"Tagify:\", \"input element not found\", t1);\n            const e = new Proxy(this, {\n                get: ()=>()=>e\n            });\n            return e;\n        }\n        if (t1.__tagify) return console.warn(\"Tagify: \", \"input element is already Tagified - Same instance is returned.\", t1), t1.__tagify;\n        var i;\n        p(this, function(t1) {\n            var e = document.createTextNode(\"\");\n            function i(t1, i, s) {\n                s && i.split(/\\s+/g).forEach((i)=>e[t1 + \"EventListener\"].call(e, i, s));\n            }\n            return {\n                off (t1, e) {\n                    return i(\"remove\", t1, e), this;\n                },\n                on (t1, e) {\n                    return e && \"function\" == typeof e && i(\"add\", t1, e), this;\n                },\n                trigger (i, s, a) {\n                    var n;\n                    if (a = a || {\n                        cloneData: !0\n                    }, i) {\n                        if (t1.settings.isJQueryPlugin) \"remove\" == i && (i = \"removeTag\"), jQuery(t1.DOM.originalInput).triggerHandler(i, [\n                            s\n                        ]);\n                        else {\n                            try {\n                                var o = \"object\" == typeof s ? s : {\n                                    value: s\n                                };\n                                if ((o = a.cloneData ? p({}, o) : o).tagify = this, s.event && (o.event = this.cloneEvent(s.event)), s instanceof Object) for(var r in s)s[r] instanceof HTMLElement && (o[r] = s[r]);\n                                n = new CustomEvent(i, {\n                                    detail: o\n                                });\n                            } catch (t1) {\n                                console.warn(t1);\n                            }\n                            e.dispatchEvent(n);\n                        }\n                    }\n                }\n            };\n        }(this)), this.isFirefox = /firefox|fxios/i.test(navigator.userAgent) && !/seamonkey/i.test(navigator.userAgent), this.isIE = window.document.documentMode, e = e || {}, this.getPersistedData = (i = e.id, (t1)=>{\n            let e, s = \"/\" + t1;\n            if (1 == localStorage.getItem(M + i + \"/v\", 1)) try {\n                e = JSON.parse(localStorage[M + i + s]);\n            } catch (t1) {}\n            return e;\n        }), this.setPersistedData = ((t1)=>t1 ? (localStorage.setItem(M + t1 + \"/v\", 1), (e, i)=>{\n                let s = \"/\" + i, a = JSON.stringify(e);\n                e && i && (localStorage.setItem(M + t1 + s, a), dispatchEvent(new Event(\"storage\")));\n            }) : ()=>{})(e.id), this.clearPersistedData = ((t1)=>(e)=>{\n                const i = M + \"/\" + t1 + \"/\";\n                if (e) localStorage.removeItem(i + e);\n                else for(let t1 in localStorage)t1.includes(i) && localStorage.removeItem(t1);\n            })(e.id), this.applySettings(t1, e), this.state = {\n            inputText: \"\",\n            editing: !1,\n            composing: !1,\n            actions: {},\n            mixMode: {},\n            dropdown: {},\n            flaggedTags: {}\n        }, this.value = [], this.listeners = {}, this.DOM = {}, this.build(t1), O.call(this), this.getCSSVars(), this.loadOriginalValues(), this.events.customBinding.call(this), this.events.binding.call(this), t1.autofocus && this.DOM.input.focus(), t1.__tagify = this;\n    }\n    return _.prototype = {\n        _dropdown: D,\n        getSetTagData: w,\n        helpers: {\n            sameStr: a,\n            removeCollectionProp: n,\n            omit: o,\n            isObject: g,\n            parseHTML: l,\n            escapeHTML: h,\n            extend: p,\n            concatWithoutDups: c,\n            getUID: v,\n            isNodeTag: f\n        },\n        customEventsList: [\n            \"change\",\n            \"add\",\n            \"remove\",\n            \"invalid\",\n            \"input\",\n            \"click\",\n            \"keydown\",\n            \"focus\",\n            \"blur\",\n            \"edit:input\",\n            \"edit:beforeUpdate\",\n            \"edit:updated\",\n            \"edit:start\",\n            \"edit:keydown\",\n            \"dropdown:show\",\n            \"dropdown:hide\",\n            \"dropdown:select\",\n            \"dropdown:updated\",\n            \"dropdown:noMatch\",\n            \"dropdown:scroll\"\n        ],\n        dataProps: [\n            \"__isValid\",\n            \"__removed\",\n            \"__originalData\",\n            \"__originalHTML\",\n            \"__tagId\"\n        ],\n        trim (t1) {\n            return this.settings.trim && t1 && \"string\" == typeof t1 ? t1.trim() : t1;\n        },\n        parseHTML: l,\n        templates: S,\n        parseTemplate (t1, e) {\n            return l((t1 = this.settings.templates[t1] || t1).apply(this, e));\n        },\n        set whitelist (t){\n            const e = t && Array.isArray(t);\n            this.settings.whitelist = e ? t : [], this.setPersistedData(e ? t : [], \"whitelist\");\n        },\n        get whitelist () {\n            return this.settings.whitelist;\n        },\n        generateClassSelectors (t1) {\n            for(let e in t1){\n                let i = e;\n                Object.defineProperty(t1, i + \"Selector\", {\n                    get () {\n                        return \".\" + this[i].split(\" \")[0];\n                    }\n                });\n            }\n        },\n        applySettings (t1, i) {\n            x.templates = this.templates;\n            var s = p({}, x, \"mix\" == i.mode ? {\n                dropdown: {\n                    position: \"text\"\n                }\n            } : {}), a = this.settings = p({}, s, i);\n            if (a.disabled = t1.hasAttribute(\"disabled\"), a.readonly = a.readonly || t1.hasAttribute(\"readonly\"), a.placeholder = h(t1.getAttribute(\"placeholder\") || a.placeholder || \"\"), a.required = t1.hasAttribute(\"required\"), this.generateClassSelectors(a.classNames), void 0 === a.dropdown.includeSelectedTags && (a.dropdown.includeSelectedTags = a.duplicates), this.isIE && (a.autoComplete = !1), [\n                \"whitelist\",\n                \"blacklist\"\n            ].forEach((e)=>{\n                var i = t1.getAttribute(\"data-\" + e);\n                i && (i = i.split(a.delimiters)) instanceof Array && (a[e] = i);\n            }), \"autoComplete\" in i && !g(i.autoComplete) && (a.autoComplete = x.autoComplete, a.autoComplete.enabled = i.autoComplete), \"mix\" == a.mode && (a.pattern = a.pattern || /@/, a.autoComplete.rightKey = !0, a.delimiters = i.delimiters || null, a.tagTextProp && !a.dropdown.searchKeys.includes(a.tagTextProp) && a.dropdown.searchKeys.push(a.tagTextProp)), t1.pattern) try {\n                a.pattern = new RegExp(t1.pattern);\n            } catch (t1) {}\n            if (a.delimiters) {\n                a._delimiters = a.delimiters;\n                try {\n                    a.delimiters = new RegExp(this.settings.delimiters, \"g\");\n                } catch (t1) {}\n            }\n            a.disabled && (a.userInput = !1), this.TEXTS = e(e({}, N), a.texts || {}), (\"select\" != a.mode || i.dropdown?.enabled) && a.userInput || (a.dropdown.enabled = 0), a.dropdown.appendTarget = i.dropdown?.appendTarget || document.body;\n            let n = this.getPersistedData(\"whitelist\");\n            Array.isArray(n) && (this.whitelist = Array.isArray(a.whitelist) ? c(a.whitelist, n) : n);\n        },\n        getAttributes (t1) {\n            var e, i = this.getCustomAttributes(t1), s = \"\";\n            for(e in i)s += \" \" + e + (void 0 !== t1[e] ? `=\"${i[e]}\"` : \"\");\n            return s;\n        },\n        getCustomAttributes (t1) {\n            if (!g(t1)) return \"\";\n            var e, i = {};\n            for(e in t1)\"__\" != e.slice(0, 2) && \"class\" != e && t1.hasOwnProperty(e) && void 0 !== t1[e] && (i[e] = h(t1[e]));\n            return i;\n        },\n        setStateSelection () {\n            var t1 = window.getSelection(), e = {\n                anchorOffset: t1.anchorOffset,\n                anchorNode: t1.anchorNode,\n                range: t1.getRangeAt && t1.rangeCount && t1.getRangeAt(0)\n            };\n            return this.state.selection = e, e;\n        },\n        getCSSVars () {\n            var t1 = getComputedStyle(this.DOM.scope, null);\n            var e;\n            this.CSSVars = {\n                tagHideTransition: ((t1)=>{\n                    let e = t1.value;\n                    return \"s\" == t1.unit ? 1e3 * e : e;\n                })(function(t1) {\n                    if (!t1) return {};\n                    var e = (t1 = t1.trim().split(\" \")[0]).split(/\\d+/g).filter((t1)=>t1).pop().trim();\n                    return {\n                        value: +t1.split(e).filter((t1)=>t1)[0].trim(),\n                        unit: e\n                    };\n                }((e = \"tag-hide-transition\", t1.getPropertyValue(\"--\" + e))))\n            };\n        },\n        build (t1) {\n            var e = this.DOM;\n            this.settings.mixMode.integrated ? (e.originalInput = null, e.scope = t1, e.input = t1) : (e.originalInput = t1, e.originalInput_tabIndex = t1.tabIndex, e.scope = this.parseTemplate(\"wrapper\", [\n                t1,\n                this.settings\n            ]), e.input = e.scope.querySelector(this.settings.classNames.inputSelector), t1.parentNode.insertBefore(e.scope, t1), t1.tabIndex = -1);\n        },\n        destroy () {\n            this.events.unbindGlobal.call(this), this.DOM.scope.parentNode.removeChild(this.DOM.scope), this.DOM.originalInput.tabIndex = this.DOM.originalInput_tabIndex, delete this.DOM.originalInput.__tagify, this.dropdown.hide(!0), clearTimeout(this.dropdownHide__bindEventsTimeout), clearInterval(this.listeners.main.originalInputValueObserverInterval);\n        },\n        loadOriginalValues (t1) {\n            var e, i = this.settings;\n            if (this.state.blockChangeEvent = !0, void 0 === t1) {\n                const e = this.getPersistedData(\"value\");\n                t1 = e && !this.DOM.originalInput.value ? e : i.mixMode.integrated ? this.DOM.input.textContent : this.DOM.originalInput.value;\n            }\n            if (this.removeAllTags(), t1) {\n                if (\"mix\" == i.mode) this.parseMixTags(t1), (e = this.DOM.input.lastChild) && \"BR\" == e.tagName || this.DOM.input.insertAdjacentHTML(\"beforeend\", \"<br>\");\n                else {\n                    try {\n                        JSON.parse(t1) instanceof Array && (t1 = JSON.parse(t1));\n                    } catch (t1) {}\n                    this.addTags(t1, !0).forEach((t1)=>t1 && t1.classList.add(i.classNames.tagNoAnimation));\n                }\n            } else this.postUpdate();\n            this.state.lastOriginalValueReported = i.mixMode.integrated ? \"\" : this.DOM.originalInput.value;\n        },\n        cloneEvent (t1) {\n            var e = {};\n            for(var i in t1)\"path\" != i && (e[i] = t1[i]);\n            return e;\n        },\n        loading (t1) {\n            return this.state.isLoading = t1, this.DOM.scope.classList[t1 ? \"add\" : \"remove\"](this.settings.classNames.scopeLoading), this;\n        },\n        tagLoading (t1, e) {\n            return t1 && t1.classList[e ? \"add\" : \"remove\"](this.settings.classNames.tagLoading), this;\n        },\n        toggleClass (t1, e) {\n            \"string\" == typeof t1 && this.DOM.scope.classList.toggle(t1, e);\n        },\n        toggleScopeValidation (t1) {\n            var e = !0 === t1 || void 0 === t1;\n            !this.settings.required && t1 && t1 === this.TEXTS.empty && (e = !0), this.toggleClass(this.settings.classNames.tagInvalid, !e), this.DOM.scope.title = e ? \"\" : t1;\n        },\n        toggleFocusClass (t1) {\n            this.toggleClass(this.settings.classNames.focus, !!t1);\n        },\n        triggerChangeEvent: function() {\n            if (!this.settings.mixMode.integrated) {\n                var t1 = this.DOM.originalInput, e = this.state.lastOriginalValueReported !== t1.value, i = new CustomEvent(\"change\", {\n                    bubbles: !0\n                });\n                e && (this.state.lastOriginalValueReported = t1.value, i.simulated = !0, t1._valueTracker && t1._valueTracker.setValue(Math.random()), t1.dispatchEvent(i), this.trigger(\"change\", this.state.lastOriginalValueReported), t1.value = this.state.lastOriginalValueReported);\n            }\n        },\n        events: E,\n        fixFirefoxLastTagNoCaret () {},\n        setRangeAtStartEnd (t1, e) {\n            if (e) {\n                t1 = \"number\" == typeof t1 ? t1 : !!t1, e = e.lastChild || e;\n                var i = document.getSelection();\n                if (i.focusNode instanceof Element && !this.DOM.input.contains(i.focusNode)) return !0;\n                try {\n                    i.rangeCount >= 1 && [\n                        \"Start\",\n                        \"End\"\n                    ].forEach((s)=>i.getRangeAt(0)[\"set\" + s](e, t1 || e.length));\n                } catch (t1) {}\n            }\n        },\n        insertAfterTag (t1, e) {\n            if (e = e || this.settings.mixMode.insertAfterTag, t1 && t1.parentNode && e) return e = \"string\" == typeof e ? document.createTextNode(e) : e, t1.parentNode.insertBefore(e, t1.nextSibling), e;\n        },\n        editTagChangeDetected (t1) {\n            var e = t1.__originalData;\n            for(var i in e)if (!this.dataProps.includes(i) && t1[i] != e[i]) return !0;\n            return !1;\n        },\n        getTagTextNode (t1) {\n            return t1.querySelector(this.settings.classNames.tagTextSelector);\n        },\n        setTagTextNode (t1, e) {\n            this.getTagTextNode(t1).innerHTML = h(e);\n        },\n        editTag (t1, e) {\n            t1 = t1 || this.getLastTag(), e = e || {}, this.dropdown.hide();\n            var i = this.settings, s = this.getTagTextNode(t1), a = this.getNodeIndex(t1), n = w(t1), o = this.events.callbacks, r = this, l = !0;\n            if (s) {\n                if (!(n instanceof Object && \"editable\" in n) || n.editable) return n = w(t1, {\n                    __originalData: p({}, n),\n                    __originalHTML: t1.cloneNode(!0)\n                }), w(n.__originalHTML, n.__originalData), s.setAttribute(\"contenteditable\", !0), t1.classList.add(i.classNames.tagEditing), s.addEventListener(\"focus\", o.onEditTagFocus.bind(this, t1)), s.addEventListener(\"blur\", function() {\n                    setTimeout(()=>o.onEditTagBlur.call(r, r.getTagTextNode(t1)));\n                }), s.addEventListener(\"input\", o.onEditTagInput.bind(this, s)), s.addEventListener(\"paste\", o.onEditTagPaste.bind(this, s)), s.addEventListener(\"keydown\", (e)=>o.onEditTagkeydown.call(this, e, t1)), s.addEventListener(\"compositionstart\", o.onCompositionStart.bind(this)), s.addEventListener(\"compositionend\", o.onCompositionEnd.bind(this)), e.skipValidation || (l = this.editTagToggleValidity(t1)), s.originalIsValid = l, this.trigger(\"edit:start\", {\n                    tag: t1,\n                    index: a,\n                    data: n,\n                    isValid: l\n                }), s.focus(), this.setRangeAtStartEnd(!1, s), this;\n            } else console.warn(\"Cannot find element in Tag template: .\", i.classNames.tagTextSelector);\n        },\n        editTagToggleValidity (t1, e) {\n            var i;\n            if (e = e || w(t1)) return (i = !(\"__isValid\" in e) || !0 === e.__isValid) || this.removeTagsFromValue(t1), this.update(), t1.classList.toggle(this.settings.classNames.tagNotAllowed, !i), e.__isValid = i, e.__isValid;\n            console.warn(\"tag has no data: \", t1, e);\n        },\n        onEditTagDone (t1, e) {\n            e = e || {};\n            var i = {\n                tag: t1 = t1 || this.state.editing.scope,\n                index: this.getNodeIndex(t1),\n                previousData: w(t1),\n                data: e\n            };\n            this.trigger(\"edit:beforeUpdate\", i, {\n                cloneData: !1\n            }), this.state.editing = !1, delete e.__originalData, delete e.__originalHTML, t1 && e[this.settings.tagTextProp] ? (t1 = this.replaceTag(t1, e), this.editTagToggleValidity(t1, e), this.settings.a11y.focusableTags ? t1.focus() : b(t1)) : t1 && this.removeTags(t1), this.trigger(\"edit:updated\", i), this.dropdown.hide(), this.settings.keepInvalidTags && this.reCheckInvalidTags();\n        },\n        replaceTag (t1, e) {\n            e && e.value || (e = t1.__tagifyTagData), e.__isValid && 1 != e.__isValid && p(e, this.getInvalidTagAttrs(e, e.__isValid));\n            var i = this.createTagElem(e);\n            return t1.parentNode.replaceChild(i, t1), this.updateValueByDOMTags(), i;\n        },\n        updateValueByDOMTags () {\n            this.value.length = 0, [].forEach.call(this.getTagElms(), (t1)=>{\n                t1.classList.contains(this.settings.classNames.tagNotAllowed.split(\" \")[0]) || this.value.push(w(t1));\n            }), this.update();\n        },\n        injectAtCaret (t1, e) {\n            return !(e = e || this.state.selection?.range) && t1 ? (this.appendMixTags(t1), this) : (T(t1, e), this.setRangeAtStartEnd(!1, t1), this.updateValueByDOMTags(), this.update(), this);\n        },\n        input: {\n            set () {\n                let t1 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : \"\", e = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];\n                var i = this.settings.dropdown.closeOnSelect;\n                this.state.inputText = t1, e && (this.DOM.input.innerHTML = h(\"\" + t1)), !t1 && i && this.dropdown.hide.bind(this), this.input.autocomplete.suggest.call(this), this.input.validate.call(this);\n            },\n            raw () {\n                return this.DOM.input.textContent;\n            },\n            validate () {\n                var t1 = !this.state.inputText || !0 === this.validateTag({\n                    value: this.state.inputText\n                });\n                return this.DOM.input.classList.toggle(this.settings.classNames.inputInvalid, !t1), t1;\n            },\n            normalize (t1) {\n                var e = t1 || this.DOM.input, i = [];\n                e.childNodes.forEach((t1)=>3 == t1.nodeType && i.push(t1.nodeValue)), i = i.join(\"\\n\");\n                try {\n                    i = i.replace(/(?:\\r\\n|\\r|\\n)/g, this.settings.delimiters.source.charAt(0));\n                } catch (t1) {}\n                return i = i.replace(/\\s/g, \" \"), this.trim(i);\n            },\n            autocomplete: {\n                suggest (t1) {\n                    if (this.settings.autoComplete.enabled) {\n                        \"string\" == typeof (t1 = t1 || {\n                            value: \"\"\n                        }) && (t1 = {\n                            value: t1\n                        });\n                        var e = this.dropdown.getMappedValue(t1);\n                        if (\"number\" != typeof e) {\n                            var i = e.substr(0, this.state.inputText.length).toLowerCase(), s = e.substring(this.state.inputText.length);\n                            e && this.state.inputText && i == this.state.inputText.toLowerCase() ? (this.DOM.input.setAttribute(\"data-suggest\", s), this.state.inputSuggestion = t1) : (this.DOM.input.removeAttribute(\"data-suggest\"), delete this.state.inputSuggestion);\n                        }\n                    }\n                },\n                set (t1) {\n                    var e = this.DOM.input.getAttribute(\"data-suggest\"), i = t1 || (e ? this.state.inputText + e : null);\n                    return !!i && (\"mix\" == this.settings.mode ? this.replaceTextWithNode(document.createTextNode(this.state.tag.prefix + i)) : (this.input.set.call(this, i), this.setRangeAtStartEnd(!1, this.DOM.input)), this.input.autocomplete.suggest.call(this), this.dropdown.hide(), !0);\n                }\n            }\n        },\n        getTagIdx (t1) {\n            return this.value.findIndex((e)=>e.__tagId == (t1 || {}).__tagId);\n        },\n        getNodeIndex (t1) {\n            var e = 0;\n            if (t1) for(; t1 = t1.previousElementSibling;)e++;\n            return e;\n        },\n        getTagElms () {\n            for(var t1 = arguments.length, e = new Array(t1), i = 0; i < t1; i++)e[i] = arguments[i];\n            var s = \".\" + [\n                ...this.settings.classNames.tag.split(\" \"),\n                ...e\n            ].join(\".\");\n            return [].slice.call(this.DOM.scope.querySelectorAll(s));\n        },\n        getLastTag () {\n            var t1 = this.DOM.scope.querySelectorAll(`${this.settings.classNames.tagSelector}:not(.${this.settings.classNames.tagHide}):not([readonly])`);\n            return t1[t1.length - 1];\n        },\n        isTagDuplicate (t1, e, i) {\n            var s = 0;\n            if (\"select\" == this.settings.mode) return !1;\n            for (let n of this.value)a(this.trim(\"\" + t1), n.value, e) && i != n.__tagId && s++;\n            return s;\n        },\n        getTagIndexByValue (t1) {\n            var e = [], i = this.settings.dropdown.caseSensitive;\n            return this.getTagElms().forEach((s, n)=>{\n                s.__tagifyTagData && a(this.trim(s.__tagifyTagData.value), t1, i) && e.push(n);\n            }), e;\n        },\n        getTagElmByValue (t1) {\n            var e = this.getTagIndexByValue(t1)[0];\n            return this.getTagElms()[e];\n        },\n        flashTag (t1) {\n            t1 && (t1.classList.add(this.settings.classNames.tagFlash), setTimeout(()=>{\n                t1.classList.remove(this.settings.classNames.tagFlash);\n            }, 100));\n        },\n        isTagBlacklisted (t1) {\n            return t1 = this.trim(t1.toLowerCase()), this.settings.blacklist.filter((e)=>(\"\" + e).toLowerCase() == t1).length;\n        },\n        isTagWhitelisted (t1) {\n            return !!this.getWhitelistItem(t1);\n        },\n        getWhitelistItem (t1, e, i) {\n            e = e || \"value\";\n            var s, n = this.settings;\n            return (i = i || n.whitelist).some((i)=>{\n                var o = \"string\" == typeof i ? i : i[e] || i.value;\n                if (a(o, t1, n.dropdown.caseSensitive, n.trim)) return s = \"string\" == typeof i ? {\n                    value: i\n                } : i, !0;\n            }), s || \"value\" != e || \"value\" == n.tagTextProp || (s = this.getWhitelistItem(t1, n.tagTextProp, i)), s;\n        },\n        validateTag (t1) {\n            var e = this.settings, i = \"value\" in t1 ? \"value\" : e.tagTextProp, s = this.trim(t1[i] + \"\");\n            return (t1[i] + \"\").trim() ? \"mix\" != e.mode && e.pattern && e.pattern instanceof RegExp && !e.pattern.test(s) ? this.TEXTS.pattern : !e.duplicates && this.isTagDuplicate(s, e.dropdown.caseSensitive, t1.__tagId) ? this.TEXTS.duplicate : this.isTagBlacklisted(s) || e.enforceWhitelist && !this.isTagWhitelisted(s) ? this.TEXTS.notAllowed : !e.validate || e.validate(t1) : this.TEXTS.empty;\n        },\n        getInvalidTagAttrs (t1, e) {\n            return {\n                \"aria-invalid\": !0,\n                class: `${t1.class || \"\"} ${this.settings.classNames.tagNotAllowed}`.trim(),\n                title: e\n            };\n        },\n        hasMaxTags () {\n            return this.value.length >= this.settings.maxTags && this.TEXTS.exceed;\n        },\n        setReadonly (t1, e) {\n            var i = this.settings;\n            document.activeElement.blur(), i[e || \"readonly\"] = t1, this.DOM.scope[(t1 ? \"set\" : \"remove\") + \"Attribute\"](e || \"readonly\", !0), this.settings.userInput = !0, this.setContentEditable(!t1);\n        },\n        setContentEditable (t1) {\n            this.settings.userInput && (this.DOM.input.contentEditable = t1, this.DOM.input.tabIndex = t1 ? 0 : -1);\n        },\n        setDisabled (t1) {\n            this.setReadonly(t1, \"disabled\");\n        },\n        normalizeTags (t1) {\n            var e = this.settings, i = e.whitelist, s = e.delimiters, a = e.mode, n = e.tagTextProp, o = [], r = !!i && i[0] instanceof Object, l = Array.isArray(t1), d = l && t1[0].value, h = (t1)=>(t1 + \"\").split(s).filter((t1)=>t1).map((t1)=>({\n                        [n]: this.trim(t1),\n                        value: this.trim(t1)\n                    }));\n            if (\"number\" == typeof t1 && (t1 = t1.toString()), \"string\" == typeof t1) {\n                if (!t1.trim()) return [];\n                t1 = h(t1);\n            } else l && (t1 = [].concat(...t1.map((t1)=>null != t1.value ? t1 : h(t1))));\n            return r && !d && (t1.forEach((t1)=>{\n                var e = o.map((t1)=>t1.value), i = this.dropdown.filterListItems.call(this, t1[n], {\n                    exact: !0\n                });\n                this.settings.duplicates || (i = i.filter((t1)=>!e.includes(t1.value)));\n                var s = i.length > 1 ? this.getWhitelistItem(t1[n], n, i) : i[0];\n                s && s instanceof Object ? o.push(s) : \"mix\" != a && (null == t1.value && (t1.value = t1[n]), o.push(t1));\n            }), o.length && (t1 = o)), t1;\n        },\n        parseMixTags (t1) {\n            var e = this.settings, i = e.mixTagsInterpolator, s = e.duplicates, a = e.transformTag, n = e.enforceWhitelist, o = e.maxTags, r = e.tagTextProp, l = [];\n            t1 = t1.split(i[0]).map((t1, e)=>{\n                var d, h, g, p = t1.split(i[1]), c = p[0], u = l.length == o;\n                try {\n                    if (c == +c) throw Error;\n                    h = JSON.parse(c);\n                } catch (t1) {\n                    h = this.normalizeTags(c)[0] || {\n                        value: c\n                    };\n                }\n                if (a.call(this, h), u || !(p.length > 1) || n && !this.isTagWhitelisted(h.value) || !s && this.isTagDuplicate(h.value)) {\n                    if (t1) return e ? i[0] + t1 : t1;\n                } else h[d = h[r] ? r : \"value\"] = this.trim(h[d]), g = this.createTagElem(h), l.push(h), g.classList.add(this.settings.classNames.tagNoAnimation), p[0] = g.outerHTML, this.value.push(h);\n                return p.join(\"\");\n            }).join(\"\"), this.DOM.input.innerHTML = t1, this.DOM.input.appendChild(document.createTextNode(\"\")), this.DOM.input.normalize();\n            var d = this.getTagElms();\n            return d.forEach((t1, e)=>w(t1, l[e])), this.update({\n                withoutChangeEvent: !0\n            }), y(d, this.state.hasFocus), t1;\n        },\n        replaceTextWithNode (t1, e) {\n            if (this.state.tag || e) {\n                e = e || this.state.tag.prefix + this.state.tag.value;\n                var i, s, a = this.state.selection || window.getSelection(), n = a.anchorNode, o = this.state.tag.delimiters ? this.state.tag.delimiters.length : 0;\n                return n.splitText(a.anchorOffset - o), -1 == (i = n.nodeValue.lastIndexOf(e)) ? !0 : (s = n.splitText(i), t1 && n.parentNode.replaceChild(t1, s), !0);\n            }\n        },\n        selectTag (t1, e) {\n            var i = this.settings;\n            if (!i.enforceWhitelist || this.isTagWhitelisted(e.value)) {\n                this.input.set.call(this, e[i.tagTextProp] || e.value, !0), this.state.actions.selectOption && setTimeout(()=>this.setRangeAtStartEnd(!1, this.DOM.input));\n                var s = this.getLastTag();\n                return s ? this.replaceTag(s, e) : this.appendTag(t1), this.value[0] = e, this.update(), this.trigger(\"add\", {\n                    tag: t1,\n                    data: e\n                }), [\n                    t1\n                ];\n            }\n        },\n        addEmptyTag (t1) {\n            var e = p({\n                value: \"\"\n            }, t1 || {}), i = this.createTagElem(e);\n            w(i, e), this.appendTag(i), this.editTag(i, {\n                skipValidation: !0\n            });\n        },\n        addTags (t1, e, i) {\n            var s = [], a = this.settings, n = [], o = document.createDocumentFragment();\n            if (i = i || a.skipInvalid, !t1 || 0 == t1.length) return s;\n            switch(t1 = this.normalizeTags(t1), a.mode){\n                case \"mix\":\n                    return this.addMixTags(t1);\n                case \"select\":\n                    e = !1, this.removeAllTags();\n            }\n            return this.DOM.input.removeAttribute(\"style\"), t1.forEach((t1)=>{\n                var e, r = {}, l = Object.assign({}, t1, {\n                    value: t1.value + \"\"\n                });\n                if (t1 = Object.assign({}, l), a.transformTag.call(this, t1), t1.__isValid = this.hasMaxTags() || this.validateTag(t1), !0 !== t1.__isValid) {\n                    if (i) return;\n                    if (p(r, this.getInvalidTagAttrs(t1, t1.__isValid), {\n                        __preInvalidData: l\n                    }), t1.__isValid == this.TEXTS.duplicate && this.flashTag(this.getTagElmByValue(t1.value)), !a.createInvalidTags) return void n.push(t1.value);\n                }\n                if (\"readonly\" in t1 && (t1.readonly ? r[\"aria-readonly\"] = !0 : delete t1.readonly), e = this.createTagElem(t1, r), s.push(e), \"select\" == a.mode) return this.selectTag(e, t1);\n                o.appendChild(e), t1.__isValid && !0 === t1.__isValid ? (this.value.push(t1), this.trigger(\"add\", {\n                    tag: e,\n                    index: this.value.length - 1,\n                    data: t1\n                })) : (this.trigger(\"invalid\", {\n                    data: t1,\n                    index: this.value.length,\n                    tag: e,\n                    message: t1.__isValid\n                }), a.keepInvalidTags || setTimeout(()=>this.removeTags(e, !0), 1e3)), this.dropdown.position();\n            }), this.appendTag(o), this.update(), t1.length && e && (this.input.set.call(this, a.createInvalidTags ? \"\" : n.join(a._delimiters)), this.setRangeAtStartEnd(!1, this.DOM.input)), a.dropdown.enabled && this.dropdown.refilter(), s;\n        },\n        addMixTags (t1) {\n            if ((t1 = this.normalizeTags(t1))[0].prefix || this.state.tag) return this.prefixedTextToTag(t1[0]);\n            var e = document.createDocumentFragment();\n            return t1.forEach((t1)=>{\n                var i = this.createTagElem(t1);\n                e.appendChild(i);\n            }), this.appendMixTags(e), e;\n        },\n        appendMixTags (t1) {\n            var e = !!this.state.selection;\n            e ? this.injectAtCaret(t1) : (this.DOM.input.focus(), (e = this.setStateSelection()).range.setStart(this.DOM.input, e.range.endOffset), e.range.setEnd(this.DOM.input, e.range.endOffset), this.DOM.input.appendChild(t1), this.updateValueByDOMTags(), this.update());\n        },\n        prefixedTextToTag (t1) {\n            var e, i = this.settings, s = this.state.tag.delimiters;\n            if (i.transformTag.call(this, t1), t1.prefix = t1.prefix || this.state.tag ? this.state.tag.prefix : (i.pattern.source || i.pattern)[0], e = this.createTagElem(t1), this.replaceTextWithNode(e) || this.DOM.input.appendChild(e), setTimeout(()=>e.classList.add(this.settings.classNames.tagNoAnimation), 300), this.value.push(t1), this.update(), !s) {\n                var a = this.insertAfterTag(e) || e;\n                setTimeout(b, 0, a);\n            }\n            return this.state.tag = null, this.trigger(\"add\", p({}, {\n                tag: e\n            }, {\n                data: t1\n            })), e;\n        },\n        appendTag (t1) {\n            var e = this.DOM, i = e.input;\n            e.scope.insertBefore(t1, i);\n        },\n        createTagElem (t1, i) {\n            t1.__tagId = v();\n            var s, a = p({}, t1, e({\n                value: h(t1.value + \"\")\n            }, i));\n            return function(t1) {\n                for(var e, i = document.createNodeIterator(t1, NodeFilter.SHOW_TEXT, null, !1); e = i.nextNode();)e.textContent.trim() || e.parentNode.removeChild(e);\n            }(s = this.parseTemplate(\"tag\", [\n                a,\n                this\n            ])), w(s, t1), s;\n        },\n        reCheckInvalidTags () {\n            var t1 = this.settings;\n            this.getTagElms(t1.classNames.tagNotAllowed).forEach((e, i)=>{\n                var s = w(e), a = this.hasMaxTags(), n = this.validateTag(s), o = !0 === n && !a;\n                if (\"select\" == t1.mode && this.toggleScopeValidation(n), o) return s = s.__preInvalidData ? s.__preInvalidData : {\n                    value: s.value\n                }, this.replaceTag(e, s);\n                e.title = a || n;\n            });\n        },\n        removeTags (t1, e, i) {\n            var s, a = this.settings;\n            if (t1 = t1 && t1 instanceof HTMLElement ? [\n                t1\n            ] : t1 instanceof Array ? t1 : t1 ? [\n                t1\n            ] : [\n                this.getLastTag()\n            ], s = t1.reduce((t1, e)=>{\n                e && \"string\" == typeof e && (e = this.getTagElmByValue(e));\n                var i = w(e);\n                return e && i && !i.readonly && t1.push({\n                    node: e,\n                    idx: this.getTagIdx(i),\n                    data: w(e, {\n                        __removed: !0\n                    })\n                }), t1;\n            }, []), i = \"number\" == typeof i ? i : this.CSSVars.tagHideTransition, \"select\" == a.mode && (i = 0, this.input.set.call(this)), 1 == s.length && \"select\" != a.mode && s[0].node.classList.contains(a.classNames.tagNotAllowed) && (e = !0), s.length) return a.hooks.beforeRemoveTag(s, {\n                tagify: this\n            }).then(()=>{\n                function t1(t1) {\n                    t1.node.parentNode && (t1.node.parentNode.removeChild(t1.node), e ? a.keepInvalidTags && this.trigger(\"remove\", {\n                        tag: t1.node,\n                        index: t1.idx\n                    }) : (this.trigger(\"remove\", {\n                        tag: t1.node,\n                        index: t1.idx,\n                        data: t1.data\n                    }), this.dropdown.refilter(), this.dropdown.position(), this.DOM.input.normalize(), a.keepInvalidTags && this.reCheckInvalidTags()));\n                }\n                i && i > 10 && 1 == s.length ? (function(e) {\n                    e.node.style.width = parseFloat(window.getComputedStyle(e.node).width) + \"px\", document.body.clientTop, e.node.classList.add(a.classNames.tagHide), setTimeout(t1.bind(this), i, e);\n                }).call(this, s[0]) : s.forEach(t1.bind(this)), e || (this.removeTagsFromValue(s.map((t1)=>t1.node)), this.update(), \"select\" == a.mode && this.setContentEditable(!0));\n            }).catch((t1)=>{});\n        },\n        removeTagsFromDOM () {\n            [].slice.call(this.getTagElms()).forEach((t1)=>t1.parentNode.removeChild(t1));\n        },\n        removeTagsFromValue (t1) {\n            (t1 = Array.isArray(t1) ? t1 : [\n                t1\n            ]).forEach((t1)=>{\n                var e = w(t1), i = this.getTagIdx(e);\n                i > -1 && this.value.splice(i, 1);\n            });\n        },\n        removeAllTags (t1) {\n            t1 = t1 || {}, this.value = [], \"mix\" == this.settings.mode ? this.DOM.input.innerHTML = \"\" : this.removeTagsFromDOM(), this.dropdown.refilter(), this.dropdown.position(), this.state.dropdown.visible && setTimeout(()=>{\n                this.DOM.input.focus();\n            }), \"select\" == this.settings.mode && (this.input.set.call(this), this.setContentEditable(!0)), this.update(t1);\n        },\n        postUpdate () {\n            this.state.blockChangeEvent = !1;\n            var t1 = this.settings, e = t1.classNames, i = \"mix\" == t1.mode ? t1.mixMode.integrated ? this.DOM.input.textContent : this.DOM.originalInput.value.trim() : this.value.length + this.input.raw.call(this).length;\n            this.toggleClass(e.hasMaxTags, this.value.length >= t1.maxTags), this.toggleClass(e.hasNoTags, !this.value.length), this.toggleClass(e.empty, !i), \"select\" == t1.mode && this.toggleScopeValidation(this.value?.[0]?.__isValid);\n        },\n        setOriginalInputValue (t1) {\n            var e = this.DOM.originalInput;\n            this.settings.mixMode.integrated || (e.value = t1, e.tagifyValue = e.value, this.setPersistedData(t1, \"value\"));\n        },\n        update (t1) {\n            clearTimeout(this.debouncedUpdateTimeout), this.debouncedUpdateTimeout = setTimeout((function() {\n                var e = this.getInputValue();\n                this.setOriginalInputValue(e), this.settings.onChangeAfterBlur && (t1 || {}).withoutChangeEvent || this.state.blockChangeEvent || this.triggerChangeEvent();\n                this.postUpdate();\n            }).bind(this), 100);\n        },\n        getInputValue () {\n            var t1 = this.getCleanValue();\n            return \"mix\" == this.settings.mode ? this.getMixedTagsAsString(t1) : t1.length ? this.settings.originalInputValueFormat ? this.settings.originalInputValueFormat(t1) : JSON.stringify(t1) : \"\";\n        },\n        getCleanValue (t1) {\n            return n(t1 || this.value, this.dataProps);\n        },\n        getMixedTagsAsString () {\n            var t1 = \"\", e = this, i = this.settings, s = i.originalInputValueFormat || JSON.stringify, a = i.mixTagsInterpolator;\n            return function i(n) {\n                n.childNodes.forEach((n)=>{\n                    if (1 == n.nodeType) {\n                        const r = w(n);\n                        if (\"BR\" == n.tagName && (t1 += \"\\r\\n\"), r && f.call(e, n)) {\n                            if (r.__removed) return;\n                            t1 += a[0] + s(o(r, e.dataProps)) + a[1];\n                        } else n.getAttribute(\"style\") || [\n                            \"B\",\n                            \"I\",\n                            \"U\"\n                        ].includes(n.tagName) ? t1 += n.textContent : \"DIV\" != n.tagName && \"P\" != n.tagName || (t1 += \"\\r\\n\", i(n));\n                    } else t1 += n.textContent;\n                });\n            }(this.DOM.input), t1;\n        }\n    }, _.prototype.removeTag = _.prototype.removeTags, _;\n});\n\n\n\n/**\n * Object representing a set of modifiers for a score or test\n */ class $7294f01c4c99ce18$export$b5c87c9f30e8974e {\n    _name = null;\n    _description = null;\n    boons = 0;\n    banes = 0;\n    modifier = 0;\n    divide = 0;\n    percent = 0;\n    constructor({ name: name = null, description: description = null, boons: boons = 0, banes: banes = 0, modifier: modifier = 0, divide: divide = 0, percent: percent = 0 }){\n        this._name = name;\n        this._description = description;\n        this.boons = parseInt(boons) || 0;\n        this.banes = parseInt(banes) || 0;\n        this.modifier = parseInt(modifier) || 0;\n        this.divide = parseInt(divide) || 0;\n        this.percent = parseInt(percent) || 0;\n    }\n    /**\n     * Get the name of this modifier\n     *\n     * @return {string}\n     */ get name() {\n        return this._name ? `${this._name} ${this.mod_str()}` : this.mod_str();\n    }\n    /**\n     * Get a description of this modifier\n     *\n     * @return {string|null}\n     */ get description() {\n        return this._description || this._name;\n    }\n    /**\n     * Get a string describing the modifier, including boons, banes and value modifier\n     *\n     * @return {string}\n     */ mod_str() {\n        const boons_banes = \"\\u2295\".repeat(this.boons) + \"\\u2296\".repeat(this.banes);\n        const mod = this.modifier >= 0 ? `+${this.modifier}` : `${this.modifier}`;\n        if (!boons_banes) return mod;\n        else if (!this.modifier) return boons_banes;\n        else return boons_banes + mod;\n    }\n    /**\n     * Get a Tagify tag representing of this modifier\n     *\n     * @return {{style: string, title: string|null, value: string}}\n     */ tag() {\n        return {\n            value: this.name,\n            title: this.description,\n            style: $7294f01c4c99ce18$export$b5c87c9f30e8974e.color(this.name)\n        };\n    }\n    /**\n     * Return a json representation of this modifier\n     * @return {{modifier: number, name: string, description: (string|null), divide: number, percent: number,\n     *           boons: number, banes: number}}\n     */ json() {\n        return {\n            \"boons\": this.boons,\n            \"banes\": this.banes,\n            \"modifier\": this.modifier,\n            \"divide\": this.divide,\n            \"percent\": this.percent,\n            \"name\": this.name,\n            \"description\": this.description\n        };\n    }\n    /**\n     * Accepts list of raw key/value strings and returns a list of ModifierSet objects\n     *\n     * Ex: name=short_name&description=for_tooltip&boons=0&banes=0&modifier=0&divide=0&percent=0\n     *\n     * @param {string[]} raw_mods_list\n     * @returns {ModifierSet[]}\n     */ static parse(raw_mods_list) {\n        let mods_list = [];\n        try {\n            raw_mods_list.forEach((m)=>{\n                const params = new URLSearchParams(m);\n                mods_list.push(new $7294f01c4c99ce18$export$b5c87c9f30e8974e({\n                    name: params.get(\"name\"),\n                    description: params.get(\"description\"),\n                    boons: params.get(\"boons\"),\n                    banes: params.get(\"banes\"),\n                    modifier: params.get(\"modifier\"),\n                    divide: params.get(\"divide\"),\n                    percent: params.get(\"percent\")\n                }));\n            });\n            return mods_list;\n        } catch (e) {\n            console.error(`Error parsing modifiers object: ${raw_mods_list}`);\n            return [];\n        }\n    }\n    /**\n     * Return a CSS color string for the modifier, based on whether it is positive, negative or neutral\n     *\n     * @param {string} name\n     * @return {string}\n     */ static color(name) {\n        const includes_plus = name.includes(\"+\") || name.includes(\"\\u2295\");\n        const includes_minus = name.includes(\"-\") || name.includes(\"\\u2296\");\n        const GRAY = \"--tag-bg:#a1a1a1;--tag-text-color:#2b2a2a;--tag-hover:#bababa;--tag-remove-bg:#a1a1a1;--tag-remove-btn-color:#2b2a2a\";\n        const RED = \"--tag-bg:#d19d9d;--tag-text-color:#530d0d;--tag-hover:#e1b4b4;--tag-remove-bg:#d19d9d;--tag-remove-btn-color:#530d0d\";\n        const GREEN = \"--tag-bg:#9dd1ab;--tag-text-color:#224939;--tag-hover:#b5e0c1;--tag-remove-bg:#9dd1ab;--tag-remove-btn-color:#224939\";\n        if (includes_plus && includes_minus) return GRAY;\n        else if (includes_plus) return GREEN;\n        else if (includes_minus) return RED;\n        else return GRAY;\n    }\n    /**\n     * Total all modifiers from the given list of modifier sets\n     *\n     * @param {{modifier: number, divide: number, percent: number, boons: number, banes: number, tags: string[]}[]} mods_list\n     * @return {{modifier: number, divide: number, percent: number, boons: number, banes: number, tags: string[]}}\n     */ static total_modifiers(mods_list) {\n        let boons = 0;\n        let banes = 0;\n        let modifier = 0;\n        let divide = 0;\n        let percent = 0;\n        let tags = [];\n        // Add up the totals\n        mods_list.forEach((m)=>{\n            boons += m.boons || 0;\n            banes += m.banes || 0;\n            modifier += m.modifier || 0;\n            divide += m.divide || 0;\n            percent += m.percent || 0;\n            if (!!m.name) tags.push(m.name);\n        });\n        return {\n            boons: boons,\n            banes: banes,\n            modifier: modifier,\n            divide: divide,\n            percent: percent,\n            tags: tags\n        };\n    }\n    /**\n     * Parse a string containing a list of Tagify tags and return a list of ModifierSet objects\n     *\n     * @param {string} input_str\n     * @return {ModifierSet[]}\n     */ static list_from_string(input_str) {\n        let json_list = null;\n        try {\n            json_list = JSON.parse(input_str);\n        } catch (e) {\n            console.error(\"Error parsing list from tagify\");\n        }\n        if (!json_list) return [];\n        if (!Array.isArray(json_list)) json_list = [\n            json_list\n        ];\n        return json_list.map((t)=>$7294f01c4c99ce18$export$b5c87c9f30e8974e.from_tag(t));\n    }\n    /**\n     * Parse a json object representing a single Tagify tag and return a ModifierSet object\n     *\n     * @param {{value: string, title: string|undefined, color: string|undefined}} tag_json\n     * @return {ModifierSet}\n     */ static from_tag(tag_json) {\n        // '[{\"value\":\"Dazed ⊖\",\"title\":\"Dazed\",\"color\":\"red\"},{\"value\":\"Confused ⊕\"},{\"value\":\"Skilled +2\"}]'\n        if (!tag_json.value) return {};\n        // Parse the tag name\n        const parts = tag_json.value.split(\" \");\n        const all_mods = parts.pop();\n        const name = parts.join(\" \");\n        // Count boons, banes and mod\n        let modifier = parseInt(all_mods.replace(/^\\D+/, \"\")) || null;\n        let leading = all_mods.replace(/[0-9]/g, \"\");\n        if (modifier !== null && leading.at(-1) === \"-\") modifier *= -1; // If mod is negative, make it so\n        if (modifier !== null) leading = leading.slice(0, -1);\n        let boons = (leading.match(/[+⊕]/g) || []).length;\n        let banes = (leading.match(/[-⊖]/g) || []).length;\n        return new $7294f01c4c99ce18$export$b5c87c9f30e8974e({\n            name: name.replace(/[⊕⊖]/g, \"\"),\n            boons: boons,\n            banes: banes,\n            modifier: modifier || 0\n        });\n    }\n}\n\n\n\nclass $d5ef102242816c77$export$1b16fc9eb974a84d {\n    _actor = null;\n    _label = null;\n    target = null;\n    target_score = null;\n    critical = false;\n    evaluated = false;\n    margin = null;\n    pairs = null;\n    results = null;\n    skill_value = 0;\n    stat_value = 0;\n    success = false;\n    randomizer = null;\n    total = null;\n    use_pair = false;\n    /**\n     * Initialize test from a dataset and validate\n     *\n     * @param dataset\n     */ constructor(dataset){\n        Object.assign(this, dataset);\n        this.validate();\n    }\n    /**\n     * Ensure that the test has all the critical properties necessary to evaluate it\n     */ validate() {\n        // Make sure the dataset has all the required components, throw an error if not\n        let valid = (this.sceneId && this.tokenId || this.actorId || this.actor) && this.actor && this.actor.system && (this.actor.system.stats[this.stat] || this.actor.system.scores[this.stat] || !this.stat);\n        if (!valid) throw `Test missing required data: scene=${this.sceneId}, token=${this.tokenId}, actor=${this.actorId}, stat=${this.stat}`;\n        // Ensure that numeric parts of the dataset are represented as numbers\n        if (this.tn && !isNaN(this.tn)) this.tn = Number(this.tn);\n        if (this.boons && !isNaN(this.boons)) this.boons = Number(this.boons);\n        else this.boons = 0;\n        if (this.banes && !isNaN(this.banes)) this.banes = Number(this.banes);\n        else this.banes = 0;\n        if (this.modifier && !isNaN(this.modifier)) this.modifier = Number(this.modifier);\n        else this.modifier = 0;\n        // Parse the effects, if any\n        if (this.effects) {\n            // If the effects are already parsed, return\n            if (Array.isArray(this.effects) && this.effects.every((c)=>c instanceof (0, $30134fcb90c67fad$export$a32b0b1c1ac59d04))) return;\n            // Otherwise, parse them if a string\n            let effects_list = null;\n            if (typeof this.effects === \"string\") effects_list = JSON.parse(this.effects);\n            else effects_list = this.effects;\n            // And transform the into effect objects\n            if (!Array.isArray(effects_list)) effects_list = [\n                effects_list\n            ];\n            for(let i = 0; i < effects_list.length; i++)effects_list[i] = new (0, $30134fcb90c67fad$export$a32b0b1c1ac59d04)(effects_list[i], this);\n            this.effects = effects_list;\n        }\n    }\n    /**\n     * Set the actor making the test\n     *\n     * @param {SagaMachineActor} actor\n     */ set actor(actor) {\n        this._actor = actor;\n    }\n    /**\n     * Get the actor making the test, returning null if not specified\n     *\n     * @return {SagaMachineActor|null}\n     */ get actor() {\n        if (this._actor) return this._actor; // Return the cached actor, if available\n        // Get the actor corresponding to the token, if any\n        if (this.sceneId && this.tokenId) {\n            const scene = game.scenes.get(sceneId);\n            if (!scene) return null;\n            const token_data = scene.items.get(tokenId);\n            if (!token_data) return null;\n            const token = new Token(token_data);\n            this._actor = token.actor;\n            return this._actor;\n        }\n        // Otherwise, get the canonical actor\n        this._actor = game.actors.get(this.actorId) || null;\n        return this._actor;\n    }\n    /**\n     * Generate the Saga Machine label for the test\n     *\n     * @returns {string}\n     */ get label() {\n        if (this._label) return this._label;\n        // Lazily generate the label\n        const stat_label = this.stat ? (0, $ba32b9ea93ee5c3a$export$9a00dee1beb8f576)(this.stat) : \"1d10\";\n        const skill_label = this.skill ? `/${this.skill}` : \"\";\n        const tn_label = this.tn ? isNaN(this.tn) ? ` vs. ${this.tn}` : `-${this.tn}` : \"\";\n        this._label = stat_label + skill_label + tn_label;\n        return this._label;\n    }\n    /**\n     * Generate the roll string for the test, canceling out boons and banes\n     *\n     * @returns {string}\n     */ roll_syntax() {\n        const total = this.boons - this.banes;\n        if (total === 0) return \"1d10\";\n        else if (total > 0) return `${total + 1}d10kh1`;\n        else return `${total * -1 + 1}d10kl1`;\n    }\n    /**\n     * Take the roll results and look for pairs, adding them appropriately if there were boons\n     *\n     * @returns {[number, boolean]} - the individual value of the highest pair, whether a pair should be used\n     */ make_pairs() {\n        // If there weren't any boons, there are no pairs\n        if (this.banes >= this.boons) return [\n            null,\n            false\n        ];\n        // Find the highest pair\n        const found = [];\n        let highest_pair = 0;\n        for (let i of this.results.dice[0].results){\n            if (found.includes(i.result) && i.result > highest_pair) highest_pair = i.result;\n            found.push(i.result);\n        }\n        // Is the highest pair better than the highest result?\n        const use_pair = highest_pair * 2 > this.results.total;\n        // Set the total and discards in the roll results\n        let pairs = false;\n        if (highest_pair * 2 > this.results.total) {\n            pairs = highest_pair;\n            this.results._total = highest_pair * 2;\n            let active = 0;\n            for (let i of this.results.dice[0].results)if (i.result === highest_pair && active < 2) {\n                i.discarded = false;\n                active++;\n            } else i.discarded = true;\n        }\n        return [\n            highest_pair,\n            use_pair\n        ];\n    }\n    /**\n     * Look up the rank of the skill specified in the test\n     *\n     * @return {number}\n     */ lookup_skill() {\n        // Separate skill name from specialization\n        let specialization = this.skill.match(/\\(([^\\)]+)\\)/);\n        if (specialization) specialization = specialization[specialization.length - 1];\n        let skill = specialization ? this.skill.split(\" \")[0] : this.skill;\n        // If no specialization, filter skills\n        let matching_skills = [];\n        if (!specialization) matching_skills = this.actor.items.filter((item)=>item.type === \"skill\" && item.name === skill);\n        else {\n            specialization = specialization.replace(/[()]/g, \"\");\n            matching_skills = this.actor.items.filter((item)=>item.type === \"skill\" && item.name === skill && item.system.specialization === specialization);\n        }\n        // If there are no matching skills, try searching by full name\n        if (!matching_skills.length) matching_skills = this.actor.items.filter((item)=>item.type === \"skill\" && item.name === this.skill);\n        // If there are still no matching skills, return 0\n        if (!matching_skills.length) return 0;\n        else return Number(matching_skills[0].system.rank);\n    }\n    /**\n     * Calculate the total of the test\n     *\n     * @returns {[number, number, number, number]} - total, randomizer, stat, skill values\n     */ calc_total() {\n        // Look up the stat or score value\n        let stat = this.stat ? this.stat in this.actor.system.stats ? this.actor.system.stats[this.stat].value : this.actor.system.scores[this.stat].value : 0;\n        // Get the skill rank\n        const relevant_skill = !!this.skill; // There is a skill for this test\n        const skill = relevant_skill && this.skill !== \"Unskilled\" ? this.lookup_skill() : 0;\n        // Halve the stat in the case of unskilled tests\n        if (relevant_skill && !skill) stat = Math.floor(stat / 2);\n        // Which is greater? The highest pair or the highest single die\n        const randomizer = this.pairs ? this.pairs * 2 > this.results.total ? this.pairs * 2 : this.results.total : this.results.total;\n        // Return the total\n        const total = randomizer + stat + skill + this.modifier;\n        return [\n            total,\n            randomizer,\n            stat,\n            skill\n        ];\n    }\n    /**\n     * Look up the Defense or Willpower TN of the targeted token\n     *\n     * @returns {[number, SagaMachineActor|null, string|number]} - TN value, target actor, TN string (defense, willpower)\n     */ lookup_tn() {\n        if (typeof this.tn !== \"string\") return [\n            this.tn,\n            null,\n            null\n        ];\n        const is_defense = this.tn.toLowerCase() === \"defense\";\n        const is_willpower = this.tn.toLowerCase() === \"willpower\";\n        if (!is_defense && !is_willpower) return false;\n        const actor = game?.user?.targets?.values()?.next()?.value?.actor;\n        const scores = actor?.system?.scores;\n        if (!scores) return [\n            null,\n            null,\n            null\n        ];\n        // Set properties and return\n        const tn = is_defense ? scores.defense.tn : scores.willpower.tn;\n        return [\n            tn,\n            actor,\n            this.tn\n        ];\n    }\n    /**\n     * Did the dice turn up double 1's?\n     *\n     * @returns {boolean}\n     */ double_ones() {\n        let one_count = 0;\n        for (let i of this.results.dice[0].results)if (i.result === 1) one_count++;\n        return one_count >= 2;\n    }\n    /**\n     * Calculate the margin of success or failure from the TN and total\n     *\n     * @returns {[boolean, boolean, number]} -  is success?, is critical?, margin\n     */ calc_margin() {\n        // Handle unknown TN\n        if (!this.tn) return [\n            null,\n            null,\n            null\n        ];\n        // Calculate margin, success and criticals\n        let margin = Math.abs(this.total - this.tn);\n        let success = this.total >= this.tn;\n        let critical = margin >= this.tn || this.total < this.tn / 2;\n        // Also check for double 1's on a bane being a critical failure\n        if (this.banes > this.boons && this.double_ones()) {\n            if (success) {\n                success = false;\n                margin = 0;\n            }\n            critical = true;\n        }\n        return [\n            success,\n            critical,\n            margin\n        ];\n    }\n    /**\n     * Evaluate the test\n     *\n     * @returns {Test}\n     */ async evaluate() {\n        // Perform the roll and get the results\n        const roll_str = this.roll_syntax();\n        const roll = new Roll(roll_str);\n        this.results = await roll.evaluate();\n        // Make pairs and calculate the total\n        [this.pairs, this.use_pair] = this.make_pairs();\n        [this.total, this.randomizer, this.stat_value, this.skill_value] = this.calc_total();\n        // Determine success, critical and calculate the margin\n        [this.tn, this.target, this.target_score] = this.lookup_tn();\n        [this.success, this.critical, this.margin] = this.calc_margin();\n        // Mark as evaluated and return\n        this.evaluated = true;\n        return this;\n    }\n    /**\n     * Apply the effects of the action, depending on success or failure\n     *\n     * @param dataset\n     * @return {Promise<void>}\n     */ async apply_effects(dataset) {\n        if (!this.effects) this.effects = []; // Init effects, if needed\n        const properties = dataset?.properties || this.properties || [];\n        if (!this.effects_evaluated) {\n            // Handle extra hits and shots from the Auto property\n            if ($d5ef102242816c77$export$6191c3ac084cc81b.has_property(properties, \"Auto\")) {\n                const base_attack = this.basic_attack_damage() || {\n                    value: 0,\n                    damage_type: \"sm\"\n                };\n                for(let m_count = this.margin - 5; m_count > 0; m_count -= 5)this.effects.push(new (0, $30134fcb90c67fad$export$a32b0b1c1ac59d04)({\n                    type: \"damage\",\n                    value: base_attack.value,\n                    damage_type: base_attack.damage_type,\n                    margin: m_count,\n                    when: \"success\",\n                    target: \"target\",\n                    properties: properties\n                }, this));\n                this.effects.push(new (0, $30134fcb90c67fad$export$a32b0b1c1ac59d04)({\n                    type: \"message\",\n                    key: \"Ammo\",\n                    value: `Automatic fire consumes ${$d5ef102242816c77$export$6191c3ac084cc81b.property_value(properties, \"Auto\")} shots.`\n                }, this));\n            }\n            // Handle the Stun property\n            if ($d5ef102242816c77$export$6191c3ac084cc81b.has_property(properties, \"Stun\")) this.effects.push(new (0, $30134fcb90c67fad$export$a32b0b1c1ac59d04)({\n                type: \"consequence\",\n                name: \"Stun\",\n                when: \"success\",\n                target: \"target\"\n            }, this));\n            const ordering = [\n                \"defense\",\n                \"damage\",\n                \"consequence\",\n                \"message\"\n            ];\n            this.effects.sort((a, b)=>{\n                if (ordering.indexOf(a.type) > ordering.indexOf(b.type)) return 1;\n                if (ordering.indexOf(a.type) < ordering.indexOf(b.type)) return -1;\n                if (ordering.indexOf(a.type) === ordering.indexOf(b.type)) return 0;\n            });\n            this.effects_evaluated = true;\n        }\n        // Apply effects\n        const when = this.success ? \"success\" : this.tn ? \"failure\" : \"always\";\n        for (let c of this.effects)c.apply(when, dataset);\n    }\n    /**\n     * Get the test's first 'damage' type Effect object, return null is no matches\n     *\n     * @return {Effect|null}\n     */ basic_attack_damage() {\n        const damage_effects = this.effects.filter((c)=>c.type === \"damage\");\n        if (damage_effects.length) return damage_effects[0];\n        else return null;\n    }\n    /**\n     * Return the \"flavor\" portion of the test's chat card\n     *\n     * @return {string}\n     */ flavor() {\n        // Create target and result messages\n        const target_message = this.target ? `<div><strong>Target:</strong> ${this.target.name} (${(0, $ba32b9ea93ee5c3a$export$9a00dee1beb8f576)(this.target_score)} ${this.tn})</div>` : \"\";\n        const success_message = (this.critical ? \"Critical \" : \"\") + (this.target_score ? this.success ? \"Hit!\" : \"Miss!\" : this.success ? \"Success!\" : \"Failure!\");\n        const success_class = (this.critical ? \"critical \" : \"\") + (this.success ? \"success\" : \"failure\");\n        const result_message = this.tn ? `<div><strong>Result:</strong> <span class=\"${success_class}\">${success_message}</span> Margin ${this.margin}</div>` : \"\";\n        // Create the effect message, if any\n        let effect_message = \"\";\n        if (this.effects) for (let c of this.effects)effect_message += c.message;\n        // Create the tags\n        let tags = \"\";\n        if (!!this.stat) tags += `<span class=\"tag\">${(0, $ba32b9ea93ee5c3a$export$9a00dee1beb8f576)(this.stat)} +${this.stat_value}</span>`;\n        if (!!this.skill && this.skill !== \"Unskilled\") tags += `<span class=\"tag\">${this.skill} +${this.skill_value}</span>`;\n        if (this.skill && this.skill_value === 0) tags += '<span class=\"tag\">Unskilled</span>';\n        if (!!this.tags && this.tags.length) this.tags.forEach((t)=>tags += `<span class=\"tag\">${t}</span>`);\n        if (this.use_pair) tags += '<span class=\"tag\">Pairs!</span>';\n        if (this.use_luck) tags += '<span class=\"tag\">Luck</span>';\n        if (this.edited) tags += '<span class=\"tag\">Edited</span>';\n        // Return the result\n        return `<h4 class=\"action\">${this.label}</h4>\n                ${target_message} \n                ${result_message} \n                ${effect_message}\n                <hr />\n                <div class=\"tags\">${tags}</div>`;\n    }\n    /**\n     * Generate the expanded roll for the test, to be output as a card in chat\n     *\n     * @returns {string}\n     */ dice_html() {\n        let to_return = '<ol class=\"dice-rolls\">';\n        for (let i of this.results.dice[0].results){\n            const discarded = i.discarded ? \"discarded\" : \"\";\n            to_return += `<li class=\"roll die d10 ${discarded}\">${i.result}</li>`;\n        }\n        to_return += \"</ol>\";\n        return to_return;\n    }\n    /**\n     * Return the \"content\" portion of the test's chat card\n     *\n     * @return {string}\n     */ content() {\n        const stat_span = this.stat_value ? `+ <span title=\"Stat\">${this.stat_value}</span>` : \"\";\n        const skill_span = this.skill_value ? `+ <span title=\"Skill\">${this.skill_value}</span>` : \"\";\n        const modifier_span = this.modifier ? `+ <span title=\"Modifier\">${this.modifier}</span>` : \"\";\n        const test_json = JSON.stringify($d5ef102242816c77$export$1b16fc9eb974a84d.to_json(this));\n        return `\n            <div class=\"dice-roll\">\n                <div class=\"dice-result\">\n                    <div class=\"dice-formula\">\n                        ${this.results.formula} ${skill_span} ${stat_span} ${modifier_span}\n                    </div>\n                    <div class=\"dice-tooltip\">\n                        <section class=\"tooltip-part\">\n                            <div class=\"dice\">\n                                <header class=\"part-header flexrow\">\n                                    <span class=\"part-formula\">${this.results.formula}</span>\n                                    <span class=\"part-total\">${this.results.total}</span>\n                                </header>\n                                ${this.dice_html()}\n                            </div>\n                        </section>\n                    </div>\n                    <h4 class=\"dice-total\">${this.total}</h4>\n                </div>\n            </div>\n            <input type=\"hidden\" class=\"test-json\" value='${test_json}' />`;\n    }\n    /**\n     * Send the test to chat\n     *\n     * @param {boolean} whisper\n     * @param {Roll[]|null} rolls\n     * @return {Promise<void>}\n     */ async to_chat({ whisper: whisper = false, rolls: rolls = null }) {\n        // Create the chat message\n        const message = await this.results.toMessage({}, {\n            create: false\n        });\n        message.flavor = this.flavor();\n        message.content = this.content();\n        message.speaker = ChatMessage.getSpeaker({\n            actor: this.actor\n        });\n        // Set the roll, if a custom one was provided\n        if (rolls) {\n            if (!Array.isArray(rolls)) rolls = [\n                rolls\n            ]; // Ensure this is an array\n            message.rolls = rolls.map((r)=>JSON.stringify(r.toJSON())); // Convert to what ChatMessage expects\n        }\n        // Set as a whisper, if requested\n        if (whisper) {\n            message.type = CONST.CHAT_MESSAGE_TYPES.WHISPER;\n            message.whisper = game.users.filter((u)=>u.isGM || u.character?.id === this.actor?.id).map((u)=>u.id);\n        }\n        // Send the message to chat\n        await ChatMessage.create(message);\n    }\n    /**\n     * Create a json representation of the specified test\n     *\n     * @param test\n     * @return {*}\n     */ static to_json(test) {\n        const json = {};\n        for (let [key, value] of Object.entries(test)){\n            // For basic data, copy it over to the JSON\n            if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\" || value === null) json[key] = value;\n            else if (key === \"_actor\" || key === \"target\") {\n                // If not a token actor, copy over actor ID\n                if (!value.isToken) json[key] = {\n                    actor_id: value.id\n                };\n                else json[key] = {\n                    token_id: value.token.id,\n                    scene_id: value.token.parent.id\n                };\n            } else if (key === \"effects\") {\n                const effect_json = [];\n                for (let con of test.effects)effect_json.push((0, $30134fcb90c67fad$export$a32b0b1c1ac59d04).to_json(con));\n                json[key] = effect_json;\n            } else if (key === \"results\") json[key] = {\n                _evaluated: value._evaluated,\n                _formula: value._formula,\n                _total: value._total,\n                _terms: value.terms[0].results\n            };\n        }\n        return json;\n    }\n    /**\n     * Create a Test object from the given json representation\n     *\n     * @param obj\n     * @return {Test}\n     */ static from_json(obj) {\n        const dataset = {};\n        for (let [key, value] of Object.entries(obj)){\n            // For basic data, copy it over to the JSON\n            if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\" || value === null) dataset[key] = obj[key];\n            else if (key === \"_actor\" || key === \"target\") {\n                if (value instanceof game.sagamachine.SagaMachineActor) dataset[key] = value;\n                else dataset[key] = (0, $ba32b9ea93ee5c3a$export$99454b2c58b3846f)({\n                    scene_id: value.scene_id,\n                    token_id: value.token_id,\n                    actor_id: value.actor_id\n                });\n            } else if (key === \"effects\") dataset[key] = value;\n            else if (key === \"results\") {\n                dataset[key] = new Roll(value._formula);\n                dataset[key]._evaluated = value._evaluated;\n                dataset[key]._formula = value._formula;\n                dataset[key]._total = value._total;\n                dataset[key].terms = [\n                    new Die({\n                        faces: 10\n                    })\n                ];\n                dataset[key].terms[0].results = value._terms;\n            }\n        }\n        return new $d5ef102242816c77$export$1b16fc9eb974a84d(dataset);\n    }\n}\nclass $d5ef102242816c77$export$6191c3ac084cc81b extends $d5ef102242816c77$export$1b16fc9eb974a84d {\n    _effects_string = null;\n    _effect = null;\n    /**\n     * Get the name of the attack, defaulting to \"Unnamed Attack\"\n     *\n     * @return {string}\n     */ get full_name() {\n        return this.name || \"Unnamed Attack\";\n    }\n    /**\n     * Return a json string containing all the attack's effects - used in HTML templates\n     *\n     * @return {string}\n     */ get effects_string() {\n        // Return cached version\n        if (this._effects_string) return this._effects_string;\n        // Or lazily generate the string and return\n        this._effects_string = this.effects ? JSON.stringify(this.effects.map((c)=>(0, $30134fcb90c67fad$export$a32b0b1c1ac59d04).to_json(c))) : \"[]\";\n        return this.effects_string;\n    }\n    /**\n     * Returns a list containing all the attack's Effect objects\n     *\n     * @return {Effect[]}\n     */ get effect() {\n        // Return cached version\n        if (this._effect) return this._effect;\n        // If there are no effects specified, return empty string, otherwise, compile the list of effects\n        this._effect = this.effects ? this.effects.map((c)=>c.effect()).join(\", \") : \"\";\n        return this._effect;\n    }\n    /**\n     * Returns whether this test is an attack (shorthand: targets Defense or Willpower)\n     *\n     * @param dataset\n     * @return {boolean}\n     */ static is_attack(dataset) {\n        return dataset.tn === \"Defense\" || dataset.tn === \"Willpower\";\n    }\n    /**\n     * Returns whether the character meets the strength requirements for the attack\n     *\n     * @param dataset\n     * @param {SagaMachineActor} actor\n     * @return {boolean}\n     */ static strength_met(dataset, actor = null) {\n        // Get a reference to the actor if one has not been provided\n        if (!actor) actor = (0, $ba32b9ea93ee5c3a$export$99454b2c58b3846f)({\n            scene_id: dataset.sceneId,\n            token_id: dataset.tokenId,\n            actor_id: dataset.actorId\n        });\n        const strength = actor.system.stats.strength.value; // Get the actor's strength\n        const damage = $d5ef102242816c77$export$6191c3ac084cc81b.damage(dataset); // Get the attack's damage\n        const properties = $d5ef102242816c77$export$6191c3ac084cc81b.parse_properties(dataset.properties);\n        const light = $d5ef102242816c77$export$6191c3ac084cc81b.property_value(properties, \"Light\"); // Get the Light X property, if any\n        const hands = $d5ef102242816c77$export$6191c3ac084cc81b.property_value(properties, \"Hands\"); // Get the Hands X property\n        // Check to see if the strength requirement is met\n        if (hands >= 2) return strength >= (light || damage / 2);\n        else return strength >= (light || damage);\n    }\n    /**\n     * Returns the base damage value of the attack\n     *\n     * @param dataset\n     * @return {number}\n     */ static damage(dataset) {\n        if (!dataset.effects) return 0;\n        // Parse effects into a list\n        let effects_list = JSON.parse(dataset.effects);\n        if (!Array.isArray(effects_list)) effects_list = [\n            effects_list\n        ];\n        // Get the damage\n        for(let i = 0; i < effects_list.length; i++){\n            const effect = new (0, $30134fcb90c67fad$export$a32b0b1c1ac59d04)(effects_list[i]);\n            if (effect.type === \"damage\") return effect.base_damage();\n        }\n        return 0;\n    }\n    /**\n     * Parses the attacks properties, if necessary, from string to list\n     *\n     * @param properties\n     * @return {string[]}\n     */ static parse_properties(properties) {\n        if (typeof properties === \"string\") return properties.split(\",\").map((t)=>t.trim());\n        else if (Array.isArray(properties)) return properties;\n        else return [];\n    }\n    /**\n     * Returns the value of the specified property, returning 0 if not specified or no match\n     *\n     * @param {string|string[]} properties\n     * @param {string} property\n     * @return {number}\n     */ static property_value(properties, property) {\n        for (const prop of $d5ef102242816c77$export$6191c3ac084cc81b.parse_properties(properties))if (prop.toLowerCase().startsWith(`${property.toLowerCase()} `)) {\n            const [, val] = prop.split(\" \");\n            return Number(val);\n        }\n        return 0;\n    }\n    /**\n     * Returns whether the attack has the specified property\n     *\n     * @param {string|string[]} properties\n     * @param {string} property\n     * @return {boolean}\n     */ static has_property(properties, property) {\n        return $d5ef102242816c77$export$6191c3ac084cc81b.parse_properties(properties).map((p)=>p.split(\" \")[0]).includes(property);\n    }\n}\nasync function $d5ef102242816c77$export$5803ef6f71bdd50f(dataset) {\n    const actor = (0, $ba32b9ea93ee5c3a$export$99454b2c58b3846f)({\n        scene_id: dataset.sceneId,\n        token_id: dataset.tokenId,\n        actor_id: dataset.actorId\n    });\n    const dialog_content = await renderTemplate(\"systems/saga-machine/templates/test-dialog.html\", {\n        actor: {\n            ...actor.sheet.getData().data\n        },\n        ...dataset\n    });\n    new Dialog({\n        title: \"Make Test\",\n        content: dialog_content,\n        render: (html)=>{\n            // Initialize the modifiers (tag) widget\n            const modifiers = actor.modifiers(dataset); // Get the list of modifiers from consequences\n            const input = html.find(\"input[name=modifiers]\"); // Get the modifiers input DOM element\n            if (!input) return;\n            input.val(JSON.stringify(modifiers.map((m)=>m.tag())));\n            const tagify = new (0, (/*@__PURE__*/$parcel$interopDefault($f7972d8082eaa7d7$exports)))(input[0], {\n                duplicates: true,\n                transformTag: (tag_data)=>{\n                    tag_data.style = (0, $7294f01c4c99ce18$export$b5c87c9f30e8974e).color(tag_data.value);\n                    if (isNaN(parseInt(tag_data.value.split(\" \").at(-1)))) tag_data.value = tag_data.value.replaceAll(\"+\", \"\\u2295\").replaceAll(\"-\", \"\\u2296\");\n                }\n            });\n            // Redo modifiers when the stat, score or TN is changed\n            const inputs = html.find(\"select[name=stat], select[name=score], input[name=tn]\");\n            inputs.on(\"change\", (event)=>{\n                // Get the new test parameters\n                const modified_dataset = foundry.utils.deepClone(dataset);\n                modified_dataset.stat = html.find(\"select[name=stat]\").val();\n                modified_dataset.score = html.find(\"select[name=score]\").val();\n                modified_dataset.tn = html.find(\"input[name=tn]\").val();\n                // Get the new modifiers and set the tag widget\n                const new_modifiers = actor.modifiers(modified_dataset);\n                input.val(JSON.stringify(new_modifiers.map((m)=>m.tag())));\n            });\n        },\n        buttons: {\n            roll: {\n                label: \"Make Test\",\n                callback: async (html)=>{\n                    html.find(\"select[name=stat] > option:selected\").trigger(\"focus\");\n                    setTimeout(async ()=>{\n                        // Gather form data\n                        let stat = html.find(\"select[name=stat] > option:selected\").val();\n                        let score = html.find(\"select[name=score] > option:selected\").val();\n                        let skill = html.find(\"select[name=skill] > option:selected\").val();\n                        const { boons: boons, banes: banes, modifier: modifier, tags: tags } = (0, $7294f01c4c99ce18$export$b5c87c9f30e8974e).total_modifiers((0, $7294f01c4c99ce18$export$b5c87c9f30e8974e).list_from_string(html.find(\"input[name=modifiers]\").val()));\n                        const tn = html.find(\"input[name=tn]\").val();\n                        const effects = html.find(\"input[name=effects]\").val();\n                        // Create and evaluate the test\n                        const test = new $d5ef102242816c77$export$1b16fc9eb974a84d({\n                            actor: actor,\n                            stat: stat || score,\n                            skill: skill || null,\n                            boons: boons || 0,\n                            banes: banes || 0,\n                            modifier: modifier || 0,\n                            tags: tags,\n                            tn: tn || null,\n                            effects: effects || null\n                        });\n                        await test.evaluate();\n                        // Apply any immediate test effects\n                        await test.apply_effects(dataset);\n                        // Send the message to chat\n                        const whisper = !!dataset[\"whisper\"];\n                        await test.to_chat({\n                            whisper: whisper\n                        });\n                    }, 200);\n                },\n                icon: `<i class=\"fas fa-check\"></i>`\n            }\n        },\n        default: \"roll\"\n    }).render(true, {\n        width: 450\n    });\n}\n\n\nclass $30134fcb90c67fad$export$a32b0b1c1ac59d04 {\n    test = null;\n    type = null;\n    target = \"self\";\n    when = \"always\";\n    message = \"\";\n    /**\n     * Constant representing Ignores property\n     *\n     * @type {number}\n     */ static IGNORES_ALL_ARMOR = -1;\n    constructor(dataset, test = null){\n        Object.assign(this, dataset); // Assign properties from the dataset\n        if (test) this.test = test; // Assign the test\n        this.validate(dataset); // Validate the dataset\n    }\n    /**\n     * Validate whether this Effect object meets basic requirements\n     */ validate() {\n        if (![\n            \"consequence\",\n            \"damage\",\n            \"defense\",\n            \"message\"\n        ].includes(this.type)) throw `Unknown type ${this.type}`;\n    }\n    /**\n     * Is this the right time to execute this effect?\n     *\n     * @param {string} when\n     * @return {boolean}\n     */ right_time(when) {\n        return this.when === \"always\" || this.when === when;\n    }\n    /**\n     * Format this effect for concise display in a chat card\n     *\n     * @param {string} key\n     * @param value\n     * @return {string}\n     */ format_message(key, value) {\n        return `<div><strong>${key}:</strong> ${value}</div>`;\n    }\n    /**\n     * Summarize this effect for easy display\n     *\n     * @return {string}\n     */ effect() {\n        if (this.type === \"damage\") return `${this.value} ${this.damage_type}`;\n        else if (this.type === \"consequence\") return this.name;\n        else return \"Special\";\n    }\n    /**\n     * Given a consequence name, return a link to the consequence item\n     *\n     * @param {string} name\n     * @return {string}\n     */ consequence_link(name = null) {\n        // If no provided name, use the default one\n        if (!name) name = this.name;\n        // Get the consequence, if it exists as an item\n        let consequence = game.items.filter((item)=>item.type === \"consequence\" && item.name === name);\n        if (!consequence || !consequence.length) return name;\n        return `<a class=\"content-link\" draggable=\"true\" data-uuid=\"Item.${consequence[0].id}\" data-id=\"${consequence[0].id}\" data-type=\"Item\" data-tooltip=\"Item\"><i class=\"fas fa-suitcase\"></i>${name}</a>`;\n    }\n    /**\n     * Given an effect representing damage based on a stat, calculate the actual total\n     *\n     * @return {number}\n     */ base_damage() {\n        let damage = 0;\n        // Search damage string for each stat and apply\n        let str_dmg = String(this.value).toLowerCase();\n        if (str_dmg.includes(\"str\")) damage += Number(this?.test?.actor?.system?.stats?.strength?.value);\n        if (str_dmg.includes(\"dex\")) damage += Number(this?.test?.actor?.system?.stats?.dexterity?.value);\n        if (str_dmg.includes(\"spd\")) damage += Number(this?.test?.actor?.system?.stats?.speed?.value);\n        if (str_dmg.includes(\"end\")) damage += Number(this?.test?.actor?.system?.stats?.endurance?.value);\n        if (str_dmg.includes(\"int\")) damage += Number(this?.test?.actor?.system?.stats?.intelligence?.value);\n        if (str_dmg.includes(\"per\")) damage += Number(this?.test?.actor?.system?.stats?.perception?.value);\n        if (str_dmg.includes(\"chr\")) damage += Number(this?.test?.actor?.system?.stats?.charisma?.value);\n        if (str_dmg.includes(\"det\")) damage += Number(this?.test?.actor?.system?.stats?.determination?.value);\n        // Strip the damage string of any alphabetic characters, add and return\n        str_dmg = str_dmg.replace(/[^\\d.-]/g, \"\");\n        damage += Number(str_dmg);\n        return damage;\n    }\n    /**\n     * Apply this effect if it is the right time to do so\n     *\n     * @param {string} when - success, failure or always\n     * @param dataset - optional dataset representing the originating test\n     * @return {Effect}\n     */ apply(when = \"always\", dataset) {\n        if (!dataset) dataset = this;\n        if (this.type === \"consequence\" && this.right_time(when)) this.apply_consequence();\n        if (this.type === \"damage\" && this.right_time(when)) this.apply_damage(dataset);\n        if (this.type === \"defense\" && this.right_time(when)) this.apply_defense();\n        if (this.type === \"message\" && this.right_time(when)) this.apply_message();\n        return this;\n    }\n    /**\n     * Apply a message effect, generating a message for later display\n     */ apply_message() {\n        this.message = this.format_message(this.key ? this.key : \"Message\", this.value);\n    }\n    /**\n     * Apply a consequence effect, generating a message containing a consequence item link\n     */ apply_consequence() {\n        // Attach subject to name if specified\n        const clean_name = this.name ? this.name : \"Unknown\";\n        const full_name = this.subject ? `${clean_name} (${this.subject})` : clean_name;\n        // Create the embedded consequence link\n        let link = this.consequence_link(full_name);\n        if (!link) link = full_name;\n        // Set the message\n        this.message = this.format_message(\"Consequence\", link);\n    }\n    /**\n     * Apply a damage effect, generating a damage message and taking into account any attack properties from the\n     *     originating test, if provided\n     *\n     * @param dataset\n     */ apply_damage(dataset) {\n        // Calculate the damage\n        let base_damage = this.base_damage(); // Base damage\n        let margin = this.margin ? Number(this.margin) : this.test && this.test.margin ? Number(this.test.margin) : 0;\n        // Handle the Feeble property\n        this.properties = (0, $d5ef102242816c77$export$6191c3ac084cc81b).parse_properties(dataset.properties);\n        if ((0, $d5ef102242816c77$export$6191c3ac084cc81b).has_property(this.properties, \"Feeble\")) margin = Math.min(base_damage, margin);\n        // Handle the Ignores and Pierce properties\n        const ignores = (0, $d5ef102242816c77$export$6191c3ac084cc81b).has_property(this.properties, \"Ignores\");\n        const pierce = ignores ? $30134fcb90c67fad$export$a32b0b1c1ac59d04.IGNORES_ALL_ARMOR : (0, $d5ef102242816c77$export$6191c3ac084cc81b).property_value(this.properties, \"Pierce\");\n        let damage = base_damage + margin; // Add base damage and margin\n        if (damage < 0) damage = 0; // Minimum 0\n        // Get the damage type\n        const damage_type = this.damage_type ? this.damage_type : \"\";\n        // Set the message\n        this.message = this.format_message(\"Damage\", `<span class=\"damage\" data-pierce=\"${pierce}\">${damage}</span> <span class=\"damage-type\">${damage_type}</span>`);\n    }\n    /**\n     * Update the actor's Defense and Willpower TNs after a Defense roll\n     */ apply_defense() {\n        if (!this.test) return; // If no test is know, nothing to do now\n        // Get the target\n        let target = null;\n        if (this.target === \"self\") target = this.test.actor;\n        else if (this.target === \"target\" && this.test.target) target = this.test.target;\n        // Calculate the TNs\n        const defense_tn = target.system.scores.defense.value + this.test.randomizer;\n        const willpower_tn = target.system.scores.willpower.value + this.test.randomizer;\n        // Update defense and willpower\n        target.update({\n            \"system.scores.defense.tn\": defense_tn\n        });\n        target.update({\n            \"system.scores.willpower.tn\": willpower_tn\n        });\n        // Set the message\n        this.message = this.format_message(\"Defense\", `TN ${defense_tn}`) + this.format_message(\"Willpower\", `TN ${willpower_tn}`);\n    }\n    /**\n     * Return a json representation of the effect\n     *\n     * @param test\n     * @return {{}}\n     */ static to_json(test) {\n        const json = {};\n        for (let [key, value] of Object.entries(test))// For basic data, copy it over to the JSON\n        if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\" || value === null || key === \"properties\") json[key] = value;\n        return json;\n    }\n    /**\n     * Create a new Effect object from its json representation\n     *\n     * @param obj\n     * @return {Effect}\n     */ static from_json(obj) {\n        return new $30134fcb90c67fad$export$a32b0b1c1ac59d04(obj);\n    }\n}\n/**\n * A simple data class representing narrative aspects of a wound ahead of being transformed into a consequence.\n *\n * @see WoundFactory - A class for generating Wound objects randomly and from the Grave Wounds table\n */ class $30134fcb90c67fad$var$Wound {\n    /**\n     * A brief description of the wound. This gets turned into the specialization field of the resulting consequence.\n     *\n     * @type {string}\n     */ descriptor;\n    /**\n     * A longer description of the wound and its effects. This turns into the description field of the resulting\n     * consequence. This is primarily used to describe the game mechanics of Grave Wounds.\n     *\n     * @type {string}\n     */ description;\n    /**\n     * Creates a new wound and optionally sets descriptor and description\n     *\n     * @param {string} [descriptor='']\n     * @param {string} [description='']\n     */ constructor(descriptor, description){\n        this.descriptor = descriptor || \"\";\n        this.description = description || \"\";\n    }\n}\nclass $30134fcb90c67fad$export$a8bf75e7367c8d41 {\n    /**\n     * Generates a Wound object to be given to an actor\n     *\n     * @param {string} type - The damage type of the wound in abbreviated format (e.g. cut, pi, sm)\n     * @param {boolean} critical - Whether the wound is being dealt by a critical hit\n     * @returns {Promise<Wound>}\n     */ static async generate_wound(type, critical) {\n        const wound = new $30134fcb90c67fad$var$Wound();\n        // Handle grave wounds\n        if (critical) {\n            const grave_wounds_table = game.tables.getName(\"Grave Wounds\");\n            if (grave_wounds_table) {\n                wound.description = (await grave_wounds_table.draw()).results[0].text;\n                wound.descriptor = wound.description.split(\":\")[0];\n                return wound;\n            } else wound.descriptor = (0, $ba32b9ea93ee5c3a$export$6d905af60429adc0)([\n                \"grave \",\n                \"deep \",\n                \"severe \",\n                \"critical \",\n                \"serious \",\n                \"major \"\n            ]);\n        }\n        if (type !== \"fat\") wound.descriptor += (0, $ba32b9ea93ee5c3a$export$6d905af60429adc0)([\n            \"arm \",\n            \"leg \",\n            \"abdomen \",\n            \"chest \",\n            \"head \",\n            \"neck \",\n            \"hand \",\n            \"foot \",\n            \"knee \",\n            \"elbow \",\n            \"forearm \",\n            \"shin \",\n            \"side \",\n            \"back \",\n            \"cheek \",\n            \"brow \",\n            \"shoulder \",\n            \"hip \",\n            \"thigh \",\n            \"groin \",\n            \"rib \",\n            \"skull \",\n            \"face \"\n        ]);\n        switch(type){\n            case \"burn\":\n            case \"cor\":\n            case \"fr\":\n            case \"tox\":\n                wound.descriptor += (0, $ba32b9ea93ee5c3a$export$6d905af60429adc0)([\n                    \"burn\",\n                    \"sore\",\n                    \"lesion\"\n                ]);\n                break;\n            case \"cut\":\n                wound.descriptor += (0, $ba32b9ea93ee5c3a$export$6d905af60429adc0)([\n                    \"slash\",\n                    \"cut\",\n                    \"slice\"\n                ]);\n                break;\n            case \"fat\":\n                wound.descriptor += (0, $ba32b9ea93ee5c3a$export$6d905af60429adc0)([\n                    \"tired\",\n                    \"weakened\",\n                    \"winded\"\n                ]);\n                break;\n            case \"pi\":\n                wound.descriptor += (0, $ba32b9ea93ee5c3a$export$6d905af60429adc0)([\n                    \"stab\",\n                    \"puncture\",\n                    \"gash\"\n                ]);\n                break;\n            case \"sm\":\n                wound.descriptor += (0, $ba32b9ea93ee5c3a$export$6d905af60429adc0)([\n                    \"bruise\",\n                    \"trauma\",\n                    \"rent\"\n                ]);\n                break;\n            default:\n                wound.descriptor += (0, $ba32b9ea93ee5c3a$export$6d905af60429adc0)([\n                    \"wound\",\n                    \"gash\",\n                    \"laceration\"\n                ]);\n        }\n        return wound;\n    }\n}\n\n\nconst $96b9cba4b1d7a59a$export$bd4feec9a9a5101a = {\n    FAST_TURN: \"3\",\n    NPC_TURN: \"2\",\n    SLOW_TURN: \"1\"\n};\nclass $96b9cba4b1d7a59a$export$ca8ad600a8ec4279 extends Combatant {\n    /**\n     * @inheritDoc\n     * @override\n     * @param formula\n     * @return {*|Roll}\n     */ getInitiativeRoll(formula) {\n        // If there is no attached actor, this must be an NPC\n        if (!this.actor) return new Roll($96b9cba4b1d7a59a$export$bd4feec9a9a5101a.NPC_TURN);\n        // If this is marked as an NPC, it must be an NPC\n        if (this.isNPC) return this.actor.getInitiativeRoll($96b9cba4b1d7a59a$export$bd4feec9a9a5101a.NPC_TURN);\n        else return this.actor.getInitiativeRoll();\n    }\n    /**\n     * Returns the value of the combatant's initiative - a constant representing  a fast / NPC / slow turn\n     *\n     * @return {number}\n     */ getInitiativeValue() {\n        return this.isNPC ? Number($96b9cba4b1d7a59a$export$bd4feec9a9a5101a.NPC_TURN) : this.actor.system.fast_turn ? Number($96b9cba4b1d7a59a$export$bd4feec9a9a5101a.FAST_TURN) : Number($96b9cba4b1d7a59a$export$bd4feec9a9a5101a.SLOW_TURN);\n    }\n}\nclass $96b9cba4b1d7a59a$export$c9b99f4a745fcbd1 extends Combat {\n    /**\n     * @inheritDoc\n     * @override\n     * @param ids\n     * @param formula\n     * @param updateTurn\n     * @param messageOptions\n     * @return {Promise<SagaMachineCombat>}\n     */ async rollInitiative(ids, { formula: formula = null, updateTurn: updateTurn = true, messageOptions: messageOptions = {} } = {}) {\n        // Iterate over Combatants, performing an initiative roll for each\n        const updates = [];\n        for (let [i, id] of (typeof ids === \"string\" ? [\n            ids\n        ] : ids).entries()){\n            // Get Combatant data\n            const combatant = this.combatants.get(id);\n            if (!combatant?.isOwner) continue;\n            // Produce an initiative roll for the Combatant\n            const roll = combatant.getInitiativeRoll(formula);\n            await roll.evaluate({\n                async: true\n            });\n            updates.push({\n                _id: id,\n                initiative: roll.total\n            });\n        }\n        if (!updates.length) return this;\n        // Update multiple combatants\n        await this.updateEmbeddedDocuments(\"Combatant\", updates);\n        // Ensure the turn order remains with the same combatant\n        if (updateTurn && this.combatant?.id) await this.update({\n            turn: this.turns.findIndex((t)=>t.id === this.combatant?.id)\n        });\n        return this;\n    }\n    /**\n     * Update the initiative of all combatants with the matching actor\n     *\n     * @param {SagaMachineActor} actor\n     * @param {string|null|undefined} turn_type\n     * @return {Promise<void>}\n     */ async update_combatant_initiative(actor, turn_type) {\n        if (typeof turn_type === \"undefined\" || turn_type === null) return;\n        const linked_combatants = game.combat.combatants.filter((c)=>c.actorId === actor.id);\n        for (const c of linked_combatants)await game.combat.setInitiative(c.id, c.getInitiativeValue());\n    }\n    /**\n     * Perform all start of combat and start of round tasks\n     *\n     * @return {Promise<void>}\n     */ async start_of_round() {\n        // Ensure that all combatants have a fast / slow turn marked in the order\n        await this.rollAll();\n        // Cycle through all combatants\n        for (let c of this.combatants)// Make a defense test for everyone\n        await c.actor.test({\n            stat: \"defense\",\n            effects: [\n                {\n                    \"type\": \"defense\"\n                }\n            ],\n            whisper: true,\n            chat: true,\n            ...c.actor.total_modifiers({\n                score: \"defense\"\n            })\n        });\n        // New Round Card - prompt players to choose fast / slow turn and display statuses\n        let content = `<h3>Round ${this.round + 1}</h3><p><strong>Choose a Fast or Slow turn now!</strong></p><table>`;\n        for (let c of this.combatants){\n            if (c.hidden) continue; // Don't show hidden combatants\n            const statuses = Array.from(c.actor.statuses.map((s)=>s.split(/\\s|-/).map((w)=>w.capitalize()).join(\" \"))).sort().join(\", \");\n            content += `<tr><td><strong>${c.name}</strong></td><td>${statuses ? statuses : \"&mdash;\"}</td></tr>`;\n        }\n        content += \"</table>\";\n        await ChatMessage.create({\n            content: content\n        });\n        // Whisper all defenses to GM\n        content = \"<h4><strong>Defenses This Round</strong></h4><table>\";\n        for (let c of this.combatants)content += `<tr><td><strong>${c.name}</strong></td><td>Defense ${c.actor.system.scores.defense.tn}</td><td>Willpower ${c.actor.system.scores.willpower.tn}</td></tr>`;\n        content += \"</table>\";\n        await ChatMessage.create({\n            content: content,\n            type: CONST.CHAT_MESSAGE_TYPES.WHISPER,\n            whisper: game.users.filter((u)=>u.isGM).map((u)=>u.id)\n        });\n        // Chat messages for Bleeding and Dying consequences\n        for (let c of this.combatants){\n            // Test Endurance when dying, prompt to add or remove Dying conditions\n            if (c.actor.statuses.has(\"dying\") && !c.actor.statuses.has(\"defeated\")) {\n                await ChatMessage.create({\n                    speaker: ChatMessage.getSpeaker({\n                        actor: c.actor\n                    }),\n                    content: `<p><strong>${c.name} is Dying!</strong></p><ul><li>Limited to 1 AP.</li><li>Making an Endurance test.` + `<ul><li><em>Crit Success:</em> Lose a Dying.</li><li><em>Failure:</em> Gain a Dying.</li><li><em>3 Dying:</em> ${c.name} dies.</li></ul></li></ul>`\n                });\n                await c.actor.test({\n                    stat: \"endurance\",\n                    tn: c.actor.dying_tn(),\n                    chat: true,\n                    effects: [\n                        {\n                            \"type\": \"consequence\",\n                            \"name\": \"Dying\",\n                            \"when\": \"failure\",\n                            \"target\": \"self\"\n                        }\n                    ],\n                    ...c.actor.total_modifiers({\n                        score: \"defense\"\n                    })\n                });\n            }\n            // Note Bleeding and prompt for damage\n            if (c.actor.statuses.has(\"bleeding\") && !c.actor.statuses.has(\"defeated\")) c.actor.items.filter((c)=>c.type === \"consequence\" && c.name === \"Bleeding\").forEach((b)=>{\n                if (b.system.rank > 0) {\n                    const damage = new (0, $30134fcb90c67fad$export$a32b0b1c1ac59d04)({\n                        \"type\": \"damage\",\n                        \"value\": b.system.rank,\n                        \"damage_type\": b.system.specialization,\n                        \"properties\": \"Ignores\",\n                        \"when\": \"always\",\n                        \"target\": \"self\"\n                    }).apply();\n                    ChatMessage.create({\n                        speaker: ChatMessage.getSpeaker({\n                            actor: c.actor\n                        }),\n                        content: `<p><strong>${c.name} is Bleeding!</strong></p><ul><li>Right-click and select Apply Damage.</li><li>${damage.message}</li></ul>`\n                    });\n                }\n            });\n        }\n    }\n}\nclass $96b9cba4b1d7a59a$export$6503760ac807196f extends CombatTracker {\n    /**\n     * @inheritDoc\n     * @param html\n     */ activateListeners(html) {\n        const combatants = this.viewed?.combatants;\n        // For each combatant in the tracker, change the initiative selector\n        html.find(\".combatant\").each((i, el)=>{\n            const combatant_id = el.getAttribute(\"data-combatant-id\");\n            const combatant = combatants.get(combatant_id);\n            if (!combatant) return;\n            const initiative = combatant.isNPC ? \"NPC\" : combatant.actor?.system?.fast_turn ? \"FAST\" : \"SLOW\";\n            el.getElementsByClassName(\"token-initiative\")[0].innerHTML = `<a class=\"combatant-control dlturnorder\" title=\"Change Turn\">${initiative}</a>`;\n        });\n        super.activateListeners(html);\n        // When the turn type is clicked in the tracker, toggle the type, unless NPC\n        html.find(\".dlturnorder\").click(async (ev)=>{\n            const li = ev.currentTarget.closest(\"li\");\n            const combatant_id = li.dataset.combatantId;\n            const combatant = combatants.get(combatant_id);\n            if (!combatant || combatant.isNPC) return;\n            if (game.user.isGM || combatant.actor.isOwner) {\n                await combatant.actor.update({\n                    \"system.fast_turn\": !combatant.actor.system.fast_turn\n                });\n                if (this.viewed) this.viewed.setupTurns();\n            }\n        });\n    }\n}\n\n\n\n/**\n * Put the standard Saga Machine consequences in the formated expected for Foundry status effects\n *\n * @return {{icon: string, statuses: string[], name: string, id: string, flags:{core: {overlay: string[]}, system: *}}[]}\n */ const $d200992a7286a1e5$export$7065c91b0a27b3b9 = ()=>{\n    const system_conditions = [];\n    const standard_consequences = [\n        \"Bleeding\",\n        \"Bolstered\",\n        \"Dazed\",\n        \"Defeated\",\n        \"Desire\",\n        \"Disabled\",\n        \"Dying\",\n        \"Fatigue\",\n        \"Fear\",\n        \"Fixated\",\n        \"Grave Wound\",\n        \"Hidden\",\n        \"Hindered\",\n        \"Prone\",\n        \"Stun\",\n        \"Wound\"\n    ];\n    // Generate and append an object for each consequence\n    standard_consequences.forEach((consequence)=>system_conditions.push({\n            icon: `systems/saga-machine/images/consequences/${consequence.slugify()}.svg`,\n            statuses: [\n                consequence.slugify()\n            ],\n            name: consequence,\n            id: consequence.slugify(),\n            flags: {\n                core: {\n                    overlay: [\n                        \"Defeated\"\n                    ].includes(consequence)\n                },\n                system: {\n                    subject_prompt: [\n                        \"Bleeding\",\n                        \"Desire\",\n                        \"Fear\",\n                        \"Fixated\"\n                    ].includes(consequence),\n                    value_prompt: [\n                        \"Fatigue\",\n                        \"Grave Wound\",\n                        \"Wound\"\n                    ].includes(consequence),\n                    remove_others: [\n                        \"Desire\",\n                        \"Fixated\"\n                    ].includes(consequence),\n                    no_consequence: [\n                        \"Defeated\",\n                        \"Unconscious\"\n                    ].includes(consequence)\n                }\n            }\n        }));\n    return system_conditions;\n};\nasync function $d200992a7286a1e5$export$ce53e9a4e8384701({ name: name, actor: actor, skip_actor: skip_actor = false, skip_global: skip_global = false, skip_new: skip_new = false }) {\n    let consequence = null;\n    // Get the existing consequence on this actor, if one exists\n    if (!skip_actor) consequence = actor?.items.filter((c)=>c.name === name && c.type === \"consequence\").values().next()?.value;\n    // If the consequence was not found, check for a matching globally defined consequence\n    if (!skip_global && !consequence) consequence = game.items.filter((c)=>c.name === name && c.type === \"consequence\").values().next()?.value;\n    // If the consequence was still not found, create a dummy one\n    if (!skip_new && !consequence) consequence = await Item.create({\n        name: name.capitalize(),\n        type: \"consequence\",\n        system: {\n            rank: 1\n        }\n    });\n    return consequence;\n}\nasync function $d200992a7286a1e5$export$bce7246a7036e38(actor) {\n    // Get the consequences and statuses\n    const consequences = new Set(actor.items.filter((item)=>item.type === \"consequence\" && item.system.rank > 0 && game.sagamachine.standard_consequences.includes(item.name)).map((c)=>c.name.slugify()));\n    const statuses = actor.statuses;\n    // Get the items that need synced\n    const add_set = consequences.difference(statuses);\n    const remove_set = statuses.difference(consequences);\n    // Special case for defeated and unconscious, which have no consequence\n    remove_set.delete(\"defeated\");\n    remove_set.delete(\"unconscious\");\n    // Add missing statuses\n    const status_list = [];\n    CONFIG.statusEffects.forEach((e)=>{\n        if (add_set.has(e.id)) status_list.push(foundry.utils.deepClone(e));\n    });\n    if (status_list.length) await actor.createEmbeddedDocuments(\"ActiveEffect\", status_list);\n    // Remove stale statuses\n    if (remove_set.size) await actor.deleteEmbeddedDocuments(\"ActiveEffect\", actor.effects.filter((e)=>remove_set.has(e.name.slugify())).map((e)=>e.id));\n    // Remove duplicate statuses, if necessary\n    const status_set = new Set(actor.effects.map((e)=>e.name));\n    if (status_set.size !== actor.effects.size) for (const s of status_set){\n        if (!game.sagamachine.standard_consequences.includes(s)) return;\n        const matches = actor.effects.filter((e)=>e.name === s);\n        if (matches.length > 1) {\n            matches.shift();\n            await actor.deleteEmbeddedDocuments(\"ActiveEffect\", matches.map((e)=>e.id));\n        }\n    }\n}\nasync function $d200992a7286a1e5$export$40b3570d78570c16(item, delete_only = false) {\n    // Find item effects, delete those effects, return if delete_only\n    const matches = item.parent.effects.filter((e)=>e.origin === item.uuid);\n    for (let e of matches)e.delete();\n    if (delete_only) return;\n    // Copy all item effects to actor\n    const copies = [];\n    for (let e of item.effects)copies.push(e.clone({\n        parent: item.parent,\n        origin: item.uuid\n    }));\n    item.parent.createEmbeddedDocuments(\"ActiveEffect\", copies);\n}\nfunction $d200992a7286a1e5$export$b65e028fee10b7bb(value, item) {\n    function substitute_variables(raw, item) {\n        raw = raw.replaceAll(\"@rank\", item.system.rank);\n        if (item.parent) raw = raw.replaceAll(\"@strength\", item.parent.system.stats.strength.value).replaceAll(\"@dexterity\", item.parent.system.stats.dexterity.value).replaceAll(\"@speed\", item.parent.system.stats.speed.value).replaceAll(\"@endurance\", item.parent.system.stats.endurance.value).replaceAll(\"@intelligence\", item.parent.system.stats.intelligence.value).replaceAll(\"@perception\", item.parent.system.stats.perception.value).replaceAll(\"@charisma\", item.parent.system.stats.charisma.value).replaceAll(\"@determination\", item.parent.system.stats.determination.value);\n        return raw;\n    }\n    const do_math = (raw)=>Function(`'use strict'; return (${raw})`)();\n    const to_evaluate = [\n        \"boons\",\n        \"banes\",\n        \"modifier\",\n        \"divide\",\n        \"percent\"\n    ];\n    const params = new URLSearchParams(value.replaceAll(\"+\", \"%2b\"));\n    for (const p of to_evaluate)if (params.has(p)) params.set(p, do_math(substitute_variables(params.get(p), item)));\n    return params.toString();\n}\nasync function $d200992a7286a1e5$export$7801755dddf1fd51(effect) {\n    const item = await fromUuid(effect.origin); // Get the item\n    if (!item) return true; // If not valid item, do nothing\n    for (let change of effect.changes)change.value = $d200992a7286a1e5$export$b65e028fee10b7bb(change.value, item); // Replace variables, do math\n    await effect.updateSource({\n        \"changes\": effect.changes\n    }); // Update the effect being added\n    return true;\n}\nasync function $d200992a7286a1e5$export$31930d543788113d(effect) {\n    const actor = effect.target;\n    const status_name = effect.statuses.first();\n    // If this status doesn't have a corresponding consequence, return\n    if (effect?.flags?.system?.no_consequence) return;\n    // Get the existing consequence on this actor, if one exists\n    let consequence = actor.items.filter((c)=>c.name.slugify() === status_name && c.type === \"consequence\").values().next()?.value;\n    if (consequence) return; // Return if found\n    // If the consequence was not found, check for a matching globally defined consequence\n    consequence = game.items.filter((c)=>c.name === effect.name && c.type === \"consequence\").values().next()?.value;\n    // If the consequence was still not found, create a dummy one\n    if (!consequence) consequence = await Item.create({\n        name: status_name.capitalize(),\n        type: \"consequence\",\n        system: {\n            rank: 1\n        }\n    });\n    // If this consequence accepts a subject, prompt the user for it\n    if (effect?.flags?.system?.subject_prompt) new Dialog({\n        title: `Specify Subject of ${consequence.name}`,\n        content: `\n                    <form>\n                        <div class=\"form-group\">\n                            <label for=\"subject\">Subject</label>\n                            <input type=\"text\" name=\"subject\" value=\"\" autofocus>\n                        </div>\n                    </form>`,\n        buttons: {\n            Confirm: {\n                icon: \"<i class='fas fa-check'></i>\",\n                label: \"OK\",\n                callback: async (html)=>{\n                    const subject = html.find(\"[name=subject]\").val().trim(); // Get the user set subject\n                    // Update the subject\n                    consequence.update({\n                        \"system.specialization\": subject,\n                        \"system.rank\": 1\n                    });\n                    consequence.system.specialization = subject;\n                    // Special case for Desire and Fixated: remove other copies with a different subject\n                    if (effect?.flags?.system?.remove_others) actor.items.filter((c)=>c.name === consequence.name && c.type === \"consequence\" && c.system.specialization !== subject).forEach((c)=>c.delete());\n                }\n            }\n        },\n        default: \"Confirm\"\n    }).render(true);\n    // Prompt for consequence value\n    if (effect?.flags?.system?.value_prompt) new Dialog({\n        title: `Specify Descriptor and Value of ${consequence.name}`,\n        content: `\n                    <form>\n                        <div class=\"grid grid-2col\">\n                            <label for=\"subject\">Descriptor (optional)</label>\n                            <input type=\"text\" name=\"subject\" value=\"\" autofocus>\n                            <label for=\"value\">Value</label>\n                            <input type=\"number\" name=\"value\" value=\"1\">\n                        </div>\n                    </form>`,\n        buttons: {\n            Confirm: {\n                icon: \"<i class='fas fa-check'></i>\",\n                label: \"OK\",\n                callback: async (html)=>{\n                    const subject = html.find(\"[name=subject]\").val().trim(); // Get the user set subject\n                    const value = parseInt(html.find(\"[name=value]\").val()) || 1; // Get the user set value\n                    // Create update object\n                    const update = {\n                        \"system.rank\": value\n                    };\n                    if (subject) update[\"system.specialization\"] = subject;\n                    // Update the subject and value\n                    consequence.update({\n                        \"system.specialization\": subject,\n                        \"system.rank\": value\n                    });\n                }\n            }\n        },\n        default: \"Confirm\"\n    }).render(true);\n    // Add a copy to the actor\n    [consequence] = await actor.createEmbeddedDocuments(\"Item\", [\n        consequence\n    ]);\n}\nasync function $d200992a7286a1e5$export$efd50a08c6cb878d(effect) {\n    const actor = effect.target;\n    // Get the existing consequence on this actor, if one exists\n    let consequences = actor.items.filter((c)=>c.name === effect.name && c.type === \"consequence\");\n    // Remove any matching consequences\n    if (consequences.length) await actor.deleteEmbeddedDocuments(\"Item\", consequences.map((c)=>c.id));\n}\nfunction $d200992a7286a1e5$export$df951736c406196b(effect) {\n    const actor = effect.target;\n    let consequences = actor.items.filter((c)=>c.name === effect.name && c.type === \"consequence\");\n    if (!consequences.length) return true;\n    if (consequences.length > 1 || effect?.flags?.system?.value_prompt) {\n        let content = '<form><div class=\"grid grid-2col\">';\n        consequences.forEach((c)=>{\n            const rank_display = effect?.flags?.system?.value_prompt || c.system.rank > 1 ? c.system.rank : \"\";\n            content += `<input type=\"radio\" name=\"consequence\" value=\"${c.id}\" />\n                            <label for=\"consequence\">${c.system.full_name} ${rank_display}</label>`;\n        });\n        content += \"</div></form>\";\n        new Dialog({\n            title: `Select Which ${consequences[0].name} to Remove`,\n            content: content,\n            buttons: {\n                Confirm: {\n                    icon: \"<i class='fa fa-trash'></i>\",\n                    label: \"Remove\",\n                    callback: async (html)=>{\n                        const delete_id = html.find(\"input[name=consequence]:checked\").val();\n                        if (delete_id) await actor.deleteEmbeddedDocuments(\"Item\", [\n                            delete_id\n                        ]);\n                    }\n                }\n            },\n            default: \"Confirm\"\n        }).render(true);\n        return false;\n    }\n    return true;\n}\n\n\n\n\n\nclass $28ccc140dd142615$export$c49d3afcc675f1b5 extends Actor {\n    /*****************************************\n     * METHODS THAT OVERRIDE THE ACTOR CLASS *\n     *****************************************/ /**\n     * @inheritdoc\n     *  @override\n     */ async prepareDerivedData() {\n        super.prepareDerivedData();\n        // Calculate the actor's scores\n        if (this.type === \"character\") await $28ccc140dd142615$export$ed3c1ed9e6e8a483.calculate_scores(this);\n        if (this.type === \"stash\") await $28ccc140dd142615$export$251803a9103f8263.calculate_scores(this);\n        if (this.type === \"vehicle\") await $28ccc140dd142615$export$d98152187a58a356.calculate_scores(this);\n    }\n    /**\n     * @inheritdoc\n     * @override\n     */ getRollData() {\n        const data = super.getRollData();\n        // Copy stats and scores to the top level\n        if (data.stats) {\n            for (let stat of Object.keys(data.stats))data[stat] = data.stats[stat].value;\n            for (let score of Object.keys(data.scores))data[score] = data.scores[score].value;\n        }\n        return data;\n    }\n    /**\n     * Return the actor's initiative value (used in the combat tracker).\n     * Should always be set to INITIATIVE.NPC_TURN for NPCs or either INITIATIVE.FAST_TURN or\n     * INITIATIVE.SLOW_TURN for PCs.\n     *\n     * @param {string|null} [formula=null] - Optional formula to use for initiative\n     * @returns {Roll}\n     */ getInitiativeRoll(formula = null) {\n        // If a formula is supplied for initiative, return a Roll using it\n        if (formula) return new Roll(formula);\n        else if (this.is_npc()) return new Roll((0, $96b9cba4b1d7a59a$export$bd4feec9a9a5101a).NPC_TURN);\n        else return new Roll(this.system.fast_turn ? (0, $96b9cba4b1d7a59a$export$bd4feec9a9a5101a).FAST_TURN : (0, $96b9cba4b1d7a59a$export$bd4feec9a9a5101a).SLOW_TURN);\n    }\n    /*******************************************\n     * METHODS FOR DERIVING THE ACTOR'S SCORES *\n     *******************************************/ /**\n     * Calculate the actor's score based on either the median of a set or a fixed number and apply\n     * any modifiers from effects currently on the actor.\n     *\n     * @param {string} name - The name of the score (used to look up modifiers)\n     * @param {number|number[]} stats - The basis from which to derive the score\n     * @param {{stat: string|undefined, score: string|undefined, tn: string|number|undefined, boons: number|undefined,\n     *     banes: number|undefined, modifier: number|undefined, divide: number|undefined, percent: number|undefined}} other_modifiers - Any additional modifiers to include alongside those on the actor\n     * @returns {number}\n     */ calculate_score(name, stats, other_modifiers = {}) {\n        const base = Array.isArray(stats) ? (0, $ba32b9ea93ee5c3a$export$9c490b34b2f16a34)(stats) : stats;\n        const mods = this.total_modifiers({\n            base_score: name,\n            ...other_modifiers\n        });\n        const percent = 1 + mods.percent / 100;\n        return Math.floor((base + mods.modifier) * percent / (mods.divide || 1));\n    }\n    /**\n     * Iterate over actor's equipped armor and determine its Armor, Powered and Bulky property values.\n     * Return an object containing the values of each.\n     *\n     * @returns {{Armor: number, Powered: number, Bulky: number}}\n     */ armor_properties() {\n        const equipped_armor = this.items.filter((item)=>item.type === \"item\" && item.system.group === \"Armor\" && item.system.equipped);\n        let highest = {\n            \"Armor\": 0,\n            \"Bulky\": 0,\n            \"Powered\": 0\n        };\n        for (const arm of equipped_armor){\n            if (arm.system.armor > highest.Armor) highest.Armor = arm.system.armor;\n            if (arm.system.bulky > highest.Bulky) highest.Bulky = arm.system.bulky;\n            if (arm.system.powered > highest.Powered) highest.Powered = arm.system.powered;\n            if (arm.system.properties.includes(\"Sealed\")) highest.Sealed = true;\n        }\n        return highest;\n    }\n    /**\n     * Return the actor's Armor value (if already set by armor_properties()).\n     * Otherwise, iterate over all equipped armor and return the highest value.\n     *\n     * @returns {number}\n     */ armor_value() {\n        if (this.system.scores.armor.properties[\"Armor\"]) return this.system.scores.armor.properties[\"Armor\"];\n        const equipped_armor = this.items.filter((item)=>item.type === \"item\" && item.system.group === \"Armors\" && item.system.equipped);\n        let highest = 0;\n        for (const arm of equipped_armor){\n            const val = arm.system.armor;\n            if (val > highest) highest = val;\n        }\n        return highest;\n    }\n    /**\n     * Calculate the total encumbrance of the actor's inventory\n     *\n     * @returns {number}\n     */ encumbrance_total() {\n        return this.items.filter((item)=>item.type === \"item\").reduce((total, item)=>item.system.encumbrance + total, 0);\n    }\n    /**\n     * Calculates the character's current Wound total from all Wound, Grave Wound and Fatigue consequences\n     *\n     * @returns {number}\n     */ wound_total() {\n        const wounds = this.items.filter((item)=>item.type === \"consequence\" && (item.name.toLowerCase() === \"wound\" || item.name.toLowerCase() === \"grave wound\" || item.name.toLowerCase() === \"fatigue\"));\n        return wounds.map((a)=>a.system.rank).reduce((a, b)=>a + b, 0);\n    }\n    /*******************************\n     * METHODS FOR HANDLING DAMAGE *\n     *******************************/ /**\n     * Check whether the actor has a specified trait.\n     *\n     * @param {string} trait_name - The name of the trait\n     * @param {string|null} [specialization=null] - An optional specialization to match\n     * @returns {boolean}\n     */ has_trait(trait_name, specialization = null) {\n        const matches = this.items.filter((i)=>i.type === \"trait\" && i.name.toLowerCase() === trait_name.toLowerCase());\n        if (!specialization) return !!matches.length;\n        let specialization_match = false;\n        for (const i of matches){\n            const listings = i.system.specialization && i.system.specialization.split(\",\");\n            for (const l of listings)if (l.trim().toLowerCase() === specialization) specialization_match = true;\n        }\n        return specialization_match;\n    }\n    /**\n     * Check whether the action has immunity to a particular damage type\n     *\n     * @param {string} type - The damage type in abbreviated format (e.g. cut, pi, sm)\n     * @returns {boolean}\n     */ has_immunity(type) {\n        return this.has_trait(\"Immunity\", type);\n    }\n    /**\n     * Check whether the action has a vulnerability to a particular damage type\n     *\n     * @param {string} type - The damage type in abbreviated format (e.g. cut, pi, sm)\n     * @returns {boolean}\n     */ has_vulnerability(type) {\n        return this.has_trait(\"Vulnerability\", type);\n    }\n    /**\n     * Check whether the action has resistance to a particular damage type\n     *\n     * @param {string} type - The damage type in abbreviated format (e.g. cut, pi, sm)\n     * @returns {boolean}\n     */ has_resistance(type) {\n        return this.has_trait(\"Resistance\", type);\n    }\n    /**\n     * Return the TN of test prompted by the actor's Dying consequence\n     *\n     * @returns {number}\n     */ dying_tn() {\n        return Math.abs(Math.min(this.system.scores.health.max - this.system.scores.health.value, 0));\n    }\n    /**\n     * Apply the specified damage to the actor, taking into account armor and common traits and setting consequences\n     * and other effects as appropriate.\n     *\n     * @param {number} damage - The amount of damage being dealt\n     * @param {string} type - The type of damage being dealt in abbreviated format (e.g. cut, pi, sm)\n     * @param {boolean|string} critical - Whether the damage is being dealt by a critical hit\n     * @param {number} pierce - The Pierce property of the attack; for Ignores set to Effect.IGNORES_ALL_ARMOR.\n     * @returns {Promise<void>}\n     */ async apply_damage(damage, type, critical, pierce) {\n        critical = critical === \"true\" || critical === true; // Cast critical to boolean\n        pierce = Number(pierce); // Cast pierce to number\n        // Calculate the damage to apply\n        let applied_damage = pierce === (0, $30134fcb90c67fad$export$a32b0b1c1ac59d04).IGNORES_ALL_ARMOR ? Number(damage) : Number(damage) - Math.max(this.system.scores.armor.value - Math.max(pierce, 0), 0);\n        if (this.has_immunity(type)) {\n            ChatMessage.create({\n                content: \"The character has immunity. Ignoring damage.\",\n                whisper: [\n                    game.user.id\n                ]\n            });\n            applied_damage = 0;\n        }\n        if (this.has_vulnerability(type)) {\n            ChatMessage.create({\n                content: \"The character has vulnerability. Doubling damage.\",\n                whisper: [\n                    game.user.id\n                ]\n            });\n            applied_damage *= 2;\n        }\n        if (this.has_resistance(type)) {\n            ChatMessage.create({\n                content: \"The character has resistance. Halving damage.\",\n                whisper: [\n                    game.user.id\n                ]\n            });\n            applied_damage = Math.floor(applied_damage / 2);\n        }\n        // If no damage is applied, there is nothing more to do\n        if (applied_damage <= 0) return;\n        // If this reduces the character to <=0 HP, upgrade to a grave wound\n        if (this.system.scores.health.value + applied_damage >= this.system.scores.health.max) {\n            critical = true;\n            if (type === \"fat\") ChatMessage.create({\n                content: `Wound Total exceeds Health . ${this.name} falls unconscious for [[1d10]] hours.`\n            });\n            else ChatMessage.create({\n                content: `Wound Total exceeds Health. ${this.name} takes a Grave Wound.`\n            });\n        }\n        // Determine whether and how many Dying consequences to apply\n        const current_increment = Math.floor(this.system.scores.health.value / this.system.scores.health.max);\n        const new_increment = Math.floor((this.system.scores.health.value + applied_damage) / this.system.scores.health.max);\n        const dying_to_apply = Math.max(new_increment - current_increment, this.system.scores.health.value > this.system.scores.health.max ? 1 : 0); // If Wound Total > Health, always add a dying when taking damage\n        // If there is a Dying to apply\n        if (dying_to_apply > 0) {\n            // Is the character already dying?\n            let already_dying = false;\n            let dying_consequence = this?.items.filter((c)=>c.name === \"Dying\" && c.type === \"consequence\").values().next()?.value;\n            if (dying_consequence) already_dying = true;\n            else {\n                dying_consequence = await (0, $d200992a7286a1e5$export$ce53e9a4e8384701)({\n                    name: \"Dying\",\n                    actor: this,\n                    skip_actor: true\n                });\n                [dying_consequence] = await this.createEmbeddedDocuments(\"Item\", [\n                    dying_consequence\n                ]);\n            }\n            // Set the correct Dying value\n            const new_dying_value = already_dying ? dying_consequence.system.rank + dying_to_apply : dying_to_apply;\n            await dying_consequence.update({\n                \"system.rank\": new_dying_value\n            });\n            // Check to see if the character is dead\n            if (new_dying_value >= 3) // Don't do anything if already dead\n            {\n                if (!this.statuses.has(\"defeated\")) {\n                    // Get the defeated status effect\n                    let effect = null;\n                    CONFIG.statusEffects.forEach((e)=>{\n                        if (e.id === \"defeated\") effect = e;\n                    });\n                    if (effect) {\n                        // Add the status effect\n                        const clone = foundry.utils.deepClone(effect);\n                        ActiveEffect.create(clone, {\n                            parent: this\n                        });\n                        ChatMessage.create({\n                            content: `Dying consequences exceed 3 or more. ${this.name} is dead.`\n                        });\n                    }\n                }\n            }\n        }\n        // Determine which consequence to apply\n        let consequence_name = null;\n        if (type === \"fat\") consequence_name = \"Fatigue\";\n        else if (critical) consequence_name = \"Grave Wound\";\n        else consequence_name = \"Wound\";\n        // Get the consequence\n        let consequence = game.items.filter((c)=>c.name === consequence_name && c.type === \"consequence\").values().next()?.value;\n        // Or lazily create it, if necessary\n        if (!consequence) consequence = await Item.create({\n            name: consequence_name,\n            type: \"consequence\",\n            system: {\n                specialized: true,\n                specialization: \"describe injury\",\n                rank: 1\n            }\n        });\n        // Apply the wound to the actor\n        const [actor_copy] = await this.createEmbeddedDocuments(\"Item\", [\n            consequence\n        ]);\n        await actor_copy.update({\n            \"system.rank\": applied_damage\n        });\n        // Generate a default subject based on damage type\n        const wound = await (0, $30134fcb90c67fad$export$a8bf75e7367c8d41).generate_wound(type, critical);\n        // Prompt the user for the descriptor\n        new Dialog({\n            title: `Describe ${consequence_name}`,\n            content: `\n                <form>\n                    <div class=\"form-group\">\n                        <label for=\"descriptor\">Descriptor</label>\n                        <input type=\"text\" name=\"descriptor\" value=\"${wound.descriptor}\" autofocus>\n                    </div>\n                </form>`,\n            buttons: {\n                Confirm: {\n                    icon: \"<i class='fas fa-check'></i>\",\n                    label: \"OK\",\n                    callback: async (html)=>{\n                        const final_descriptor = html.find(\"[name=descriptor]\").val(); // Get the user set descriptor\n                        if (wound.descriptor !== final_descriptor) wound.description = \"\";\n                        // Add the descriptor to the wound\n                        await actor_copy.update({\n                            \"system.specialization\": final_descriptor,\n                            \"system.description\": wound.description\n                        });\n                    }\n                }\n            },\n            default: \"Confirm\"\n        }).render(true);\n    }\n    /*****************\n     * OTHER METHODS *\n     *****************/ /**\n     * Adjust the number of Hindered consequences on the actor based on their encumbrance\n     *\n     * @returns {Promise<void>}\n     */ async encumbrance_consequences() {\n        if (!this.isOwner) return;\n        const encumbered = this.system.scores.encumbrance.value > this.system.scores.encumbrance.max;\n        if (encumbered) {\n            // If already encumbered, skip\n            let consequences = this.items.filter((c)=>c.name === \"Hindered\" && c.system.specialization === \"Encumbered\" && c.type === \"consequence\");\n            if (consequences.length) return;\n            // If not encumbered, add the consequence\n            let hindered = await (0, $d200992a7286a1e5$export$ce53e9a4e8384701)({\n                name: \"Hindered\",\n                actor: this,\n                skip_actor: true\n            });\n            [hindered] = await this.createEmbeddedDocuments(\"Item\", [\n                hindered\n            ]);\n            await hindered.update({\n                \"system.specialization\": \"Encumbered\",\n                \"system.specialized\": true\n            });\n        } else {\n            // Remove any encumbered consequences\n            let consequences = this.items.filter((c)=>c.name === \"Hindered\" && c.system.specialization === \"Encumbered\" && c.type === \"consequence\");\n            if (consequences.length) await this.deleteEmbeddedDocuments(\"Item\", consequences.map((c)=>c.id));\n        }\n    }\n    /**\n     * Is this character a PC? (Used by handlebars template - do not remove!)\n     *\n     * @returns {boolean}\n     */ is_pc() {\n        return this.type === \"character\" && !this.system.npc;\n    }\n    /**\n     * Is this character an NPC?\n     *\n     * @returns {boolean}\n     */ is_npc() {\n        return this.type === \"character\" && !!this.system.npc;\n    }\n    /********************************************\n     * METHODS FOR HANDLING TESTS AND MODIFIERS *\n     ********************************************/ /**\n     * Adds together all boons, banes and other modifiers relevant to the action or score and returns\n     * an object containing their sums.\n     *\n     * @param {{base_score: string, stat: string|null, score: string|null, tn: string|number, boons: number,\n     *     banes: number, modifier: number, divide: number, percent: number}} dataset\n     * @returns {{modifier: number, divide: number, percent: number, boons: number, banes: number, tags: string[]}}\n     */ total_modifiers(dataset) {\n        return (0, $7294f01c4c99ce18$export$b5c87c9f30e8974e).total_modifiers(this.modifiers(dataset));\n    }\n    /**\n     * Adds up any modifiers from the actor's active effects, as well as from the dataset object passed into the method.\n     * Returns a list of parsed ModifierSet objects representing all relevant modifiers.\n     *\n     * @param {{base_score: string, stat: string|null, score: string|null, tn: string|number, boons: number,\n     *     banes: number, modifier: number, divide: number, percent: number}} dataset\n     * @returns {string[]}\n     * @see ModifierSet\n     */ modifiers(dataset) {\n        let mods_object = null;\n        // Look up the modifiers for this test\n        if (dataset.base_score) mods_object = deepClone(this.system.modifiers.scores[dataset.base_score]);\n        if (dataset.tn === \"Defense\" || dataset.tn === \"Willpower\") mods_object = deepClone(this.system.modifiers.other.attack);\n        if (!mods_object?.length && (dataset.score === \"defense\" || dataset.score === \"willpower\")) mods_object = deepClone(this.system.modifiers.other.defense);\n        if (!mods_object?.length && dataset.stat) mods_object = deepClone(this.system.modifiers.stats[dataset.stat]);\n        if (!mods_object) mods_object = [];\n        // Verify that the mods object is a list\n        if (!Array.isArray(mods_object)) {\n            console.error(\"Mods object is not array\");\n            return [];\n        }\n        // EACH MOD IN THE LIST SHOULD BE IN THE FORMAT\n        // name=short name&description=for tooltip&boons=0&banes=0&modifier=0\n        // Add manual boons, banes or modifier passed in as part of the dataset\n        if (dataset.boons) mods_object.push(`boons=${dataset.boons}`);\n        if (dataset.banes) mods_object.push(`banes=${dataset.banes}`);\n        if (dataset.modifier) mods_object.push(`modifier=${dataset.modifier}`);\n        if (dataset.divide) mods_object.push(`divide=${dataset.divide}`);\n        // Add possible bane from the strength requirement\n        if ((0, $d5ef102242816c77$export$6191c3ac084cc81b).is_attack(dataset) && !(0, $d5ef102242816c77$export$6191c3ac084cc81b).strength_met(dataset, this)) mods_object.push(`name=Low Str&banes=1`);\n        // Add possible bane from Fatigue\n        if ((dataset.stat === \"strength\" || dataset.stat === \"dexterity\" || dataset.stat === \"speed\" || dataset.stat === \"endurance\") && this.system.scores.health.fatigue && this.system.scores.health.value >= this.system.scores.health.max) mods_object.push(`name=Fatigue&banes=1`);\n        // Add possible bane from Bulky\n        if ((dataset.stat === \"speed\" || dataset.skill === \"Athletics\") && this.system.scores.armor.properties[\"Bulky\"]) mods_object.push(`name=Bulky&banes=1`);\n        // Add boons from Powered property\n        if (dataset.stat === \"strength\" && this.system.scores.armor.properties[\"Powered\"]) mods_object.push(`name=Powered&boons=2`);\n        // Add boon from the Auto property\n        if ((0, $d5ef102242816c77$export$6191c3ac084cc81b).is_attack(dataset) && (0, $d5ef102242816c77$export$6191c3ac084cc81b).has_property(dataset.properties, \"Auto\")) mods_object.push(`name=Auto&boons=1`);\n        // Parse the mods object into a list of mods\n        return (0, $7294f01c4c99ce18$export$b5c87c9f30e8974e).parse(mods_object);\n    }\n    /**\n     * The actor performs a test defined by the dataset.\n     *\n     * @param {{stat: string|null, score: string|null, tn: string|number, boons: number, banes: number,\n     *     modifier: number, divide: number, percent: number, evaluate: boolean, apply_consequences: boolean,\n     *     chat: boolean, whisper: boolean}} dataset\n     * @returns {Promise<Test>}\n     * @see Test\n     */ async test(dataset) {\n        // Merge the actor into the dataset\n        const spec = {\n            actor: this,\n            ...dataset\n        };\n        // Create the test and evaluate unless evaluate=false\n        const test = new (0, $d5ef102242816c77$export$1b16fc9eb974a84d)(spec);\n        if (dataset.evaluate !== false) await test.evaluate();\n        // Apply effects, unless apply_consequences=false\n        if (dataset.apply_effects !== false) await test.apply_effects(dataset);\n        // Send to chat, if chat=true, whisper if whisper=true\n        if (dataset.chat) await test.to_chat({\n            whisper: !!dataset.whisper\n        });\n        return test;\n    }\n}\nclass $28ccc140dd142615$export$ed3c1ed9e6e8a483 {\n    /**\n     * Calculates all derived scores for the character and updates their values\n     *\n     * @param {SagaMachineActor} actor\n     */ static async calculate_scores(actor) {\n        // Armor properties\n        actor.system.scores.armor.properties = actor.armor_properties();\n        // Equipped armor\n        if (!actor.system.scores.armor.custom) actor.system.scores.armor.value = actor.calculate_score(\"armor\", actor.armor_value());\n        // Defense\n        if (!actor.system.scores.defense.custom) actor.system.scores.defense.value = actor.calculate_score(\"defense\", [\n            actor.system.stats.dexterity.value,\n            actor.system.stats.speed.value,\n            actor.system.stats.perception.value\n        ]);\n        // Willpower\n        if (!actor.system.scores.willpower.custom) actor.system.scores.willpower.value = actor.calculate_score(\"willpower\", [\n            actor.system.stats.intelligence.value,\n            actor.system.stats.charisma.value,\n            actor.system.stats.determination.value\n        ]);\n        // Health\n        if (!actor.system.scores.health.custom) actor.system.scores.health.max = actor.calculate_score(\"health\", actor.system.stats.strength.value + actor.system.stats.endurance.value);\n        // Wound total\n        actor.system.scores.health.value = actor.wound_total();\n        // Fatigue\n        actor.system.scores.health.fatigue = $28ccc140dd142615$export$ed3c1ed9e6e8a483.fatigue(actor);\n        // Move\n        if (!actor.system.scores.move.custom) actor.system.scores.move.value = actor.calculate_score(\"move\", [\n            actor.system.stats.speed.value,\n            actor.system.stats.endurance.value,\n            actor.system.stats.determination.value\n        ], {\n            modifier: actor.system.scores.armor.properties[\"Bulky\"] * -1 || 0,\n            divide: actor.system.scores.health.fatigue && actor.system.scores.health.value >= actor.system.scores.health.max ? 2 : 1 // Handle Fatigue consequence's effect on Move\n        });\n        // Encumbrance threshold\n        if (!actor.system.scores.encumbrance.custom) actor.system.scores.encumbrance.max = actor.calculate_score(\"encumbrance\", [\n            actor.system.stats.strength.value,\n            actor.system.stats.dexterity.value,\n            actor.system.stats.endurance.value\n        ], {\n            modifier: actor.system.scores.armor.properties[\"Powered\"] || 0\n        });\n        // Encumbrance total\n        actor.system.scores.encumbrance.value = actor.encumbrance_total();\n        // Experiences\n        const experiences_spent = $28ccc140dd142615$export$ed3c1ed9e6e8a483.experiences_spent(actor);\n        actor.system.experiences.spent = experiences_spent.total;\n        actor.system.experiences.spent_stats = experiences_spent.stats;\n        actor.system.experiences.spent_skills = experiences_spent.skills;\n        actor.system.experiences.spent_traits = experiences_spent.traits;\n        actor.system.experiences.unspent = actor.system.experiences.total - actor.system.experiences.spent;\n        actor.system.experiences.level = $28ccc140dd142615$export$ed3c1ed9e6e8a483.power_level(actor);\n    }\n    /**\n     * Counts the actor's total points of fatigue\n     *\n     * @param {SagaMachineActor} actor\n     * @returns {number}\n     */ static fatigue(actor) {\n        const fatigue = actor.items.filter((item)=>item.type === \"consequence\" && item.name.toLowerCase() === \"fatigue\");\n        return fatigue.map((a)=>a.system.rank).reduce((a, b)=>a + b, 0);\n    }\n    /**\n     * Determine the experience value of a stat or skill.\n     *\n     * @param {number} value - The current value of the stat or skill\n     * @param {number} [free=0] - How many ranks were free (usually characters get a free rank of Language). If undefined, assume no ranks were free.\n     * @returns {number}\n     */ static stat_cost(value, free = 0) {\n        const free_total = free ? [\n            ...Array(free + 1).keys()\n        ].reduce((a, b)=>a + b, 0) : 0;\n        return [\n            ...Array(value + 1).keys()\n        ].reduce((a, b)=>a + b, free_total * -1);\n    }\n    /**\n     * Returns the number of experiences this character has spent, broken down into categories: stats, skills, traits and total overall.\n     *\n     * @param {SagaMachineActor} actor\n     * @returns {{skills: number, total: number, traits: number, stats: number}}\n     */ static experiences_spent(actor) {\n        // Add total of all stats\n        let stats = 0;\n        for (let stat of [\n            \"strength\",\n            \"dexterity\",\n            \"speed\",\n            \"endurance\",\n            \"intelligence\",\n            \"perception\",\n            \"charisma\",\n            \"determination\"\n        ])stats += $28ccc140dd142615$export$ed3c1ed9e6e8a483.stat_cost(actor.system.stats[stat].value);\n        // Subtract the cost of the character's starting stats, based on power level\n        stats -= game.settings.get(\"saga-machine\", \"level\", 120);\n        // Add total of all skills and traits\n        let skills = 0;\n        let traits = 0;\n        for (let item of actor.items){\n            if (item.type === \"skill\") skills += $28ccc140dd142615$export$ed3c1ed9e6e8a483.stat_cost(item.system.rank, item.system.free_ranks);\n            if (item.type === \"trait\") traits += item.system.ranked ? item.system.cost * item.system.rank : item.system.cost;\n        }\n        const total = stats + skills + traits;\n        return {\n            total: total,\n            stats: stats,\n            skills: skills,\n            traits: traits\n        };\n    }\n    /**\n     * Given the character's spent experience, returns their calculated power level\n     *\n     * @param {SagaMachineActor} actor\n     * @returns {string}\n     */ static power_level(actor) {\n        const total_spent = actor.system.experiences.spent + game.settings.get(\"saga-machine\", \"level\", 120);\n        if (total_spent < 150) return \"Mundane\";\n        else if (total_spent < 200) return \"Novice\";\n        else if (total_spent < 250) return \"Exceptional\";\n        else if (total_spent < 300) return \"Distinguished\";\n        else if (total_spent < 350) return \"Renowned\";\n        else return \"Legendary\";\n    }\n}\nclass $28ccc140dd142615$export$251803a9103f8263 {\n    /**\n     * Calculate the stash's wealth and encumbrance\n     *\n     * @param {SagaMachineActor} actor\n     * @returns {Promise<void>}\n     */ static async calculate_scores(actor) {\n        // Wealth total\n        actor.system.wealth.total = $28ccc140dd142615$export$251803a9103f8263.wealth_total(actor);\n        // Encumbrance total\n        actor.system.encumbrance.value = actor.encumbrance_total();\n    }\n    /**\n     * Calculate the total value of the stash\n     *\n     * @param {SagaMachineActor} actor\n     * @returns {number}\n     */ static wealth_total(actor) {\n        return actor.items.filter((item)=>item.type === \"item\").reduce((total, item)=>item.system.cost * item.system.quantity + total, 0) + actor.system.wealth.money;\n    }\n}\nclass $28ccc140dd142615$export$d98152187a58a356 {\n    /**\n     * Calculate the vehicle's scores\n     *\n     * @param {SagaMachineActor} actor\n     * @returns {Promise<void>}\n     */ static async calculate_scores(actor) {\n        // Armor properties\n        actor.system.scores.armor.properties = actor.armor_properties();\n        // Equipped armor\n        if (!actor.system.scores.armor.custom) actor.system.scores.armor.value = actor.calculate_score(\"armor\", actor.armor_value());\n        // Handling\n        actor.system.scores.handling.boons = (actor.system.scores.handling.label.match(/\\+/g) || []).length;\n        actor.system.scores.handling.banes = (actor.system.scores.handling.label.match(/-/g) || []).length;\n        // Defense\n        if (!actor.system.scores.defense.custom) actor.system.scores.defense.tn = actor.calculate_score(\"defense\", 10 + actor.system.scores.handling.boons - (actor.system.scores.size.value + actor.system.scores.handling.banes));\n        // Health\n        if (!actor.system.scores.health.custom) actor.system.scores.health.max = actor.calculate_score(\"health\", 15 * 2 ** actor.system.scores.size.value);\n        // Wound total\n        actor.system.scores.health.value = actor.wound_total();\n        // Loads total\n        actor.system.scores.space.value = $28ccc140dd142615$export$d98152187a58a356.loads_total(actor);\n    }\n    /**\n     * Calculate the total number of loads on the vehicle\n     *\n     * @param {SagaMachineActor} actor\n     * @returns {number}\n     */ static loads_total(actor) {\n        return actor.items.filter((item)=>item.type === \"item\").reduce((total, item)=>item.system.loads + total, 0);\n    }\n}\n\n\n\n/**\n * ActorSheet context used in getData() and dependent methods.\n *\n * @typedef {{cssClass: string, editable: *, document: *, data: *, limited: *, options: *, owner: *, title: *}} Context\n */ /**\n * JQuery library - used by Foundry VTT\n *\n * @external JQuery\n * @link https://api.jquery.com/\n */ /**\n * Handlebars library - used by Foundry VTT\n *\n * @external Handlebars\n * @link https://handlebarsjs.com/api-reference/\n */ /**\n * Register a Handlebars helper\n *\n * @function Handlebars.registerHelper\n * @link https://handlebarsjs.com/api-reference/\n */ /**\n * Register Handlebars helpers and partials: Hooks.once('init')\n */ Hooks.once(\"init\", async ()=>{\n    // Register handlebars helpers\n    Handlebars.registerHelper(\"is_GM\", ()=>game.user.isGM);\n    Handlebars.registerHelper(\"is_weapon\", (item)=>item.system.group.toLowerCase() === \"weapons\");\n    Handlebars.registerHelper(\"is_wearable\", (item)=>item.system.group.toLowerCase() === \"armors\" || item.system.group.toLowerCase() === \"apparel\");\n    // Register handlebars partials\n    await loadTemplates([\n        \"systems/saga-machine/templates/partials/character-header.html\",\n        \"systems/saga-machine/templates/partials/character-sidebar.html\",\n        \"systems/saga-machine/templates/partials/character-inventory.html\"\n    ]);\n});\nclass $05cfedbfc2cc6c3c$export$c7f6895f6cb1258b extends ActorSheet {\n    /**********************************\n     * METHODS THAT SET BASIC OPTIONS *\n     **********************************/ /**\n\t * The default options for actor sheets\n\t *\n\t * @override\n\t * @returns {DocumentSheetOptions}\n\t * */ static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\n                \"saga-machine\",\n                \"sheet\",\n                \"actor\"\n            ],\n            width: 850,\n            height: 650,\n            tabs: [\n                {\n                    navSelector: \".sheet-tabs\",\n                    contentSelector: \".sheet-body\",\n                    initial: \"basics\"\n                }\n            ],\n            scrollY: [\n                \".basics\",\n                \".combat\",\n                \".inventory\",\n                \".advancement\"\n            ],\n            dragDrop: [\n                {\n                    dragSelector: \".items-list .item\",\n                    dropSelector: null\n                }\n            ]\n        });\n    }\n    /**\n     * Dynamically set the HTML template for the actor based on type\n\t *\n     * @returns {string}\n     */ get template() {\n        return `systems/saga-machine/templates/actors/${this.actor.type}-sheet.html`;\n    }\n    /**********************************\n     * METHODS THAT HANDLE SHEET DATA *\n     **********************************/ /**\n\t * @inheritdoc\n\t * @override\n\t * @return Context\n\t * */ getData() {\n        const context = super.getData();\n        // Filter and sort all item lists for the character\n        context.data.system.ambitions = this.items(context, \"ambition\", null, (a, b)=>a.system.type > b.system.type ? 1 : -1);\n        context.data.system.paths = this.items(context, \"path\");\n        context.data.system.origins = this.items(context, \"origin\");\n        context.data.system.all_skills = this.items(context, \"skill\");\n        context.data.system.skill_groups = this.skills_and_traits(context.data.system.all_skills, \"General Skills\");\n        context.data.system.all_traits = this.items(context, \"trait\");\n        context.data.system.trait_groups = this.skills_and_traits(context.data.system.all_traits, \"General Traits\", [\n            \"General Traits\",\n            \"Weaknesses\"\n        ]);\n        context.data.system.consequences = this.items(context, \"consequence\");\n        context.data.system.equipment = this.items(context, \"item\");\n        context.data.system.containers = this.items(context, \"item\", (i)=>!!i.system.container);\n        return context;\n    }\n    /**\n\t * Get all items of the specified type, apply an optional secondary filter and sort (alphabetically by default).\n\t *\n\t * @param {Context} context - Context produced in getData()\n\t * @param {string} type - Item type (e.g. 'skill', 'trait', 'consequence')\n\t * @param {Function} [filter] - Optional filtering function\n\t * @param {Function} [sort] - Optional sorting function\n\t * @returns {SagaMachineItem[]}\n\t */ items(context, type, filter, sort) {\n        if (!filter) filter = ()=>true;\n        if (!sort) sort = (a, b)=>a.name > b.name ? 1 : -1;\n        return context.actor.items.filter((item)=>item.type === type && filter(item)).sort(sort);\n    }\n    /**\n\t * Organize skill or trait items into groups\n\t *\n\t * @param {SagaMachineItem[]} all_items - Items to be organized\n\t * @param {string} default_group - Default group for new items or those without a specified group\n\t * @param {string[]} display_if_empty - Groups to create even if they are empty\n\t * @return {{name: string, contents: SagaMachineItem[]}[]}\n\t * @private\n\t */ skills_and_traits(all_items, default_group, display_if_empty = null) {\n        const raw_groups = this.group_items(all_items, (i)=>i.system.group, null, null, default_group);\n        const final_groups = []; // { name: String, contents: Skill[] }\n        // Add empty groups\n        if (display_if_empty) {\n            for (const c of display_if_empty)if (!(c in raw_groups)) final_groups.push({\n                name: c,\n                contents: []\n            });\n        }\n        // Add groups\n        for (const g of Object.keys(raw_groups))final_groups.push({\n            name: g,\n            contents: raw_groups[g]\n        });\n        // Sort groups by name\n        final_groups.sort((a, b)=>{\n            if (a.name === b.name) return 0;\n            if (a.name === default_group) return -1;\n            if (b.name === default_group) return 1;\n            if (a.name < b.name) return -1;\n            if (a.name > b.name) return 1;\n            return 0;\n        });\n        return final_groups;\n    }\n    /**\n\t * Organize inventory by item group and by container\n\t *\n\t * @param {Context} context - Context produced in getData()\n\t * @param {string[]} [top_groups] - Item groups to display at the top, regardless of alphabetical order\n\t * @param {string} [blank] - Default group for new items or those without a specified group\n\t * @return {{name: string, container: null|string, contents: SagaMachineItem[], encumbrance: number, max:number}[]}\n\t */ groups_and_containers({ context: context, top_groups: top_groups = [\n        \"Weapons\",\n        \"Armors\"\n    ], blank: blank = \"Miscellanea\" }) {\n        const raw_groups = this.group_items(context.data.system.equipment, (i)=>i.system.parent || i.system.group, (i)=>!i.system.container);\n        if (!context.data.system.equipment.filter((i)=>!i.system.parent && !i.system.container).length) raw_groups[blank] = []; // Add blank group if no non-container groups\n        const equipment_groups = []; // { name: String, container: null|Item, contents: Item[], encumbrance: Int, max: 0|Int }\n        // Add empty containers\n        for (const c of context.data.system.containers)if (!(c.id in raw_groups)) equipment_groups.push({\n            name: c.system.full_name,\n            container: c,\n            contents: [],\n            encumbrance: 0,\n            max: c.system.container\n        });\n        // Add other containers and groups\n        for (const g of Object.keys(raw_groups)){\n            const container = context.data.system.containers.find((c)=>c.id === g);\n            equipment_groups.push({\n                name: container ? container.system.full_name : g,\n                container: container || null,\n                contents: raw_groups[g],\n                encumbrance: raw_groups[g].reduce((total, i)=>total + i.system.container_encumbrance, 0),\n                max: container ? container.system.container : 0\n            });\n        }\n        // Sort groups by name and whether it is a container\n        equipment_groups.sort((a, b)=>{\n            if (a.name === b.name) return 0;\n            for (let g of top_groups){\n                if (a.name === g) return -1;\n                if (b.name === g) return 1;\n            }\n            if (!!a.container && !b.container) return 1;\n            if (!!b.container && !a.container) return -1;\n            if (a.name < b.name) return -1;\n            if (a.name > b.name) return 1;\n            return 0;\n        });\n        return equipment_groups;\n    }\n    /**\n\t * Iterate over list of items and group them into a map by the specified property, optionally apply a filter\n\t *\n\t * @param {SagaMachineItem[]} items - LItems to group\n\t * @param {string|Function} group_path - Function or string representing the group\n\t * @param {Function} [filter] - Optional filtering function\n\t * @param {Function} [sort] - Optional sorting function\n\t * @param {string} [blank_name] - Default group for items without one\n\t * @returns {Object.<string, SagaMachineItem[]>}\n\t */ group_items(items, group_path, filter, sort, blank_name) {\n        if (!filter) filter = ()=>true;\n        if (!sort) sort = (a, b)=>a.name > b.name ? 1 : -1;\n        if (!blank_name) blank_name = \"Miscellanea\";\n        const access = (object, path)=>path.split(\".\").reduce((o, i)=>o[i], object);\n        const groups = {};\n        for (let i of items){\n            if (!filter(i)) continue;\n            let group_name = typeof group_path === \"function\" ? group_path(i) : access(i, group_path);\n            if (!group_name || typeof group_name !== \"string\") group_name = blank_name;\n            if (group_name in groups) groups[group_name].push(i);\n            else groups[group_name] = [\n                i\n            ];\n        }\n        // Sort all groups\n        for (const k of Object.keys(groups))groups[k].sort(sort);\n        return groups;\n    }\n    /**\n\t * Calculate health progress bar percentages\n\t *\n\t * @param {Context} context\n\t */ calc_health_progress_bar(context) {\n        if (!context.data.system.scores.health.max) context.data.system.scores.health.percent = 0;\n        else context.data.system.scores.health.percent = Math.round(context.data.system.scores.health.value / context.data.system.scores.health.max * 100);\n    }\n    /****************************************\n     * METHODS THAT SET SHEET INTERACTIVITY *\n     ****************************************/ /**\n\t * @inheritdoc\n\t * @override\n\t * @param {JQuery} html\n\t * */ activateListeners(html) {\n        super.activateListeners(html);\n        // Everything below here is only needed if the sheet is editable\n        if (!this.isEditable) return;\n        html.find(\".item-create\").on(\"click\", this.on_item_create.bind(this)); // Item creation\n        html.find(\".item-edit\").on(\"click\", this.on_item_edit.bind(this)); // Item editing\n        html.find(\".item-delete\").on(\"click\", this.on_item_delete.bind(this)); // Item deletion\n        html.find(\".item-remove\").on(\"click\", this.on_item_remove.bind(this)); // Remove item from container\n        html.find(\".item-input\").on(\"change\", this.on_item_update.bind(this)); // Update item's rank or quantity\n        html.find(\".expandable\").on(\"click\", this.expand_description.bind(this)); // Expand description\n        html.find(\".chatable\").on(\"click\", this.chat_description.bind(this)); // Send description to chat\n        this.attach_drag_events(html); // Make icons draggable to hot bar, disable drag for input elements\n        this.attach_drop_events(html); // Enable drop events for containers and groups\n    }\n    /**\n\t * Attach data to drag events\n\t *\n\t * @param {Event} event\n\t * @override\n\t * @private\n\t */ _onDragStart(event) {\n        if (event.currentTarget.dataset[\"type\"] === \"Test\") event.stopPropagation();\n        // Attach IDs to the dataset\n        this.attach_ids(event.currentTarget.dataset);\n        const mod_keys = {\n            \"key-alt\": event.altKey,\n            \"key-ctrl\": event.ctrlKey,\n            \"key-shift\": event.shiftKey,\n            \"key-meta\": event.metaKey\n        };\n        event.dataTransfer.setData(\"text/plain\", JSON.stringify({\n            ...event.currentTarget.dataset,\n            ...mod_keys\n        }));\n        super._onDragStart(event);\n    }\n    /**\n\t * Create a new item of the specified type\n\t *\n\t * @param {Event} event\n\t * @returns {Promise<SagaMachineItem>}\n\t */ async on_item_create(event) {\n        event.preventDefault();\n        const type = $(event.currentTarget).data(\"type\"); // Get item type\n        const name = $(event.currentTarget).data(\"name\"); // Get item name\n        const system = $(event.currentTarget).data(\"system\") || {}; // Get system data\n        // Prepare item data\n        const itemData = {\n            name: name ? name : `New ${type}`,\n            type: type,\n            system: system\n        };\n        // Finally, create the item!\n        return await Item.create(itemData, {\n            parent: this.actor\n        });\n    }\n    /**\n\t * Open the item sheet for an actor's item\n\t *\n\t * @param {Event} event\n\t * @return {Promise<void>}\n\t */ async on_item_edit(event) {\n        const box = $(event.currentTarget).parents(\".item\");\n        const item = this.actor.items.get(box.data(\"id\"));\n        item.sheet.render(true);\n    }\n    /**\n\t * Delete an item from the actor\n\t *\n\t * @param {Event} event\n\t * @return {Promise<void>}\n\t */ async on_item_delete(event) {\n        const box = $(event.currentTarget).parents(\".item\");\n        const item = this.actor.items.get(box.data(\"id\"));\n        if (!!item.system.container) {\n            const contained = this.actor.items.filter((i)=>i.type === \"item\" && i.system.parent === item.id);\n            await this.actor.updateEmbeddedDocuments(\"Item\", contained.map((i)=>new Object({\n                    \"_id\": i.id,\n                    \"system.parent\": null\n                })));\n        }\n        item.delete();\n        box.slideUp(200, ()=>this.render(false));\n    }\n    /**\n\t * Remove an item from a container\n\t *\n\t * @param {Event} event\n\t * @return {Promise<void>}\n\t */ async on_item_remove(event) {\n        const box = $(event.currentTarget).parents(\".item\");\n        const item = this.actor.items.get(box.data(\"id\"));\n        const update = {\n            _id: item.id,\n            \"system.parent\": null\n        };\n        this.actor.updateEmbeddedDocuments(\"Item\", [\n            update\n        ]);\n    }\n    async on_item_update(event) {\n        const box = $(event.currentTarget).parents(\".item\");\n        const attribute = event.currentTarget.getAttribute(\"data-name\");\n        const update = {\n            _id: box.data(\"id\")\n        };\n        update[attribute] = Number(event.currentTarget.value);\n        this.actor.updateEmbeddedDocuments(\"Item\", [\n            update\n        ]);\n    }\n    /**\n\t * Expand the description when the name is clicked\n\t *\n\t * @param {Event} event\n\t * @return {Promise<void>}\n\t */ async expand_description(event) {\n        let all_descriptions = null;\n        let description = $(event.target).closest(\".item\").find(\".item-description\"); // PC sheets\n        if (!description.length) {\n            const id = $(event.target).closest(\".item\").data(\"id\");\n            all_descriptions = $(event.target).closest(\".items-inline\").find(`.item-description`);\n            description = $(event.target).closest(\".items-inline\").find(`.item-description[data-id='${id}']`);\n        }\n        if (all_descriptions) {\n            for (let d of all_descriptions)if (d !== description[0] && $(d).is(\":visible\")) $(d).slideUp(200);\n        }\n        description.slideToggle(200);\n    }\n    /**\n\t * Send the description to chat when the icon is clicked\n\t *\n\t * @param {Event} event\n\t * @return {Promise<void>}\n\t */ async chat_description(event) {\n        const item_id = $(event.target).closest(\".item\").data(\"id\");\n        if (!item_id) return;\n        const item = this.actor.items.get(item_id);\n        if (!item) return;\n        this.to_chat(item);\n    }\n    /**\n\t * Attach macro drag event for hot bar, disable drag for input elements\n\t *\n\t * @param {JQuery} html\n\t */ attach_drag_events(html) {\n        // Drag events for macros\n        html.find(\".rollable\").each((i, li)=>{\n            li.setAttribute(\"draggable\", true); // Add draggable and dragstart listener\n            li.addEventListener(\"dragstart\", (ev)=>this._onDragStart(ev), false);\n        });\n        // Disable drag events for inputs\n        html.find(\".items-list .item input, .items-list .item select\").on(\"mousedown\", function(e) {\n            e.stopPropagation();\n            $(e.target).closest(\".item\").attr(\"draggable\", false);\n        });\n        html.find(\".items-list .item\").on(\"mousedown\", function(e) {\n            $(e.target).attr(\"draggable\", true);\n        }).on({\n            \"dragstart\": function(e) {\n                e.stopPropagation();\n                let dt = e.originalEvent.dataTransfer;\n                if (dt) {\n                    dt.effectAllowed = \"move\";\n                    dt.setData(\"text/html\", \"\");\n                }\n            }\n        });\n    }\n    /**\n\t * Attach drop events for containers and groups\n\t *\n\t * @param {JQuery} html\n\t */ attach_drop_events(html) {\n        // Handle drop events for containers and item groups\n        html.find(\".item-group\").on(\"drop\", async (event)=>{\n            // Get the drag event data\n            let data = null;\n            try {\n                data = JSON.parse(event.originalEvent.dataTransfer.getData(\"text\"));\n            } catch (error) {}\n            if (!data || !data.uuid || data.type !== \"Item\") return;\n            // Get the item being dropped\n            const drop_item = await fromUuid(data.uuid);\n            if (drop_item.type !== \"item\") return;\n            // Get the container ID, if applicable, and add the item to the container if it fits\n            const container_id = $(event.currentTarget).data(\"id\");\n            if (container_id) {\n                if (drop_item.system.container_encumbrance + $(event.currentTarget).data(\"encumbrance\") <= $(event.currentTarget).data(\"max\")) await drop_item.update({\n                    \"system.parent\": container_id\n                });\n                else await drop_item.update({\n                    \"system.parent\": null\n                });\n            }\n        });\n    }\n    /**\n\t * Handle right-click on scores: toggle on/off custom mode or decrement secondary score\n\t *\n\t * @param {Event} event\n\t * @return {Promise<void>}\n\t */ async on_score_toggle(event) {\n        event.preventDefault();\n        const target = $(event.target);\n        if (target.hasClass(\"score-secondary\")) this.adjust_score(target, -1);\n        else this.toggle_custom(target);\n    }\n    /**\n\t * Handle clicks on secondary scores to increment them\n\t *\n\t * @param {Event} event\n\t * @return {Promise<void>}\n\t */ async on_score_increment(event) {\n        event.preventDefault();\n        const target = $(event.target);\n        if (target.hasClass(\"score-secondary\")) this.adjust_score(target, 1);\n    }\n    /**\n\t * Attach token, scene and/or actor IDs to the given dataset\n\t *\n\t * @param {{}} dataset\n\t */ attach_ids(dataset) {\n        // Attach token and scene ID, if available\n        if (this.token) {\n            dataset[\"tokenId\"] = this.token.id;\n            dataset[\"sceneId\"] = this.token.parent.id;\n        } else dataset[\"actorId\"] = this.actor.id;\n    }\n    /**\n\t * Adjust the actor's score by the given value. Usually used to increment or decrement.\n\t *\n\t * @param {JQuery} target\n\t * @param {number} mod\n\t */ adjust_score(target, mod) {\n        const score_name = target.attr(\"name\");\n        const score = this.get_score(score_name, []);\n        // Make the adjustment\n        const update_obj = {};\n        update_obj[score_name] = score + mod;\n        this.actor.update(update_obj);\n    }\n    /**\n\t * Toggle between custom mode and calculated mode for actor's score.\n\t *\n\t * @param {HTMLElement} element\n\t */ toggle_custom(element) {\n        const input = element.hasClass(\"score-input\") ? element : element.find(\".score-input\");\n        if (!input.length) return;\n        const score_name = input.attr(\"name\");\n        const score = this.get_score(score_name, [\n            \"max\",\n            \"value\",\n            \"tn\"\n        ]);\n        if (!score) return; // If the score was not found, do nothing\n        // Toggle custom value\n        input.prop(\"disabled\", !!score.custom);\n        const score_custom = this.get_score_custom(score_name);\n        const update_obj = {};\n        update_obj[score_custom] = !score.custom;\n        this.actor.update(update_obj);\n    }\n    /**\n\t * Get the score object for the actor\n\t *\n\t * @param {string} score_name\n\t * @param {string[]} ignore_array\n\t * @return {string|Actor}\n\t */ get_score(score_name, ignore_array) {\n        const path = score_name.split(\".\");\n        let pointer = this.actor;\n        for (const p of path){\n            if (pointer && !ignore_array.includes(p)) pointer = pointer[p] ? pointer[p] : null;\n            else return pointer;\n        }\n        return pointer;\n    }\n    /**\n\t * Get whether this particular score has custom mode set\n\t *\n\t * @param {string} score_name\n\t * @return {string}\n\t * @private\n\t */ get_score_custom(score_name) {\n        return score_name.substring(0, score_name.lastIndexOf(\".\")) + \".custom\";\n    }\n    /**\n\t * Send chatable item to group chat\n\t *\n\t * @param {SagaMachineItem} item\n\t */ to_chat(item) {\n        ChatMessage.create({\n            flavor: `<header class=\"item-header\"><img src=\"${item.img}\" alt=\"${item.name}\" /><h2>${item.name}</h2></header>`,\n            content: item.system.description,\n            speaker: ChatMessage.getSpeaker({\n                actor: this.actor\n            })\n        });\n    }\n    /**\n\t * When a roll label is clicked, open the test dialog\n\t *\n\t * @param event\n\t * @returns {Promise<void>}\n\t */ async on_test(event) {\n        event.preventDefault();\n        this.attach_ids(event.currentTarget.dataset); // Attach IDs to the dataset\n        await (0, $d5ef102242816c77$export$5803ef6f71bdd50f)(event.currentTarget.dataset); // Show the dialog\n    }\n}\nclass $05cfedbfc2cc6c3c$export$eaa36efd5f1a839 extends $05cfedbfc2cc6c3c$export$c7f6895f6cb1258b {\n    /**\n\t * Dynamically set the HTML template for the actor based on permissions and PC/NPC\n\t *\n\t * @returns {string}\n\t * @override\n     */ get template() {\n        if (!game.user.isGM && this.actor.limited) return \"systems/saga-machine/templates/actors/limited-sheet.html\";\n        if (this.actor.is_pc()) return `systems/saga-machine/templates/actors/pc-sheet.html`;\n        else return `systems/saga-machine/templates/actors/npc-sheet.html`;\n    }\n    /**\n\t * @inheritdoc\n\t * @override\n\t * */ getData() {\n        const context = super.getData();\n        // Organize inventory\n        context.data.system.equipment_groups = this.groups_and_containers({\n            context: context,\n            top_groups: [\n                \"Weapons\",\n                \"Armors\"\n            ],\n            blank: \"Miscellanea\"\n        });\n        context.data.system.attacks = this.gather_attacks(context); // Gather the list of attacks\n        this.calc_health_progress_bar(context); // Calculate health progress bar percentages\n        return context;\n    }\n    /**\n\t * @inheritDoc\n\t * @override\n\t */ activateListeners(html) {\n        super.activateListeners(html);\n        html.find(\".rollable\").click(this.on_test.bind(this)); // Open test dialog\n        html.find(\".score\").on(\"contextmenu\", this.on_score_toggle.bind(this)); // Toggle custom score mode on/off\n        html.find(\".score\").on(\"click\", this.on_score_increment.bind(this)); // Increment secondary score\n        html.find(\".item-equip\").click(this.on_item_equip.bind(this)); // Item equipping\n        html.find(\".item-carry\").click(this.on_item_carry.bind(this)); // Item carrying\n        html.find(\".items-inline > .item\").on(\"contextmenu\", this.on_npc_edit.bind(this)); // Open item on NPC sheet\n    }\n    /**\n\t * Equip or un-equip an item\n\t *\n\t * @param {Event} event\n\t * @return {Promise<void>}\n\t */ async on_item_equip(event) {\n        const box = $(event.currentTarget).parents(\".item\");\n        const item = this.actor.items.get(box.data(\"id\"));\n        const update = {\n            _id: item.id,\n            \"system.equipped\": !item.system.equipped\n        };\n        this.actor.updateEmbeddedDocuments(\"Item\", [\n            update\n        ]);\n    }\n    /**\n\t * Carry or un-carry an item\n\t *\n\t * @param {Event} event\n\t * @return {Promise<void>}\n\t */ async on_item_carry(event) {\n        const box = $(event.currentTarget).parents(\".item\");\n        const item = this.actor.items.get(box.data(\"id\"));\n        const update = {\n            _id: item.id,\n            \"system.carried\": !item.system.carried\n        };\n        this.actor.updateEmbeddedDocuments(\"Item\", [\n            update\n        ]);\n    }\n    /**\n\t * Open item dialogs on NPC sheet\n\t *\n\t * @param event\n\t * @return {Promise<void>}\n\t */ async on_npc_edit(event) {\n        event.preventDefault();\n        const box = $(event.currentTarget).closest(\".item\");\n        const item = this.actor.items.get(box.data(\"id\"));\n        item.sheet.render(true);\n    }\n    /**\n\t * Return list of all attacks provided by items\n\t *\n\t * @param {Context} context\n\t * @returns {Attack[]}\n\t * @private\n\t */ gather_attacks(context) {\n        const attacks = [];\n        const attack_items = context.actor.items.filter((item)=>item.system.attacks && item.system.attacks.length && (item.system.equipped || item.system.equipped === undefined));\n        for (let item of attack_items)for (let attack of item.system.attacks)attacks.push(new (0, $d5ef102242816c77$export$6191c3ac084cc81b)({\n            actor: this.actor,\n            item: item,\n            name: item.system.full_name,\n            type: item.type,\n            properties: item.system.properties || \"\",\n            ...attack\n        }));\n        return attacks;\n    }\n}\nclass $05cfedbfc2cc6c3c$export$9059fd0f09215233 extends $05cfedbfc2cc6c3c$export$c7f6895f6cb1258b {\n    /**\n\t * @inheritdoc\n\t * @override\n\t * */ getData() {\n        const context = super.getData();\n        // Organize inventory\n        context.data.system.equipment_groups = this.groups_and_containers({\n            context: context,\n            top_groups: [\n                \"Weapons\",\n                \"Armors\"\n            ],\n            blank: \"Miscellanea\"\n        });\n        return context;\n    }\n    /**\n\t * @inheritDoc\n\t * @override\n\t */ activateListeners(html) {\n        super.activateListeners(html);\n        html.find(\".distribute-money\").on(\"click\", this.distribute_money.bind(this)); // Distribute money\n    }\n    async distribute_money() {\n        const tokens = game?.canvas?.tokens?.controlled; // Get selected tokens\n        if (!tokens.length) return ui.notifications.warn(\"No valid character selected.\");\n        let money_remaining = this.actor.system.wealth.money % tokens.length; // Remaining on sheet\n        const money_each = Math.floor(this.actor.system.wealth.money / tokens.length); // Money for each actor\n        // Update selected actors\n        for (let token of tokens)if (token.actor.isOwner) token.actor.update({\n            \"system.wealth.money\": token.actor.system.wealth.money + money_each\n        });\n        else money_remaining += money_each;\n        // Update this actor\n        this.actor.update({\n            \"system.wealth.money\": money_remaining\n        });\n        // Report the exchange to chat\n        const target_names = \"<li>\" + tokens.map((t)=>`@UUID[${t.actor.uuid}]{${t.name}}`).join(\"</li><li>\") + \"</li>\";\n        ChatMessage.create({\n            content: `<strong>${money_each}\\xa4</strong> each distributed from @UUID[${this.actor.uuid}]{${this.actor.name}} to:<ul style=\"line-height: 1.7em\">${target_names}</ul>`\n        });\n    }\n}\nclass $05cfedbfc2cc6c3c$export$d55003dbaa27bba5 extends $05cfedbfc2cc6c3c$export$c7f6895f6cb1258b {\n    /**\n\t * @inheritdoc\n\t * @override\n\t * */ getData() {\n        const context = super.getData();\n        // Organize inventory\n        context.data.system.equipment_groups = this.groups_and_containers({\n            context: context,\n            top_groups: [\n                \"Vehicle Components\",\n                \"Trade Goods\"\n            ],\n            blank: \"Trade Goods\"\n        });\n        this.calc_health_progress_bar(context); // Calculate health progress bar percentages\n        this.calc_space_progress_bar(context); // Calculate space progress bar percentages\n        return context;\n    }\n    /**\n\t * @inheritDoc\n\t * @override\n\t */ activateListeners(html) {\n        super.activateListeners(html);\n        html.find(\".score\").on(\"contextmenu\", this.on_score_toggle.bind(this)); // Toggle custom score mode on/off\n        html.find(\".score\").on(\"click\", this.on_score_increment.bind(this)); // Increment secondary score\n        // Handle positions\n        this.draw_positions(html);\n        html.find(\".position-list .position-create\").click(this.add_position.bind(this));\n        html.find(\".position-list .position-delete\").click(this.delete_position.bind(this));\n    }\n    /**\n\t * Calculate space progress bar percentages\n\t *\n\t * @param {Context} context\n\t */ calc_space_progress_bar(context) {\n        if (!context.data.system.scores.space.max) context.data.system.scores.space.percent = 0;\n        else context.data.system.scores.space.percent = Math.round(context.data.system.scores.space.value / context.data.system.scores.space.max * 100);\n    }\n    /**\n\t * Add a position to the vehicle positions form\n\t */ add_position() {\n        if (!this.isEditable) return;\n        // Get the prototype position node and parent node, return if it wasn't found\n        const prototype = this.element.find(\".position.prototype\");\n        const parent = this.element.find(\"ol.position-list\");\n        if (!prototype || !prototype.length || !parent || !parent.length) return;\n        const clone = prototype.clone();\n        clone.removeClass(\"prototype\");\n        clone.find(\"input, select\").change(this.update_positions.bind(this));\n        parent.append(clone);\n    }\n    /**\n\t * Delete a position in the vehicle position form\n\t *\n\t * @param {Event} event\n\t */ delete_position(event) {\n        const box = $(event.currentTarget).closest(\".position\");\n        const position_list = box.closest(\".position-list\");\n        box.remove();\n        this.update_positions(event, position_list);\n    }\n    /**\n\t * Draw the vehicle positions form\n\t *\n\t * @param {JQuery} html\n\t */ draw_positions(html) {\n        // Don't draw positions if there are no positions\n        if (!this.actor.system.scores.crew.positions || !this.actor.system.scores.crew.positions.length) return;\n        // Get the prototype attack position and parent node, return if it wasn't found\n        const prototype = html.find(\".position.prototype\");\n        const parent = html.find(\"ol.position-list\");\n        if (!prototype || !prototype.length || !parent || !parent.length) return;\n        // For each position, clone the prototype and set up the form\n        for (let position of this.actor.system.scores.crew.positions){\n            const clone = prototype.clone();\n            clone.removeClass(\"prototype\");\n            clone.find(\"[name=position]\").val(position.position);\n            clone.find(\"[name=character]\").val(position.character);\n            parent.append(clone);\n            // Set up the data handlers for the form, if this sheet is editable\n            if (!this.isEditable) continue;\n            clone.find(\"input, select\").change(this.update_positions.bind(this));\n        }\n    }\n    /**\n     * Handle changes to the vehicle position form\n     *\n     * @param {Event} event\n\t * @param {JQuery|null} position_list\n     */ update_positions(event, position_list = null) {\n        event.preventDefault();\n        event.stopPropagation();\n        // Get all positions\n        const position_nodes = position_list ? position_list.find(\".position:not(.prototype)\") : $(event.currentTarget).closest(\"ol.position-list\").find(\".position:not(.prototype)\");\n        // Iterate over each node and add to the list\n        const positions = [];\n        position_nodes.each((i, node)=>{\n            let position = $(node).find(\"[name=position]\").val().trim();\n            let character = $(node).find(\"[name=character]\").val().trim();\n            // Create position, add name and properties if set, add to list\n            const position_object = {\n                position: position,\n                character: character\n            };\n            positions.push(position_object);\n            this.actor.update({\n                \"system.scores.crew.positions\": positions\n            });\n        });\n    }\n}\n\n\n\n\n/**\n * Extend the base Item class to support the Saga Machine system\n */ class $3e4d69c777799744$export$471af1c74e831048 extends Item {\n    /**\n     * @inheritdoc\n     * @override\n     */ async prepareDerivedData() {\n        super.prepareDerivedData();\n        // Don't derive properties for items you don't own or which haven't been saved to the db\n        if (!this.actor || !this.actor.isOwner || !this.id || !this.actor.items.get(this.id)) return;\n        // Derive the full name from the base name and specialization\n        this.full_name();\n        // Parse the submitted property string into an array and set various derived values\n        this.parse_properties();\n    }\n    /**\n     * Code to run when a new SagaMachineItem is created - changes default icon\n     *\n     * @override\n     */ async _onCreate(data, options, userId) {\n        await super._onCreate(data, options, userId);\n        // Return if you're not the owner of this item, or it hasn't been saved to the database\n        if (!this.isOwner || !this.id) return;\n        // Set new default icons\n        if (data.img === foundry.documents.BaseItem.DEFAULT_ICON) {\n            if (this.type === \"skill\") this.update({\n                \"img\": \"systems/saga-machine/images/defaults/skill.svg\"\n            });\n            if (this.type === \"trait\") this.update({\n                \"img\": \"systems/saga-machine/images/defaults/trait.svg\"\n            });\n            if (this.type === \"origin\") this.update({\n                \"img\": \"systems/saga-machine/images/defaults/origin.svg\"\n            });\n            if (this.type === \"path\") this.update({\n                \"img\": \"systems/saga-machine/images/defaults/path.svg\"\n            });\n            if (this.type === \"ambition\") this.update({\n                \"img\": \"systems/saga-machine/images/defaults/ambition.svg\"\n            });\n            if (this.type === \"consequence\") this.update({\n                \"img\": \"systems/saga-machine/images/defaults/consequence.svg\"\n            });\n        }\n    }\n    /**\n     * Derive the full name from the base name and specialization\n     */ full_name() {\n        let full_name = this.name + (this.system.specialized ? ` (${this.system.specialization})` : \"\");\n        if (this.type === \"trait\" && this.system.ranked) full_name += ` ${this.system.rank}`;\n        this.system.full_name = full_name;\n    }\n    /**\n     * Parse the submitted property string into an array\n     */ parse_properties() {\n        // Only do this for equipment\n        if (this.type !== \"item\") return;\n        // Parse string into an array\n        if (typeof this.system.properties === \"string\") this.system.properties = this.system.properties.split(\",\").map((t)=>t.trim());\n        this.system.container = this.property_value(\"Container\");\n        this.system.armor = this.property_value(\"Armor\");\n        this.system.bulky = this.property_value(\"Bulky\");\n        this.system.powered = this.property_value(\"Powered\");\n        this.system.hands = this.property_value(\"Hands\") || 1;\n        this.system.unit_encumbrance = this.calc_unit_encumbrance();\n        this.system.container_encumbrance = this.calc_container_encumbrance();\n        this.system.encumbrance = this.calc_encumbrance();\n        this.system.unit_loads = this.calc_unit_loads();\n        this.system.loads = this.calc_loads();\n    }\n    /**\n     * Obtains the value of the given property, defaulting to 0 is unspecified\n     *\n     * @param {string} property\n     * @return {number}\n     */ property_value(property) {\n        for (const prop of this.system.properties)if (prop.toLowerCase().startsWith(`${property.toLowerCase()} `)) {\n            const [p, val] = prop.split(\" \");\n            return Number(val);\n        }\n        return 0;\n    }\n    /**\n     * Removes an item from its parent container\n     *\n     * @return {Promise<void>}\n     */ async remove_from_container() {\n        if (this.type === \"item\") this.update({\n            \"system.parent\": null\n        });\n    }\n    /**************************************\n     * METHODS THAT DEAL WITH ENCUMBRANCE *\n     **************************************/ /**\n     * Calculate the encumbrance per item, taking all item properties into account\n     *\n     * @return {number}\n     */ calc_unit_encumbrance() {\n        if (this.system.load) return 100;\n        else if (this.system.properties.includes(\"Neg\")) return 0;\n        else {\n            for (const prop of this.system.properties){\n                if (prop.startsWith(\"Implant \")) return 0;\n                if (prop.startsWith(\"Software \")) return 0;\n                if (prop.startsWith(\"Big \")) {\n                    const [big, val] = prop.split(\" \");\n                    return Number(val);\n                }\n            }\n            return 1;\n        }\n    }\n    /**\n     * Calculates the loads per unit.\n     * Loads are Encumbrance 100 and are used in the trading and vehicles sub-systems.\n     *\n     * @return {number}\n     */ calc_unit_loads() {\n        return this.system.unit_encumbrance / 100;\n    }\n    /**\n     * Calculate the encumbrance value of the stack in regards to how much container space it takes.\n     *\n     * @return {number}\n     */ calc_container_encumbrance() {\n        return this.system.unit_encumbrance * this.system.quantity;\n    }\n    /**\n     * Calculate the encumbrance value of the stack, taking into account item properties,\n     * quantity and whether the item is equipped.\n     *\n     * @return {number}\n     */ calc_encumbrance() {\n        if (!this.system.carried) return 0;\n        if (this.system.parent) return 0;\n        if (this.system.equipped && this.system.properties.includes(\"Worn\")) return 0;\n        return this.system.unit_encumbrance * this.system.quantity;\n    }\n    /**\n     * Calculate the number of loads in the stack.\n     * Loads are Encumbrance 100 and are used in the trading and vehicles sub-systems.\n     *\n     * @return {number}\n     */ calc_loads() {\n        return Math.floor(this.system.unit_loads * this.system.quantity);\n    }\n}\n\n\n/**\n * Extend the basic ItemSheet with some very simple modifications\n */ class $061a343a3435629e$export$11dc603c5bc66ba5 extends ItemSheet {\n    /**********************************\n     * METHODS THAT SET BASIC OPTIONS *\n     **********************************/ /**\n\t * The default options for item sheets\n\t *\n\t * @override\n\t * @returns {DocumentSheetOptions}\n\t * */ static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\n                \"saga-machine\",\n                \"sheet\",\n                \"item\"\n            ],\n            width: 600,\n            height: 360,\n            tabs: [\n                {\n                    navSelector: \".sheet-tabs\",\n                    contentSelector: \".sheet-body\",\n                    initial: \"basics\"\n                }\n            ],\n            scrollY: [\n                \".basics\",\n                \".attacks\",\n                \"effects\",\n                \".description\"\n            ]\n        });\n    }\n    /**\n     * Dynamically set the HTML template for the item type\n     *\n     * @returns {string}\n     */ get template() {\n        return `systems/saga-machine/templates/items/${this.item.type}-sheet.html`;\n    }\n    /**********************************\n     * METHODS THAT HANDLE SHEET DATA *\n     **********************************/ /**\n\t * @inheritdoc\n\t * @override\n\t * @return Context\n\t * */ getData() {\n        const context = super.getData();\n        if (this.item.type === \"origin\" || this.item.type === \"path\") {\n            context.data.system.skills_provided = this.items_provided(\"skill\", context.data.system.skills);\n            context.data.system.traits_provided = this.items_provided(\"trait\", context.data.system.traits);\n            context.data.system.equipment_provided = this.items_provided(\"item\", context.data.system.equipment);\n        }\n        return context;\n    }\n    /****************************************\n     * METHODS THAT SET SHEET INTERACTIVITY *\n     ****************************************/ /**\n\t * @inheritdoc\n\t * @override\n\t * @param {JQuery} html\n\t * */ activateListeners(html) {\n        super.activateListeners(html);\n        // Everything below here is only needed if the sheet is editable\n        if (!this.isEditable) return;\n        // Toggle edit/display of provided fields in origins/paths\n        html.find(\".items-provided\").on(\"contextmenu\", this.toggle_items_provided.bind(this));\n        html.find(\".effect-create\").on(\"click\", this.on_create_effect.bind(this)); // Create active effect\n        html.find(\".effect-edit\").on(\"click\", this.on_edit_effect.bind(this)); // Open active effect sheet\n        html.find(\".effect-delete\").on(\"click\", this.on_delete_effect.bind(this)); // Delete active effect\n        html.find(\".effect-toggle\").on(\"click\", this.on_toggle_effect.bind(this)); // Toggle effect on/off\n        // Handle attacks\n        this.draw_attacks(html);\n        html.find(\".attacks .item-create\").click(this.add_attack.bind(this));\n        html.find(\".attacks .item-delete\").click(this.delete_attack.bind(this));\n    }\n    /**\n     * Toggle edit/display of provided fields in origins/paths\n     *\n     * @param {Event} event\n     */ toggle_items_provided(event) {\n        event.preventDefault();\n        const target = $(event.target);\n        target.parent().find(\".items-provided\").each((i, e)=>{\n            if ($(e).is(\":visible\")) e.style.display = \"none\";\n            else e.style.display = \"block\";\n        });\n    }\n    /**************************************\n     * METHODS THAT HANDLE ACTIVE EFFECTS *\n     **************************************/ /**\n     * Handle creating active effects\n     *\n     * @param {Event} event\n     * @return {Promise<void>}\n     */ async on_create_effect(event) {\n        event.preventDefault();\n        return await ActiveEffect.create({\n            name: \"New Effect\"\n        }, {\n            parent: this.item\n        });\n    }\n    /**\n     * Handle editing active effects\n     *\n     * @param {Event} event\n     * @return {Promise<void>}\n     */ async on_edit_effect(event) {\n        const box = $(event.target).closest(\".effect\");\n        const id = box.data(\"id\");\n        const name = box.data(\"name\");\n        const effect = id ? this.item.effects.get(id) : this.item.effects.getName(name);\n        if (effect) effect.sheet.render(true);\n    }\n    /**\n     * Handle deleting active effects\n     *\n     * @param {Event} event\n     * @return {Promise<void>}\n     */ async on_delete_effect(event) {\n        const box = $(event.target).closest(\".effect\");\n        const id = box.data(\"id\");\n        const name = box.data(\"name\");\n        const effect = id ? this.item.effects.get(id) : this.item.effects.getName(name);\n        effect.delete();\n        box.slideUp(200, ()=>this.render(false));\n    }\n    /**\n     * Effect activate / disabled\n     *\n     * @param {Event} event\n     * @return {Promise<void>}\n     */ async on_toggle_effect(event) {\n        const box = $(event.target).closest(\".effect\");\n        const id = box.data(\"id\");\n        const name = box.data(\"name\");\n        const effect = id ? this.item.effects.get(id) : this.item.effects.getName(name);\n        effect.update({\n            \"disabled\": !effect.disabled\n        });\n    }\n    /*******************************\n     * METHODS THAT HANDLE ATTACKS *\n     *******************************/ /**\n     * Render the list of attacks\n     *\n     * @param {JQuery} html\n     */ draw_attacks(html) {\n        // Don't draw attacks if there are no attacks\n        if (!this.item.system.attacks || !this.item.system.attacks.length) return;\n        // Get the prototype attack node and parent node, return if it wasn't found\n        const prototype = html.find(\".attack.prototype\");\n        const parent = html.find(\"ol.attack-list\");\n        if (!prototype || !prototype.length || !parent || !parent.length) return;\n        // For each attack, clone the prototype and set up the form\n        for (let attack of this.item.system.attacks){\n            const clone = prototype.clone();\n            clone.removeClass(\"prototype\");\n            clone.find(\"[name=attack_name]\").val(attack.name);\n            clone.find(\"[name=stat]\").val(attack.stat);\n            clone.find(\"[name=skill]\").val(attack.skill);\n            clone.find(\"[name=damage]\").val(this.find_damage(attack));\n            clone.find(\"[name=damage_type]\").val(this.find_damage_type(attack));\n            clone.find(\"[name=targets]\").val(attack.tn);\n            clone.find(\"[name=properties]\").val(attack.properties);\n            clone.find(\"[name=consequences]\").val(this.find_consequences(attack));\n            parent.append(clone);\n            // Set up the data handlers for the form, if this sheet is editable\n            if (!this.isEditable) continue;\n            clone.find(\"input, select\").change(this.update_attacks.bind(this));\n        }\n    }\n    /**\n     * Add a new attack to the list\n     */ add_attack() {\n        if (!this.isEditable) return;\n        // Get the prototype attack node and parent node, return if it wasn't found\n        const prototype = this.element.find(\".attack.prototype\");\n        const parent = this.element.find(\"ol.attack-list\");\n        if (!prototype || !prototype.length || !parent || !parent.length) return;\n        const clone = prototype.clone();\n        clone.removeClass(\"prototype\");\n        clone.find(\"input, select\").change(this.update_attacks.bind(this));\n        parent.append(clone);\n    }\n    /**\n     * Delete an attack from the list\n     *\n     * @param {Event} event\n     */ delete_attack(event) {\n        const box = $(event.currentTarget).closest(\".attack\");\n        const attack_list = box.closest(\".attack-list\");\n        box.remove();\n        this.update_attacks(event, attack_list);\n    }\n    /**\n     * Handle changes to the attack form\n     *\n     * @param {Event} event\n     * @param {JQuery} attack_list\n     */ update_attacks(event, attack_list = null) {\n        event.preventDefault();\n        event.stopPropagation();\n        // Get all attacks\n        const attack_nodes = attack_list ? attack_list.find(\".attack:not(.prototype)\") : $(event.currentTarget).closest(\"ol.attack-list\").find(\".attack:not(.prototype)\");\n        // Iterate over each node and add to the list\n        const attacks = [];\n        attack_nodes.each((i, node)=>{\n            let name = $(node).find(\"[name=attack_name]\").val().trim();\n            let stat = $(node).find(\"[name=stat]\").val().trim();\n            let skill = $(node).find(\"[name=skill]\").val().trim();\n            let properties = $(node).find(\"[name=properties]\").val().trim();\n            let damage = $(node).find(\"[name=damage]\").val().trim();\n            let damage_type = $(node).find(\"[name=damage_type]\").val().trim();\n            let targets = $(node).find(\"[name=targets]\").val().trim();\n            let consequences = $(node).find(\"[name=consequences]\").val().trim();\n            if (!stat) return; // Don't add if no stat is specified\n            // Create attack, add name and properties if set, add to list\n            const attack = {\n                stat: stat,\n                skill: skill,\n                tn: targets,\n                effects: this.create_effects(damage, damage_type, consequences)\n            };\n            if (name) attack[\"name\"] = name;\n            if (properties) attack[\"properties\"] = properties;\n            attacks.push(attack);\n            this.item.update({\n                \"system.attacks\": attacks\n            });\n        });\n    }\n    /**\n     * Get the attack's damage\n     *\n     * @param {Attack} attack\n     * @return {string}\n     */ find_damage(attack) {\n        return this.search_effects(attack, \"damage\", \"value\");\n    }\n    /**\n     * Get the attack's damage type\n     * @param {Attack} attack\n     * @return {string}\n     */ find_damage_type(attack) {\n        return this.search_effects(attack, \"damage\", \"damage_type\");\n    }\n    /**\n     * Get any consequences imposed with a successful attack\n     *\n     * @param {Attack} attack\n     * @return {string}\n     */ find_consequences(attack) {\n        return this.search_effects(attack, \"consequence\", \"name\", true);\n    }\n    /**\n     * Search those all effects imposed by the attack and return those matching the specified type\n     *\n     * @param {Attack} attack - The Attack object to search\n     * @param {string} type - The type of the Effect object\n     * @param {string} property - The property of the object containing the desired value\n     * @param {boolean} find_all - Whether to return all instances of the matching type or only the first\n     * @return {string}\n     */ search_effects(attack, type, property, find_all = false) {\n        // Ensure that effects are in the right format\n        if (!attack.effects || !attack.effects.length) return \"\";\n        let parsed_effects = typeof attack.effects === \"string\" ? JSON.parse(attack.effects) : attack.effects;\n        parsed_effects = Array.isArray(parsed_effects) ? parsed_effects : [\n            parsed_effects\n        ];\n        const all_found = [];\n        for (let con of parsed_effects)if (con.type === type) {\n            let found = con[property];\n            if (found === undefined || found === null) found = \"\";\n            if (!find_all) return found;\n            else all_found.push(found);\n        }\n        return all_found.join(\", \");\n    }\n    /**\n     * Create new Effect objects for the entered damage and consequences\n     *\n     * @param {string} damage - The damage to apply\n     * @param {string} damage_type - The damage type in abbreviated format (e.g. cut, pi, sm)\n     * @param {string} consequences - The names of any consequences to impose\n     * @return {Effect[]}\n     */ create_effects(damage, damage_type, consequences) {\n        const effects_list = [];\n        if (damage !== \"\") effects_list.push({\n            type: \"damage\",\n            value: damage,\n            damage_type: damage_type,\n            when: \"success\"\n        });\n        if (consequences !== \"\") {\n            const all_consequences = consequences.split(\",\").map((c)=>c.trim());\n            for (let con of all_consequences)effects_list.push({\n                type: \"consequence\",\n                name: con,\n                when: \"success\"\n            });\n        }\n        return effects_list;\n    }\n    /****************************************\n     * METHODS THAT SUPPORT ORIGINS / PATHS *\n     ****************************************/ /**\n     * Parses items in the provided fields of origins and paths\n     *\n     * @param {string} type - The type of SagaMachineItem\n     * @param {string} property - The comma separated list of items to parse\n     * @return {string}\n     */ items_provided(type, property) {\n        if (!property) return \"&horbar;\";\n        const return_list = [];\n        const items_array = property.split(\",\").map((t)=>t.trim());\n        for (let raw_name of items_array){\n            const match = this.matching_item(type, raw_name);\n            const [item, name, specialization, rank] = [\n                match.item,\n                match.name,\n                match.specialization,\n                match.rank\n            ];\n            if (!item) return_list.push(`<a class=\"content-link broken\" draggable=\"true\" data-type=\"${type}\" data-name=\"${name}\" data-specialization=\"${specialization}\" data-rank=\"${rank}\"><i class=\"fas fa-unlink\"></i>${raw_name}</a>`);\n            else return_list.push(`<a class=\"content-link\" draggable=\"true\" data-uuid=\"${item.uuid}\" data-id=\"${item.id}\" data-type=\"Item\" data-specialization=\"${specialization}\" data-rank=\"${rank}\" data-tooltip=\"Item\"><i class=\"fas fa-suitcase\"></i>${raw_name}</a>`);\n        }\n        return return_list.join(\", \");\n    }\n    /**\n     * Find the SagaMachineItem that matches the name and specialization\n     *\n     * @param {string} type - The SagaMachineItem type\n     * @param {string} raw_name - The raw name in \"Name (Specialization) Rank\" format\n     * @return {{item: SagaMachineItem, name:string, specialization: string, rank: number|string}}\n     */ matching_item(type, raw_name) {\n        // Extract rank\n        let parts = raw_name.split(\" \");\n        let rank = parts[parts.length - 1];\n        if (isNaN(Number(rank))) rank = \"\";\n        // Extract specialization, if any\n        let specialization = raw_name.match(/\\(([^\\)]+)\\)/);\n        if (specialization) specialization = specialization[specialization.length - 1];\n        else specialization = \"\";\n        // Extract name\n        let name = raw_name.slice(0, raw_name.length - rank.length);\n        parts = name.split(\"(\");\n        if (parts.length > 1) name = parts[0];\n        name = name.trim();\n        // Query for matching items, return null if not found\n        const matches = game.items.filter((i)=>i.type === type && i.name === name);\n        if (matches.length) return {\n            item: matches[0],\n            name: name,\n            specialization: specialization,\n            rank: rank\n        };\n        else return {\n            item: null,\n            name: name,\n            specialization: specialization,\n            rank: rank\n        };\n    }\n}\n\n\n\n\n\nasync function $a856728f05f0c624$export$ed3f1528e78b2d0c(data, slot) {\n    // Only create macro for tests\n    if (data.type !== \"Test\") return;\n    // Verify that the actor may be retrieved\n    const actor = (0, $ba32b9ea93ee5c3a$export$99454b2c58b3846f)({\n        scene_id: data[\"sceneId\"],\n        token_id: data[\"tokenId\"],\n        actor_id: data[\"actorId\"]\n    });\n    if (!actor) return ui.notifications.warn(\"You can only create macro buttons for known actors\");\n    // Generate the test label\n    const test = new (0, $d5ef102242816c77$export$1b16fc9eb974a84d)({\n        actor: actor,\n        stat: data[\"stat\"] || data[\"score\"],\n        skill: data[\"skill\"],\n        tn: data[\"tn\"]\n    });\n    const label = test.label;\n    // Get the icon, if any\n    let skill = null;\n    if (!!data[\"skill\"]) skill = game.items.find((i)=>i.name === data[\"skill\"] && i.type === \"skill\");\n    // Create the macro command\n    const data_string = JSON.stringify(data);\n    const command = `game.sagamachine.sm_test_macro(${data_string});`;\n    let macro = game.macros.find((m)=>m.name === label && m.command === command);\n    let macro_spec = {\n        name: label,\n        type: \"script\",\n        command: command,\n        flags: {\n            \"sagamachine.sm_test_macro\": true\n        }\n    };\n    if (skill) macro_spec[\"img\"] = skill.img;\n    if (!macro) macro = await Macro.create(macro_spec);\n    // Assign to the hotbar\n    await game.user.assignHotbarMacro(macro, slot);\n    return false;\n}\nasync function $a856728f05f0c624$export$4ae6666db41501cf(dataset) {\n    // Get the actor from any embedded IDs\n    let actor = (0, $ba32b9ea93ee5c3a$export$99454b2c58b3846f)({\n        scene_id: dataset[\"sceneId\"],\n        token_id: dataset[\"tokenId\"],\n        actor_id: dataset[\"actorId\"]\n    });\n    // If no actor is available, look up using the speaker\n    if (!actor) {\n        const speaker = ChatMessage.getSpeaker();\n        if (speaker.token) actor = game.actors.tokens[speaker.token];\n        if (!actor) actor = game.actors.get(speaker.actor);\n        dataset[\"actorId\"] = actor.id;\n    }\n    await (0, $d5ef102242816c77$export$5803ef6f71bdd50f)(dataset);\n}\n\n\n\n\nasync function $af2e12063643503f$export$3d7f02c9b93e6b0(html) {\n    if (!html.find(\".damage\").length) return; // Do nothing if no damage to attach\n    // Is the first hit a critical hit?\n    let critical = !!html.find(\".critical\").length;\n    // Gather data for all hits\n    const hits = [];\n    html.find(\".damage\").each((i, e)=>{\n        const damage = Number($(e).text());\n        const damage_type = $(e).parent().find(\".damage-type\").text();\n        const pierce_armor = Number($(e).data(\"pierce\")) || 0;\n        hits.push({\n            damage: damage,\n            damageType: damage_type,\n            critical: critical,\n            pierce: pierce_armor\n        });\n        critical = false; // Subsequent hits aren't critical\n    });\n    // Attach drag listener\n    html[0].setAttribute(\"draggable\", true); // Add draggable and dragstart listener\n    html[0].addEventListener(\"dragstart\", (ev)=>{\n        ev.currentTarget.dataset[\"hits\"] = JSON.stringify(hits);\n        ev.dataTransfer.setData(\"text/plain\", JSON.stringify({\n            hits: hits\n        }));\n    }, false);\n}\nasync function $af2e12063643503f$export$a54b240a5cfd4caf(actor, data) {\n    if (data[\"hits\"]) for (let hit of data[\"hits\"])await actor.apply_damage(hit[\"damage\"], hit[\"damageType\"], hit[\"critical\"], hit[\"pierce\"]);\n}\nasync function $af2e12063643503f$export$d9445ce8959d2e19(options) {\n    options.push({\n        name: \"Push Your Luck\",\n        icon: '<i class=\"fas fa-dice\"></i>',\n        condition: (html)=>!!html.find(\".test-json\").length,\n        callback: async (html)=>{\n            // Recreate test object from json\n            const test = (0, $d5ef102242816c77$export$1b16fc9eb974a84d).from_json(JSON.parse(html.find(\".test-json\").val()));\n            // Check for ownership\n            if (!test?.actor?.isOwner) return ui.notifications.warn(\"You can't Push Your Luck for this character.\");\n            // Check for enough luck\n            if (test?.actor?.system?.scores?.luck?.value <= 0) return ui.notifications.warn(\"The character doesn't have enough Luck.\");\n            // Add additional boon, mark luck tag and re-evaluate\n            test.boons++;\n            test.use_luck = true;\n            await test.evaluate();\n            // Decrement luck\n            test.actor.update({\n                \"system.scores.luck.value\": test.actor.system.scores.luck.value - 1\n            });\n            // Apply any immediate test consequences\n            await test.apply_effects();\n            // Display the new chat card\n            await test.to_chat({\n                whisper: html.hasClass(\"whisper\"),\n                rolls: [\n                    test.results\n                ]\n            });\n        }\n    });\n}\nasync function $af2e12063643503f$export$220dda78442aea07(options) {\n    options.push({\n        name: \"Apply Damage\",\n        icon: '<i class=\"fas fa-user-minus\"></i>',\n        condition: (html)=>!!html.find(\".damage\").length,\n        callback: (html)=>{\n            // Get all selected tokens\n            let tokens = game?.canvas?.tokens?.controlled;\n            // If there are no valid tokens, and you are the GM, give a warning\n            if (!tokens.length && game.user.isGM) {\n                ui.notifications.warn(\"No valid character selected.\");\n                return;\n            }\n            // Filter for owned token actors, falling back to player character is none are selected\n            let valid_tokens = tokens.filter((t)=>t?.document?.actor?.isOwner);\n            if (!valid_tokens.length && game.user.character) valid_tokens = [\n                game.user.character\n            ];\n            // For all valid actors\n            for (let token of valid_tokens){\n                let actor = token?.document?.actor;\n                if (actor && actor.isOwner) {\n                    // Is the first hit a critical hit?\n                    let critical = !!html.find(\".critical\").length;\n                    // Apply each damage\n                    html.find(\".damage\").each((i, e)=>{\n                        const damage = Number($(e).text());\n                        const damage_type = $(e).parent().find(\".damage-type\").text();\n                        const pierce_armor = Number($(e).data(\"pierce\")) || 0;\n                        actor.apply_damage(damage, damage_type, critical, pierce_armor);\n                        critical = false; // Subsequent hits aren't critical\n                    });\n                }\n            }\n        }\n    });\n}\nasync function $af2e12063643503f$export$5386e3bdcb090884(options) {\n    options.push({\n        name: \"Edit Results\",\n        icon: '<i class=\"fa fa-edit\"></i>',\n        condition: (html)=>game.user.isGM,\n        callback: (html)=>{\n            const message_id = html.data(\"messageId\");\n            const test = (0, $d5ef102242816c77$export$1b16fc9eb974a84d).from_json(JSON.parse(html.find(\".test-json\").val()));\n            // Open edit dialog\n            new Dialog({\n                title: `Edit Results`,\n                content: `\n                    <form class=\"saga-machine\">\n                        <div class=\"form-group\">\n                            <label for=\"critical\">Success</label>\n                            <input type=\"checkbox\" name=\"success\" ${test.success ? \"checked\" : \"\"}>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"critical\">Critical</label>\n                            <input type=\"checkbox\" name=\"critical\" ${test.critical ? \"checked\" : \"\"}>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"value\">Margin</label>\n                            <input type=\"number\" name=\"margin\" value=\"${test.margin}\" autofocus>\n                        </div>\n                        <div class=\"sheet-body\">\n                            <ol class=\"items-list consequence-list\">\n                                <li class=\"item flexrow items-header consequence-row\">\n                                    <div class=\"item-name\">Type</div>\n                                    <div class=\"item-name\">Value</div>\n                                    <div class=\"item-controls\">\n                                        <a class=\"item-control item-create\" title=\"Create effect\"><i class=\"fas fa-plus\"></i> Add</a>\n                                    </div>\n                                </li>\n                \n                                <li class=\"item flexrow consequence consequence-row prototype\">\n                                    <select class=\"item-input item-name\" name=\"type\">\n                                        <option value=\"damage\">Damage</option>\n                                        <option value=\"consequence\">Consequence</option>\n                                        <option value=\"defense\">Defense</option>\n                                        <option value=\"message\">Message</option>\n                                    </select>\n                                    <input class=\"item-input item-name\" type=\"text\" name=\"value\" value=\"\" />\n                                    <div class=\"item-controls\">\n                                        <a class=\"item-control item-delete\" title=\"Delete Item\"><i class=\"fas fa-trash\"></i></a>\n                                    </div>\n                                </li>\n                            </ol>\n                        </div>\n                    </form>`,\n                render: (html)=>{\n                    // Fill out existing consequences\n                    if (test.effects && test.effects.length) {\n                        // Get the prototype consequence node and parent node\n                        const prototype = html.find(\".consequence.prototype\");\n                        const parent = html.find(\"ol.consequence-list\");\n                        // For each effect, clone the prototype and set up the form\n                        for (let effect of test.effects){\n                            let value = null;\n                            switch(effect.type){\n                                case \"consequence\":\n                                    value = effect.name;\n                                    break;\n                                case \"damage\":\n                                    value = `${Number(effect.value) + (Number(effect.margin) || Number(test.margin))} ${effect.damage_type} ${effect.properties}`;\n                                    break;\n                                case \"message\":\n                                    value = `${effect.key}: ${effect.value}`;\n                                    break;\n                                default:\n                                    value = \"\";\n                            }\n                            const clone = prototype.clone();\n                            clone.removeClass(\"prototype\");\n                            clone.find(\"[name=type]\").val(effect.type);\n                            clone.find(\"[name=value]\").val(value);\n                            parent.append(clone);\n                        }\n                    }\n                    html.find(\".consequence-list .item-create\").click((event)=>{\n                        // Get the prototype consequence node and parent node, return if it wasn't found\n                        const prototype = html.find(\".consequence.prototype\");\n                        const parent = html.find(\"ol.consequence-list\");\n                        if (!prototype || !prototype.length || !parent || !parent.length) return;\n                        const clone = prototype.clone();\n                        clone.removeClass(\"prototype\");\n                        clone.find(\".item-delete\").click((event)=>$(event.currentTarget).closest(\".consequence\").remove());\n                        parent.append(clone);\n                    });\n                    html.find(\".consequence-list .item-delete\").click((event)=>$(event.currentTarget).closest(\".consequence\").remove());\n                },\n                buttons: {\n                    Edit: {\n                        icon: \"<i class='fas fa-check'></i>\",\n                        label: \"OK\",\n                        callback: async (html)=>{\n                            // Set values based on the contents of the form\n                            test.success = html.find(\"input[name=success]\").is(\":checked\");\n                            test.critical = html.find(\"input[name=critical]\").is(\":checked\");\n                            test.margin = Number(html.find(\"input[name=margin]\").val());\n                            test.edited = true;\n                            const effects = [];\n                            html.find(\".consequence:not(.prototype)\").each((i, e)=>{\n                                const type = $(e).find(\"select[name=type]\").val();\n                                const value = $(e).find(\"input[name=value]\").val();\n                                const params = {};\n                                if (type === \"consequence\") params.name = value.trim();\n                                else if (type === \"message\") {\n                                    const parts = value.split(\": \");\n                                    if (parts.length >= 2) [params.key, params.value] = [\n                                        parts[0],\n                                        parts[1]\n                                    ];\n                                    else [params.key, params.value] = [\n                                        \"Message\",\n                                        parts[0]\n                                    ];\n                                } else if (type === \"damage\") {\n                                    const parts = value.split(\" \");\n                                    params.value = Number(parts?.[0]) - test.margin;\n                                    params.damage_type = parts?.[1];\n                                    if (parts.length >= 3) params.properties = (0, $d5ef102242816c77$export$6191c3ac084cc81b).parse_properties(parts.slice(2).join(\" \"));\n                                }\n                                const effect = new (0, $30134fcb90c67fad$export$a32b0b1c1ac59d04)({\n                                    type: type,\n                                    ...params\n                                }, test);\n                                effect.apply(test.success ? \"success\" : \"failure\");\n                                effects.push(effect);\n                                test.effects = effects;\n                            });\n                            // Save edited card\n                            await ChatMessage.updateDocuments([\n                                {\n                                    _id: message_id,\n                                    content: test.content(),\n                                    flavor: test.flavor()\n                                }\n                            ], {});\n                        }\n                    }\n                }\n            }).render(true);\n        }\n    });\n}\n\n\nasync function $9d141e3789e0b83b$export$a6324e54748ebe3(actor, change, options, id) {\n    // Add or remove Hindered consequences for encumbrance\n    if (game.user.id === id && actor.type === \"character\") await actor.encumbrance_consequences();\n    // Update the combat initiative if the actor has changed its turn type\n    if (game.user.id === id && game.combat && (game.user.isGM || actor.isOwner)) game.combat.update_combatant_initiative(actor, change?.system?.fast_turn);\n}\nasync function $9d141e3789e0b83b$export$4bf3fd4b252a8de8(item, options, id) {\n    /* Calls for items */ // Add or remove Hindered consequences for encumbrance\n    if (game.user.id === id && item.parent && item.parent.type === \"character\" && item.type === \"item\") await item.parent.encumbrance_consequences();\n    // If this was dragged from a container, remove the container as a parent\n    if (game.user.id === id && item.parent && item.type === \"item\" && item.system.parent) await item.remove_from_container();\n    /* Calls for consequences */ // Sync consequences with status effects\n    if (game.user.id === id && item.type === \"consequence\" && item.parent) await (0, $d200992a7286a1e5$export$bce7246a7036e38)(item.parent);\n}\nasync function $9d141e3789e0b83b$export$38a029996c573874(item, change, options, id) {\n    /* Calls for items */ // Add or remove Hindered consequences for encumbrance\n    if (game.user.id === id && item.parent && item.parent.type === \"character\" && item.type === \"item\") await item.parent.encumbrance_consequences();\n    /* Calls for consequences */ // Sync consequences with status effects\n    if (game.user.id === id && item.type === \"consequence\" && item.parent) await (0, $d200992a7286a1e5$export$bce7246a7036e38)(item.parent);\n}\nasync function $9d141e3789e0b83b$export$4a9b7a56f490dcad(item, options, id) {\n    /* Calls for items */ // Add or remove Hindered consequences for encumbrance\n    if (game.user.id === id && item.parent && item.parent.type === \"character\" && item.type === \"item\") await item.parent.encumbrance_consequences();\n    /* Calls for consequences */ // Sync consequences with status effects\n    if (game.user.id === id && item.type === \"consequence\" && item.parent) await (0, $d200992a7286a1e5$export$bce7246a7036e38)(item.parent);\n}\nfunction $9d141e3789e0b83b$export$9dc996de602aaf4f(effect, data, options, id) {\n    let continue_forward = true;\n    // If creating an effect on an actor which came from an item, replace @ variables with correct value\n    if (game.user.id === id && effect.modifiesActor && effect.parent && effect.parent.type === \"character\" && effect.origin) (0, $d200992a7286a1e5$export$7801755dddf1fd51)(effect);\n    return continue_forward;\n}\nasync function $9d141e3789e0b83b$export$d367f85a279edb03(effect, options, id) {\n    // If this is a status applied directly from the UI\n    if (game.user.id === id && !effect.origin && effect.statuses?.size && effect.target) await (0, $d200992a7286a1e5$export$31930d543788113d)(effect);\n    // Creating an effect on an item which belongs to an actor\n    if (game.user.id === id && !effect.modifiesActor && effect.transfer && effect.parent && effect.parent.parent && effect.parent.parent.type === \"character\") await (0, $d200992a7286a1e5$export$40b3570d78570c16)(effect.parent);\n}\nasync function $9d141e3789e0b83b$export$60945f152bbb5568(effect, change, options, id) {\n    // Updating an effect on an item which belongs to an actor\n    if (game.user.id === id && !effect.modifiesActor && effect.transfer && effect.parent && effect.parent.parent && effect.parent.parent.type === \"character\") await (0, $d200992a7286a1e5$export$40b3570d78570c16)(effect.parent);\n}\nfunction $9d141e3789e0b83b$export$7e03fe5bbd47fde3(effect, options, id) {\n    let continue_forward = true;\n    // If using the status UI to delete a consequence with a subject, stop and prompt\n    if (game.user.id === id && !effect.origin && effect.statuses?.size && (effect?.flags?.system?.subject_prompt || effect?.flags?.system?.value_prompt)) continue_forward &&= (0, $d200992a7286a1e5$export$df951736c406196b)(effect);\n    return continue_forward;\n}\nasync function $9d141e3789e0b83b$export$3cc25891b8a467f7(effect, options, id) {\n    // If this is a status applied directly from the UI\n    if (game.user.id === id && !effect.origin && effect.statuses?.size && effect.target) await (0, $d200992a7286a1e5$export$efd50a08c6cb878d)(effect);\n    // Deleting an effect on an item which belongs to an actor\n    if (game.user.id === id && !effect.modifiesActor && effect.transfer && effect.parent && effect.parent.parent && effect.parent.parent.type === \"character\") await (0, $d200992a7286a1e5$export$40b3570d78570c16)(effect.parent, true);\n}\nasync function $9d141e3789e0b83b$export$40058aa05d265e4f(combat, update, options, id) {\n    // Perform start of combat and start of round tasks\n    if (game.user.id === id && update.round) await combat.start_of_round();\n}\nasync function $9d141e3789e0b83b$export$b326b618cce92063(bar, data, slot) {\n    // Handle test macros dropped to the hotbar\n    await (0, $a856728f05f0c624$export$ed3f1528e78b2d0c)(data, slot);\n}\nasync function $9d141e3789e0b83b$export$e6333a552b7032f3(app, html, msg) {\n    // Attach test data to the chat card\n    await (0, $af2e12063643503f$export$3d7f02c9b93e6b0)(html);\n}\nasync function $9d141e3789e0b83b$export$5c0c0cc3fc780035(actor, sheet, data) {\n    await (0, $af2e12063643503f$export$a54b240a5cfd4caf)(actor, data);\n}\nasync function $9d141e3789e0b83b$export$61c10505fc99de78(html, options) {\n    // Add push Your Luck option\n    await (0, $af2e12063643503f$export$d9445ce8959d2e19)(options);\n    // Add apply Damage option\n    await (0, $af2e12063643503f$export$220dda78442aea07)(options);\n    // Add edit Test option\n    await (0, $af2e12063643503f$export$5386e3bdcb090884)(options);\n}\n\n\n\n// Turn on debugging\nCONFIG.debug.hooks = true;\n/**\n * Init hook\n */ Hooks.once(\"init\", async ()=>{\n    console.log(`Initializing Saga Machine`);\n    // Add classes to global game variable\n    game.sagamachine = {\n        SagaMachineActor: $28ccc140dd142615$export$c49d3afcc675f1b5,\n        SagaMachineItem: $3e4d69c777799744$export$471af1c74e831048,\n        sm_test_macro: $a856728f05f0c624$export$4ae6666db41501cf\n    };\n    // Define custom document classes\n    CONFIG.Actor.documentClass = (0, $28ccc140dd142615$export$c49d3afcc675f1b5);\n    CONFIG.Item.documentClass = (0, $3e4d69c777799744$export$471af1c74e831048);\n    CONFIG.Combatant.documentClass = (0, $96b9cba4b1d7a59a$export$ca8ad600a8ec4279);\n    CONFIG.Combat.documentClass = (0, $96b9cba4b1d7a59a$export$c9b99f4a745fcbd1);\n    CONFIG.ui.combat = (0, $96b9cba4b1d7a59a$export$6503760ac807196f);\n    // Unregister the core sheets\n    Actors.unregisterSheet(\"core\", ActorSheet);\n    Items.unregisterSheet(\"core\", ItemSheet);\n    // Register Saga Machine sheet classes\n    Actors.registerSheet(\"saga-machine\", (0, $05cfedbfc2cc6c3c$export$eaa36efd5f1a839), {\n        types: [\n            \"character\"\n        ],\n        makeDefault: true\n    });\n    Actors.registerSheet(\"saga-machine\", (0, $05cfedbfc2cc6c3c$export$9059fd0f09215233), {\n        types: [\n            \"stash\"\n        ],\n        makeDefault: true\n    });\n    Actors.registerSheet(\"saga-machine\", (0, $05cfedbfc2cc6c3c$export$d55003dbaa27bba5), {\n        types: [\n            \"vehicle\"\n        ],\n        makeDefault: true\n    });\n    Items.registerSheet(\"saga-machine\", (0, $061a343a3435629e$export$11dc603c5bc66ba5), {\n        makeDefault: true\n    });\n    // Register custom status effects\n    CONFIG.statusEffects = (0, $d200992a7286a1e5$export$7065c91b0a27b3b9)();\n    CONFIG.specialStatusEffects.DEFEATED = \"defeated\";\n    CONFIG.specialStatusEffects.INCAPACITATED = \"unconscious\";\n    CONFIG.specialStatusEffects.INVISIBLE = \"hidden\";\n    game.sagamachine.standard_consequences = CONFIG.statusEffects.map((s)=>s.name);\n    // Register hooks\n    Hooks.on(\"updateActor\", (0, $9d141e3789e0b83b$export$a6324e54748ebe3));\n    Hooks.on(\"createItem\", (0, $9d141e3789e0b83b$export$4bf3fd4b252a8de8));\n    Hooks.on(\"updateItem\", (0, $9d141e3789e0b83b$export$38a029996c573874));\n    Hooks.on(\"deleteItem\", (0, $9d141e3789e0b83b$export$4a9b7a56f490dcad));\n    Hooks.on(\"preCreateActiveEffect\", (0, $9d141e3789e0b83b$export$9dc996de602aaf4f));\n    Hooks.on(\"createActiveEffect\", (0, $9d141e3789e0b83b$export$d367f85a279edb03));\n    Hooks.on(\"updateActiveEffect\", (0, $9d141e3789e0b83b$export$60945f152bbb5568));\n    Hooks.on(\"preDeleteActiveEffect\", (0, $9d141e3789e0b83b$export$7e03fe5bbd47fde3));\n    Hooks.on(\"deleteActiveEffect\", (0, $9d141e3789e0b83b$export$3cc25891b8a467f7));\n    Hooks.on(\"preUpdateCombat\", (0, $9d141e3789e0b83b$export$40058aa05d265e4f));\n    Hooks.on(\"hotbarDrop\", (0, $9d141e3789e0b83b$export$b326b618cce92063));\n    Hooks.on(\"renderChatMessage\", (0, $9d141e3789e0b83b$export$e6333a552b7032f3));\n    Hooks.on(\"dropActorSheetData\", (0, $9d141e3789e0b83b$export$5c0c0cc3fc780035));\n    Hooks.on(\"getChatLogEntryContext\", (0, $9d141e3789e0b83b$export$61c10505fc99de78));\n    // Register system config\n    game.settings.register(\"saga-machine\", \"level\", {\n        name: \"Starting Power Level\",\n        hint: \"The starting power level of all player characters.\",\n        scope: \"world\",\n        config: true,\n        type: Number,\n        default: 120,\n        choices: {\n            85: \"Mundane\",\n            120: \"Novice\",\n            160: \"Exceptional\",\n            200: \"Distinguished\",\n            240: \"Renowned\",\n            280: \"Legendary\"\n        }\n    });\n});\n\n\n//# sourceMappingURL=sagamachine.js.map\n","import { SagaMachineActor } from \"./actor/actor.js\";\nimport { CharacterSheet, StashSheet, VehicleSheet } from \"./actor/actor-sheet.js\";\nimport { SagaMachineCombat, SagaMachineCombatant, SagaMachineCombatTracker } from \"./game/combat.js\";\nimport { generate_conditions } from \"./game/consequences.js\";\nimport { SagaMachineItem } from \"./item/item.js\";\nimport { SagaMachineItemSheet } from \"./item/item-sheet.js\";\nimport { create_active_effect, create_item, delete_active_effect, delete_item, drop_actor_sheet_data,\n    get_chat_log_entry_context, hotbar_drop, pre_create_active_effect, pre_delete_active_effect, pre_update_combat,\n    render_chat_message, update_active_effect, update_actor, update_item } from \"./system/hooks.js\";\nimport { sm_test_macro } from \"./system/macros.js\";\n\n// Turn on debugging\nCONFIG.debug.hooks = true;\n\n/**\n * Init hook\n */\nHooks.once(\"init\", async () => {\n    console.log(`Initializing Saga Machine`);\n\n    // Add classes to global game variable\n    game.sagamachine = {\n        SagaMachineActor,\n        SagaMachineItem,\n        sm_test_macro\n    };\n\n    // Define custom document classes\n    CONFIG.Actor.documentClass = SagaMachineActor;\n    CONFIG.Item.documentClass = SagaMachineItem;\n    CONFIG.Combatant.documentClass = SagaMachineCombatant\n    CONFIG.Combat.documentClass = SagaMachineCombat\n    CONFIG.ui.combat = SagaMachineCombatTracker\n\n    // Unregister the core sheets\n    Actors.unregisterSheet(\"core\", ActorSheet);\n    Items.unregisterSheet(\"core\", ItemSheet);\n\n    // Register Saga Machine sheet classes\n    Actors.registerSheet(\"saga-machine\", CharacterSheet, { types: [\"character\"], makeDefault: true });\n    Actors.registerSheet(\"saga-machine\", StashSheet, { types: [\"stash\"], makeDefault: true });\n    Actors.registerSheet(\"saga-machine\", VehicleSheet, { types: [\"vehicle\"], makeDefault: true });\n    Items.registerSheet(\"saga-machine\", SagaMachineItemSheet, { makeDefault: true });\n\n    // Register custom status effects\n    CONFIG.statusEffects = generate_conditions();\n    CONFIG.specialStatusEffects.DEFEATED = 'defeated';\n    CONFIG.specialStatusEffects.INCAPACITATED = 'unconscious';\n    CONFIG.specialStatusEffects.INVISIBLE = 'hidden'\n    game.sagamachine.standard_consequences = CONFIG.statusEffects.map(s => s.name);\n\n    // Register hooks\n    Hooks.on('updateActor', update_actor);\n\n    Hooks.on('createItem', create_item);\n    Hooks.on('updateItem', update_item);\n    Hooks.on('deleteItem', delete_item);\n\n    Hooks.on('preCreateActiveEffect', pre_create_active_effect);\n    Hooks.on('createActiveEffect', create_active_effect);\n    Hooks.on('updateActiveEffect', update_active_effect);\n    Hooks.on('preDeleteActiveEffect', pre_delete_active_effect);\n    Hooks.on('deleteActiveEffect', delete_active_effect);\n\n    Hooks.on('preUpdateCombat', pre_update_combat);\n    Hooks.on(\"hotbarDrop\", hotbar_drop);\n    Hooks.on(\"renderChatMessage\", render_chat_message);\n    Hooks.on(\"dropActorSheetData\", drop_actor_sheet_data);\n    Hooks.on(\"getChatLogEntryContext\", get_chat_log_entry_context);\n\n    // Register system config\n    game.settings.register('saga-machine', 'level', {\n        name: 'Starting Power Level',\n        hint: 'The starting power level of all player characters.',\n        scope: 'world',\n        config: true,\n        type: Number,\n        default: 120,\n        choices: {\n            85: \"Mundane\",\n            120: \"Novice\",\n            160: \"Exceptional\",\n            200: \"Distinguished\",\n            240: \"Renowned\",\n            280: \"Legendary\"\n        }\n    });\n});\n","import { INITIATIVE } from \"../game/combat.js\";\nimport { Attack, Test } from \"../game/tests.js\";\nimport { standard_consequence } from \"../game/consequences.js\";\nimport { median } from \"../system/utils.js\";\nimport { Effect, WoundFactory } from \"../game/damage.js\";\nimport { ModifierSet } from \"../game/modifiers.js\";\n\n/**\n * Extends the base Actor class to support the Saga Machine system\n *\n * @see   SagaMachineActorSheet - Base sheet class\n * @see   SagaMachineCharacterSheet - Character sheet class\n * @see   SagaMachineStashSheet - Stash sheet class\n * @see   SagaMachineVehicleSheet - Vehicle sheet class\n *\n * @extends {Actor}\n */\nexport class SagaMachineActor extends Actor {\n\n    /*****************************************\n     * METHODS THAT OVERRIDE THE ACTOR CLASS *\n     *****************************************/\n\n    /**\n     * @inheritdoc\n     *  @override\n     */\n    async prepareDerivedData() {\n        super.prepareDerivedData();\n\n        // Calculate the actor's scores\n        if (this.type === 'character')  await CharacterHelper.calculate_scores(this);\n        if (this.type === 'stash')      await StashHelper.calculate_scores(this);\n        if (this.type === 'vehicle')    await VehicleHelper.calculate_scores(this);\n    }\n\n    /**\n     * @inheritdoc\n     * @override\n     */\n    getRollData() {\n        const data = super.getRollData();\n\n        // Copy stats and scores to the top level\n        if (data.stats) {\n            for (let stat of Object.keys(data.stats)) data[stat] = data.stats[stat].value;\n            for (let score of Object.keys(data.scores)) data[score] = data.scores[score].value;\n        }\n\n        return data;\n    }\n\n    /**\n     * Return the actor's initiative value (used in the combat tracker).\n     * Should always be set to INITIATIVE.NPC_TURN for NPCs or either INITIATIVE.FAST_TURN or\n     * INITIATIVE.SLOW_TURN for PCs.\n     *\n     * @param {string|null} [formula=null] - Optional formula to use for initiative\n     * @returns {Roll}\n     */\n    getInitiativeRoll(formula=null) {\n        // If a formula is supplied for initiative, return a Roll using it\n        if (formula) return new Roll(formula);\n\n        // If this is an NPC, return a Roll with that turn type\n        else if (this.is_npc()) return new Roll(INITIATIVE.NPC_TURN);\n\n        // Otherwise, evaluate fast or slow turn and return a Roll\n        else return new Roll(this.system.fast_turn ? INITIATIVE.FAST_TURN : INITIATIVE.SLOW_TURN);\n    }\n\n    /*******************************************\n     * METHODS FOR DERIVING THE ACTOR'S SCORES *\n     *******************************************/\n\n    /**\n     * Calculate the actor's score based on either the median of a set or a fixed number and apply\n     * any modifiers from effects currently on the actor.\n     *\n     * @param {string} name - The name of the score (used to look up modifiers)\n     * @param {number|number[]} stats - The basis from which to derive the score\n     * @param {{stat: string|undefined, score: string|undefined, tn: string|number|undefined, boons: number|undefined,\n     *     banes: number|undefined, modifier: number|undefined, divide: number|undefined, percent: number|undefined}} other_modifiers - Any additional modifiers to include alongside those on the actor\n     * @returns {number}\n     */\n    calculate_score(name, stats, other_modifiers={}) {\n        const base = Array.isArray(stats) ? median(stats) : stats;\n        const mods = this.total_modifiers({base_score: name, ...other_modifiers});\n        const percent = 1 + (mods.percent / 100);\n        return Math.floor(((base + mods.modifier) * percent) / (mods.divide || 1));\n    }\n\n    /**\n     * Iterate over actor's equipped armor and determine its Armor, Powered and Bulky property values.\n     * Return an object containing the values of each.\n     *\n     * @returns {{Armor: number, Powered: number, Bulky: number}}\n     */\n    armor_properties() {\n        const equipped_armor = this.items.filter(item => item.type === 'item' &&\n            item.system.group === 'Armor' && item.system.equipped);\n        let highest = {\n            'Armor': 0,\n            'Bulky': 0,\n            'Powered': 0\n        };\n        for (const arm of equipped_armor) {\n            if (arm.system.armor > highest.Armor) highest.Armor = arm.system.armor;\n            if (arm.system.bulky > highest.Bulky) highest.Bulky = arm.system.bulky;\n            if (arm.system.powered > highest.Powered) highest.Powered = arm.system.powered;\n            if (arm.system.properties.includes('Sealed')) highest.Sealed = true;\n        }\n        return highest;\n    }\n\n    /**\n     * Return the actor's Armor value (if already set by armor_properties()).\n     * Otherwise, iterate over all equipped armor and return the highest value.\n     *\n     * @returns {number}\n     */\n    armor_value() {\n        if (this.system.scores.armor.properties['Armor'])\n            return this.system.scores.armor.properties['Armor'];\n\n        const equipped_armor = this.items.filter(item => item.type === 'item' &&\n            item.system.group === 'Armors' && item.system.equipped);\n        let highest = 0;\n        for (const arm of equipped_armor) {\n            const val = arm.system.armor;\n            if (val > highest) highest = val;\n        }\n        return highest;\n    }\n\n    /**\n     * Calculate the total encumbrance of the actor's inventory\n     *\n     * @returns {number}\n     */\n    encumbrance_total() {\n\t\treturn this.items.filter(item => item.type === 'item').reduce((total, item) => item.system.encumbrance + total, 0);\n\t}\n\n    /**\n     * Calculates the character's current Wound total from all Wound, Grave Wound and Fatigue consequences\n     *\n     * @returns {number}\n     */\n    wound_total() {\n        const wounds = this.items.filter( item => item.type === 'consequence' &&\n            (item.name.toLowerCase() === 'wound' ||\n                item.name.toLowerCase() === 'grave wound' ||\n                item.name.toLowerCase() === 'fatigue'));\n        return wounds.map(a => a.system.rank).reduce((a, b) => a + b, 0);\n    }\n\n    /*******************************\n     * METHODS FOR HANDLING DAMAGE *\n     *******************************/\n\n    /**\n     * Check whether the actor has a specified trait.\n     *\n     * @param {string} trait_name - The name of the trait\n     * @param {string|null} [specialization=null] - An optional specialization to match\n     * @returns {boolean}\n     */\n    has_trait(trait_name, specialization=null) {\n        const matches = this.items.filter(i => i.type === \"trait\" && i.name.toLowerCase() === trait_name.toLowerCase());\n        if (!specialization) return !!matches.length\n\n        let specialization_match = false;\n        for (const i of matches) {\n            const listings = i.system.specialization && i.system.specialization.split(',');\n            for (const l of listings) if (l.trim().toLowerCase() === specialization) specialization_match = true;\n        }\n        return specialization_match;\n    }\n\n    /**\n     * Check whether the action has immunity to a particular damage type\n     *\n     * @param {string} type - The damage type in abbreviated format (e.g. cut, pi, sm)\n     * @returns {boolean}\n     */\n    has_immunity(type) { return this.has_trait('Immunity', type); }\n\n    /**\n     * Check whether the action has a vulnerability to a particular damage type\n     *\n     * @param {string} type - The damage type in abbreviated format (e.g. cut, pi, sm)\n     * @returns {boolean}\n     */\n    has_vulnerability(type) { return this.has_trait('Vulnerability', type); }\n\n    /**\n     * Check whether the action has resistance to a particular damage type\n     *\n     * @param {string} type - The damage type in abbreviated format (e.g. cut, pi, sm)\n     * @returns {boolean}\n     */\n    has_resistance(type) { return this.has_trait('Resistance', type); }\n\n    /**\n     * Return the TN of test prompted by the actor's Dying consequence\n     *\n     * @returns {number}\n     */\n    dying_tn() {\n        return Math.abs(Math.min(this.system.scores.health.max - this.system.scores.health.value, 0));\n    }\n\n    /**\n     * Apply the specified damage to the actor, taking into account armor and common traits and setting consequences\n     * and other effects as appropriate.\n     *\n     * @param {number} damage - The amount of damage being dealt\n     * @param {string} type - The type of damage being dealt in abbreviated format (e.g. cut, pi, sm)\n     * @param {boolean|string} critical - Whether the damage is being dealt by a critical hit\n     * @param {number} pierce - The Pierce property of the attack; for Ignores set to Effect.IGNORES_ALL_ARMOR.\n     * @returns {Promise<void>}\n     */\n    async apply_damage(damage, type, critical, pierce) {\n        critical = (critical === 'true' || critical === true);   // Cast critical to boolean\n        pierce = Number(pierce);                                 // Cast pierce to number\n\n        // Calculate the damage to apply\n        let applied_damage = pierce === Effect.IGNORES_ALL_ARMOR ?\n            Number(damage) :\n            Number(damage) - Math.max(this.system.scores.armor.value - Math.max(pierce, 0), 0);\n\n        if (this.has_immunity(type)) {      // Apply immunities\n            ChatMessage.create({content: \"The character has immunity. Ignoring damage.\", whisper: [game.user.id]});\n            applied_damage = 0;\n        }\n        if (this.has_vulnerability(type)) { // Apply vulnerabilities\n            ChatMessage.create({content: \"The character has vulnerability. Doubling damage.\", whisper: [game.user.id]});\n            applied_damage *= 2;\n        }\n        if (this.has_resistance(type)) {    // Apply resistance\n            ChatMessage.create({content: \"The character has resistance. Halving damage.\", whisper: [game.user.id]});\n            applied_damage = Math.floor(applied_damage / 2);\n        }\n\n        // If no damage is applied, there is nothing more to do\n        if (applied_damage <= 0) return;\n\n        // If this reduces the character to <=0 HP, upgrade to a grave wound\n        if (this.system.scores.health.value + applied_damage >= this.system.scores.health.max) {\n            critical = true;\n            if (type === 'fat') ChatMessage.create({ content: `Wound Total exceeds Health . ${this.name} falls unconscious for [[1d10]] hours.` });\n            else                ChatMessage.create({ content: `Wound Total exceeds Health. ${this.name} takes a Grave Wound.` });\n        }\n\n        // Determine whether and how many Dying consequences to apply\n        const current_increment = Math.floor(this.system.scores.health.value / this.system.scores.health.max);\n        const new_increment = Math.floor((this.system.scores.health.value + applied_damage) / this.system.scores.health.max);\n        const dying_to_apply = Math.max(new_increment - current_increment,\n            (this.system.scores.health.value > this.system.scores.health.max ? 1 : 0));  // If Wound Total > Health, always add a dying when taking damage\n\n        // If there is a Dying to apply\n        if (dying_to_apply > 0) {\n            // Is the character already dying?\n            let already_dying = false;\n            let dying_consequence = this?.items.filter(c => c.name === 'Dying' && c.type === \"consequence\")\n                .values().next()?.value;\n            if (dying_consequence) already_dying = true;\n\n            // If not, get a copy of the consequence and apply it to the actor\n            else {\n                dying_consequence = await standard_consequence({\n                    name: 'Dying',\n                    actor: this,\n                    skip_actor: true\n                });\n                [dying_consequence] = await this.createEmbeddedDocuments('Item', [dying_consequence]);\n            }\n\n            // Set the correct Dying value\n            const new_dying_value = already_dying ? dying_consequence.system.rank + dying_to_apply : dying_to_apply;\n            await dying_consequence.update({'system.rank': new_dying_value });\n\n            // Check to see if the character is dead\n            if (new_dying_value >= 3) {\n                // Don't do anything if already dead\n                if (!this.statuses.has('defeated')) {\n                    // Get the defeated status effect\n                    let effect = null;\n                    CONFIG.statusEffects.forEach(e => {\n                        if (e.id === 'defeated') effect = e\n                    });\n                    if (effect) {\n                        // Add the status effect\n                        const clone = foundry.utils.deepClone(effect)\n                        ActiveEffect.create(clone, {parent: this});\n                        ChatMessage.create({ content: `Dying consequences exceed 3 or more. ${this.name} is dead.` });\n                    }\n                }\n            }\n        }\n\n        // Determine which consequence to apply\n        let consequence_name = null;\n        if (type === 'fat')     consequence_name = 'Fatigue';\n        else if (critical)      consequence_name = 'Grave Wound';\n        else                    consequence_name = 'Wound';\n\n        // Get the consequence\n        let consequence = game.items.filter(c => c.name === consequence_name && c.type === \"consequence\")\n            .values().next()?.value;\n\n        // Or lazily create it, if necessary\n        if (!consequence)\n            consequence = await Item.create({\n                name: consequence_name,\n                type: 'consequence',\n                system: { specialized: true, specialization: 'describe injury', rank: 1 }\n            });\n\n        // Apply the wound to the actor\n        const [actor_copy] = await this.createEmbeddedDocuments('Item', [consequence]);\n        await actor_copy.update({'system.rank': applied_damage});\n\n        // Generate a default subject based on damage type\n        const wound = await WoundFactory.generate_wound(type, critical);\n\n        // Prompt the user for the descriptor\n        new Dialog({\n            title: `Describe ${consequence_name}`,\n            content: `\n                <form>\n                    <div class=\"form-group\">\n                        <label for=\"descriptor\">Descriptor</label>\n                        <input type=\"text\" name=\"descriptor\" value=\"${wound.descriptor}\" autofocus>\n                    </div>\n                </form>`,\n            buttons:{\n                Confirm: {\n                    icon: \"<i class='fas fa-check'></i>\",\n                    label: 'OK',\n                    callback: async (html) => {\n                        const final_descriptor = html.find(\"[name=descriptor]\").val();  // Get the user set descriptor\n                        if (wound.descriptor !== final_descriptor) wound.description = '';\n\n                        // Add the descriptor to the wound\n                        await actor_copy.update({'system.specialization': final_descriptor, 'system.description': wound.description});\n                    }\n                }\n            },\n            default: 'Confirm'\n        }).render(true);\n    }\n\n    /*****************\n     * OTHER METHODS *\n     *****************/\n\n    /**\n     * Adjust the number of Hindered consequences on the actor based on their encumbrance\n     *\n     * @returns {Promise<void>}\n     */\n    async encumbrance_consequences() {\n        if (!this.isOwner) return;\n\n        const encumbered = this.system.scores.encumbrance.value > this.system.scores.encumbrance.max;\n        if (encumbered) {\n            // If already encumbered, skip\n            let consequences = this.items.filter(c => c.name === 'Hindered' &&\n                                                      c.system.specialization === 'Encumbered' &&\n                                                      c.type === 'consequence');\n            if (consequences.length) return;\n\n            // If not encumbered, add the consequence\n            let hindered = await standard_consequence({\n                name: 'Hindered',\n                actor: this,\n                skip_actor: true\n            });\n            [hindered] = await this.createEmbeddedDocuments('Item', [hindered]);\n            await hindered.update({ 'system.specialization': 'Encumbered', 'system.specialized': true });\n        }\n        else {\n            // Remove any encumbered consequences\n            let consequences = this.items.filter(c => c.name === 'Hindered' &&\n                                                      c.system.specialization === 'Encumbered' &&\n                                                      c.type === 'consequence');\n            if (consequences.length)\n                await this.deleteEmbeddedDocuments(\"Item\", consequences.map(c => c.id));\n        }\n    }\n\n    /**\n     * Is this character a PC? (Used by handlebars template - do not remove!)\n     *\n     * @returns {boolean}\n     */\n    is_pc() { return this.type === 'character' && !this.system.npc; }\n\n    /**\n     * Is this character an NPC?\n     *\n     * @returns {boolean}\n     */\n    is_npc() { return this.type === 'character' && !!this.system.npc; }\n\n    /********************************************\n     * METHODS FOR HANDLING TESTS AND MODIFIERS *\n     ********************************************/\n\n    /**\n     * Adds together all boons, banes and other modifiers relevant to the action or score and returns\n     * an object containing their sums.\n     *\n     * @param {{base_score: string, stat: string|null, score: string|null, tn: string|number, boons: number,\n     *     banes: number, modifier: number, divide: number, percent: number}} dataset\n     * @returns {{modifier: number, divide: number, percent: number, boons: number, banes: number, tags: string[]}}\n     */\n    total_modifiers(dataset) {\n        return ModifierSet.total_modifiers(this.modifiers(dataset));\n    }\n\n    /**\n     * Adds up any modifiers from the actor's active effects, as well as from the dataset object passed into the method.\n     * Returns a list of parsed ModifierSet objects representing all relevant modifiers.\n     *\n     * @param {{base_score: string, stat: string|null, score: string|null, tn: string|number, boons: number,\n     *     banes: number, modifier: number, divide: number, percent: number}} dataset\n     * @returns {string[]}\n     * @see ModifierSet\n     */\n    modifiers(dataset) {\n        let mods_object = null;\n\n        // Look up the modifiers for this test\n        if (dataset.base_score)                                     mods_object = deepClone(this.system.modifiers.scores[dataset.base_score]);\n        if (dataset.tn === 'Defense' || dataset.tn === 'Willpower') mods_object = deepClone(this.system.modifiers.other.attack);\n        if (!mods_object?.length && (dataset.score === 'defense' ||\n            dataset.score === 'willpower'))                         mods_object = deepClone(this.system.modifiers.other.defense);\n        if (!mods_object?.length && dataset.stat)                   mods_object = deepClone(this.system.modifiers.stats[dataset.stat]);\n        if (!mods_object) mods_object = [];\n\n        // Verify that the mods object is a list\n        if (!Array.isArray(mods_object)) { console.error('Mods object is not array'); return []; }\n\n        // EACH MOD IN THE LIST SHOULD BE IN THE FORMAT\n        // name=short name&description=for tooltip&boons=0&banes=0&modifier=0\n\n        // Add manual boons, banes or modifier passed in as part of the dataset\n        if (dataset.boons) mods_object.push(`boons=${dataset.boons}`);\n        if (dataset.banes) mods_object.push(`banes=${dataset.banes}`);\n        if (dataset.modifier) mods_object.push(`modifier=${dataset.modifier}`);\n        if (dataset.divide) mods_object.push(`divide=${dataset.divide}`);\n\n        // Add possible bane from the strength requirement\n        if (Attack.is_attack(dataset) && !Attack.strength_met(dataset, this)) mods_object.push(`name=Low Str&banes=1`);\n\n        // Add possible bane from Fatigue\n        if ((dataset.stat === 'strength' || dataset.stat === 'dexterity' || dataset.stat === 'speed' || dataset.stat === 'endurance') &&\n            this.system.scores.health.fatigue && this.system.scores.health.value >= this.system.scores.health.max)\n            mods_object.push(`name=Fatigue&banes=1`);\n\n        // Add possible bane from Bulky\n        if ((dataset.stat === 'speed' || dataset.skill === 'Athletics') && this.system.scores.armor.properties['Bulky'])\n            mods_object.push(`name=Bulky&banes=1`);\n\n        // Add boons from Powered property\n        if (dataset.stat === 'strength' && this.system.scores.armor.properties['Powered'])\n            mods_object.push(`name=Powered&boons=2`);\n\n        // Add boon from the Auto property\n        if (Attack.is_attack(dataset) && Attack.has_property(dataset.properties, 'Auto')) mods_object.push(`name=Auto&boons=1`);\n\n        // Parse the mods object into a list of mods\n        return ModifierSet.parse(mods_object);\n    }\n\n    /**\n     * The actor performs a test defined by the dataset.\n     *\n     * @param {{stat: string|null, score: string|null, tn: string|number, boons: number, banes: number,\n     *     modifier: number, divide: number, percent: number, evaluate: boolean, apply_consequences: boolean,\n     *     chat: boolean, whisper: boolean}} dataset\n     * @returns {Promise<Test>}\n     * @see Test\n     */\n    async test(dataset) {\n        // Merge the actor into the dataset\n        const spec = { actor: this, ...dataset };\n\n        // Create the test and evaluate unless evaluate=false\n        const test = new Test(spec);\n        if (dataset.evaluate !== false) await test.evaluate();\n\n        // Apply effects, unless apply_consequences=false\n        if (dataset.apply_effects !== false) await test.apply_effects(dataset);\n\n        // Send to chat, if chat=true, whisper if whisper=true\n        if (dataset.chat) await test.to_chat({ whisper: !!dataset.whisper });\n\n        return test;\n    }\n}\n\n/**\n * Helper class consolidating methods specific to characters\n *\n * @see SagaMachineActor - Document class representing the character\n */\nexport class CharacterHelper {\n    /**\n     * Calculates all derived scores for the character and updates their values\n     *\n     * @param {SagaMachineActor} actor\n     */\n    static async calculate_scores(actor) {\n        // Armor properties\n        actor.system.scores.armor.properties = actor.armor_properties();\n\n        // Equipped armor\n        if (!actor.system.scores.armor.custom)\n            actor.system.scores.armor.value = actor.calculate_score('armor', actor.armor_value());\n\n        // Defense\n        if (!actor.system.scores.defense.custom)\n            actor.system.scores.defense.value = actor.calculate_score('defense',\n                [actor.system.stats.dexterity.value, actor.system.stats.speed.value, actor.system.stats.perception.value]);\n\n        // Willpower\n        if (!actor.system.scores.willpower.custom)\n            actor.system.scores.willpower.value = actor.calculate_score('willpower',\n                [actor.system.stats.intelligence.value, actor.system.stats.charisma.value, actor.system.stats.determination.value]);\n\n        // Health\n        if (!actor.system.scores.health.custom)\n            actor.system.scores.health.max = actor.calculate_score('health',\n                actor.system.stats.strength.value + actor.system.stats.endurance.value);\n\n        // Wound total\n        actor.system.scores.health.value = actor.wound_total();\n\n        // Fatigue\n        actor.system.scores.health.fatigue = CharacterHelper.fatigue(actor);\n\n        // Move\n        if (!actor.system.scores.move.custom)\n            actor.system.scores.move.value = actor.calculate_score('move',\n                [actor.system.stats.speed.value, actor.system.stats.endurance.value, actor.system.stats.determination.value],\n                {\n                    modifier: actor.system.scores.armor.properties['Bulky'] * -1 || 0,\n                    divide: actor.system.scores.health.fatigue && actor.system.scores.health.value >= actor.system.scores.health.max ? 2 : 1 // Handle Fatigue consequence's effect on Move\n                });\n\n        // Encumbrance threshold\n        if (!actor.system.scores.encumbrance.custom)\n            actor.system.scores.encumbrance.max = actor.calculate_score('encumbrance',\n                [actor.system.stats.strength.value, actor.system.stats.dexterity.value, actor.system.stats.endurance.value],\n                {modifier: actor.system.scores.armor.properties['Powered'] || 0});\n\n        // Encumbrance total\n        actor.system.scores.encumbrance.value = actor.encumbrance_total();\n\n        // Experiences\n        const experiences_spent = CharacterHelper.experiences_spent(actor);\n        actor.system.experiences.spent = experiences_spent.total;\n        actor.system.experiences.spent_stats = experiences_spent.stats;\n        actor.system.experiences.spent_skills = experiences_spent.skills;\n        actor.system.experiences.spent_traits = experiences_spent.traits;\n        actor.system.experiences.unspent = actor.system.experiences.total - actor.system.experiences.spent;\n        actor.system.experiences.level = CharacterHelper.power_level(actor);\n    }\n\n    /**\n     * Counts the actor's total points of fatigue\n     *\n     * @param {SagaMachineActor} actor\n     * @returns {number}\n     */\n    static fatigue(actor) {\n        const fatigue = actor.items.filter(item => item.type === 'consequence' && item.name.toLowerCase() === 'fatigue');\n        return fatigue.map(a => a.system.rank).reduce((a, b) => a + b, 0);\n    }\n\n    /**\n     * Determine the experience value of a stat or skill.\n     *\n     * @param {number} value - The current value of the stat or skill\n     * @param {number} [free=0] - How many ranks were free (usually characters get a free rank of Language). If undefined, assume no ranks were free.\n     * @returns {number}\n     */\n    static stat_cost(value, free=0) {\n        const free_total = free ? [...Array(free + 1).keys()].reduce((a, b) => a + b, 0) : 0;\n        return [...Array(value + 1).keys()].reduce((a, b) => a + b, free_total * -1);\n    }\n\n    /**\n     * Returns the number of experiences this character has spent, broken down into categories: stats, skills, traits and total overall.\n     *\n     * @param {SagaMachineActor} actor\n     * @returns {{skills: number, total: number, traits: number, stats: number}}\n     */\n    static experiences_spent(actor) {\n        // Add total of all stats\n        let stats = 0;\n        for (let stat of ['strength', 'dexterity', 'speed', 'endurance', 'intelligence', 'perception', 'charisma', 'determination'])\n            stats += CharacterHelper.stat_cost(actor.system.stats[stat].value);\n\n        // Subtract the cost of the character's starting stats, based on power level\n        stats -= game.settings.get('saga-machine', 'level', 120);\n\n\n        // Add total of all skills and traits\n        let skills = 0;\n        let traits = 0;\n        for (let item of actor.items) {\n            if (item.type === 'skill') skills += CharacterHelper.stat_cost(item.system.rank, item.system.free_ranks);\n            if (item.type === 'trait') traits += item.system.ranked ? item.system.cost * item.system.rank : item.system.cost;\n        }\n\n        const total = stats + skills + traits;\n\n        return {total: total, stats: stats, skills: skills, traits: traits};\n    }\n\n    /**\n     * Given the character's spent experience, returns their calculated power level\n     *\n     * @param {SagaMachineActor} actor\n     * @returns {string}\n     */\n    static power_level(actor) {\n        const total_spent = actor.system.experiences.spent + game.settings.get('saga-machine', 'level', 120);\n\n        if (total_spent < 150)        return \"Mundane\";\n        else if (total_spent < 200)   return \"Novice\";\n        else if (total_spent < 250)   return \"Exceptional\";\n        else if (total_spent < 300)   return \"Distinguished\";\n        else if (total_spent < 350)   return \"Renowned\";\n        else                          return \"Legendary\";\n    }\n}\n\n/**\n * Helper class consolidating methods specific to stashes and merchants\n *\n * @see SagaMachineActor - Document class representing the stash\n */\nexport class StashHelper {\n    /**\n     * Calculate the stash's wealth and encumbrance\n     *\n     * @param {SagaMachineActor} actor\n     * @returns {Promise<void>}\n     */\n    static async calculate_scores(actor) {\n        // Wealth total\n        actor.system.wealth.total = StashHelper.wealth_total(actor);\n\n        // Encumbrance total\n        actor.system.encumbrance.value = actor.encumbrance_total();\n    }\n\n    /**\n     * Calculate the total value of the stash\n     *\n     * @param {SagaMachineActor} actor\n     * @returns {number}\n     */\n    static wealth_total(actor) {\n\t\treturn actor.items.filter(item => item.type === 'item').reduce((total, item) =>\n            item.system.cost * item.system.quantity + total, 0) + actor.system.wealth.money;\n\t}\n}\n\n/**\n * Helper class consolidating methods specific to vehicles\n *\n * @see SagaMachineActor - Document class representing the vehicle\n */\nexport class VehicleHelper {\n    /**\n     * Calculate the vehicle's scores\n     *\n     * @param {SagaMachineActor} actor\n     * @returns {Promise<void>}\n     */\n    static async calculate_scores(actor) {\n        // Armor properties\n        actor.system.scores.armor.properties = actor.armor_properties();\n\n        // Equipped armor\n        if (!actor.system.scores.armor.custom)\n            actor.system.scores.armor.value = actor.calculate_score('armor', actor.armor_value());\n\n        // Handling\n        actor.system.scores.handling.boons = (actor.system.scores.handling.label.match(/\\+/g) || []).length;\n        actor.system.scores.handling.banes = (actor.system.scores.handling.label.match(/-/g) || []).length;\n\n        // Defense\n        if (!actor.system.scores.defense.custom)\n            actor.system.scores.defense.tn = actor.calculate_score('defense',\n                10 + actor.system.scores.handling.boons -\n                        (actor.system.scores.size.value + actor.system.scores.handling.banes));\n\n        // Health\n        if (!actor.system.scores.health.custom)\n            actor.system.scores.health.max = actor.calculate_score('health',\n                15 * (2**actor.system.scores.size.value));\n\n        // Wound total\n        actor.system.scores.health.value = actor.wound_total();\n\n        // Loads total\n        actor.system.scores.space.value = VehicleHelper.loads_total(actor);\n    }\n\n    /**\n     * Calculate the total number of loads on the vehicle\n     *\n     * @param {SagaMachineActor} actor\n     * @returns {number}\n     */\n    static loads_total(actor) {\n        return actor.items.filter(item => item.type === 'item').reduce((total, item) => item.system.loads + total, 0);\n    }\n}\n","import { SagaMachineActor } from \"../actor/actor.js\";\nimport { Effect } from \"./damage.js\";\n\n/**\n * Initiative constants for FAST / NPC / SLOW turns\n * @type {{FAST_TURN: string, SLOW_TURN: string, NPC_TURN: string}}\n */\nexport const INITIATIVE = {\n    FAST_TURN: \"3\",\n    NPC_TURN: \"2\",\n    SLOW_TURN: \"1\"\n};\n\n/**\n * Combatant includes patched functionality to support Saga Machine's fast/slow turns\n *\n * @inheritDoc\n */\nexport class SagaMachineCombatant extends Combatant {\n    /**\n     * @inheritDoc\n     * @override\n     * @param formula\n     * @return {*|Roll}\n     */\n    getInitiativeRoll(formula) {\n        // If there is no attached actor, this must be an NPC\n        if (!this.actor) return new Roll(INITIATIVE.NPC_TURN);\n\n        // If this is marked as an NPC, it must be an NPC\n        if (this.isNPC) return this.actor.getInitiativeRoll(INITIATIVE.NPC_TURN);\n\n        // Otherwise, set the turn type as indicated\n        else return this.actor.getInitiativeRoll();\n    }\n\n    /**\n     * Returns the value of the combatant's initiative - a constant representing  a fast / NPC / slow turn\n     *\n     * @return {number}\n     */\n    getInitiativeValue() {\n        return this.isNPC ? Number(INITIATIVE.NPC_TURN) :\n            (this.actor.system.fast_turn ? Number(INITIATIVE.FAST_TURN) : Number(INITIATIVE.SLOW_TURN));\n    }\n}\n\n/**\n * Combat includes override that sets initiative based on fast / npc / slow turns\n *\n * @inheritDoc\n */\nexport class SagaMachineCombat extends Combat {\n    /**\n     * @inheritDoc\n     * @override\n     * @param ids\n     * @param formula\n     * @param updateTurn\n     * @param messageOptions\n     * @return {Promise<SagaMachineCombat>}\n     */\n    async rollInitiative(ids, {formula=null, updateTurn=true, messageOptions={}}={}) {\n        // Iterate over Combatants, performing an initiative roll for each\n        const updates = [];\n        for ( let [i, id] of (typeof ids === \"string\" ? [ids] : ids).entries() ) {\n          // Get Combatant data\n          const combatant = this.combatants.get(id);\n          if (!combatant?.isOwner) continue;\n\n          // Produce an initiative roll for the Combatant\n          const roll = combatant.getInitiativeRoll(formula);\n          await roll.evaluate({async: true});\n          updates.push({_id: id, initiative: roll.total});\n        }\n        if (!updates.length) return this;\n\n        // Update multiple combatants\n        await this.updateEmbeddedDocuments(\"Combatant\", updates);\n\n        // Ensure the turn order remains with the same combatant\n        if ( updateTurn && this.combatant?.id ) await this.update({turn: this.turns.findIndex(t => t.id === this.combatant?.id)});\n\n        return this;\n    }\n\n    /**\n     * Update the initiative of all combatants with the matching actor\n     *\n     * @param {SagaMachineActor} actor\n     * @param {string|null|undefined} turn_type\n     * @return {Promise<void>}\n     */\n    async update_combatant_initiative(actor, turn_type) {\n        if (typeof turn_type === 'undefined' || turn_type === null) return;\n        const linked_combatants = game.combat.combatants.filter(c => c.actorId === actor.id);\n        for (const c of linked_combatants)\n            await game.combat.setInitiative(c.id, c.getInitiativeValue())\n    }\n\n    /**\n     * Perform all start of combat and start of round tasks\n     *\n     * @return {Promise<void>}\n     */\n    async start_of_round(){\n        // Ensure that all combatants have a fast / slow turn marked in the order\n        await this.rollAll();\n\n        // Cycle through all combatants\n        for (let c of this.combatants) {\n\n            // Make a defense test for everyone\n            await c.actor.test({\n                stat: 'defense', effects: [{\"type\": \"defense\"}], whisper: true, chat: true,\n                ...c.actor.total_modifiers({score: 'defense'})\n            });\n        }\n\n        // New Round Card - prompt players to choose fast / slow turn and display statuses\n        let content = `<h3>Round ${this.round+1}</h3><p><strong>Choose a Fast or Slow turn now!</strong></p><table>`;\n        for (let c of this.combatants) {\n            if (c.hidden) continue; // Don't show hidden combatants\n            const statuses = Array.from(c.actor.statuses.map(s => s.split(/\\s|-/).map(w => w.capitalize()).join(' '))).sort().join(', ');\n            content += `<tr><td><strong>${c.name}</strong></td><td>${statuses ? statuses : '&mdash;'}</td></tr>`;\n        }\n        content += '</table>';\n        await ChatMessage.create({content: content});\n\n        // Whisper all defenses to GM\n        content = '<h4><strong>Defenses This Round</strong></h4><table>';\n        for (let c of this.combatants)\n            content += `<tr><td><strong>${c.name}</strong></td><td>Defense ${c.actor.system.scores.defense.tn}</td><td>Willpower ${c.actor.system.scores.willpower.tn}</td></tr>`;\n        content += '</table>';\n        await ChatMessage.create({\n            content: content,\n            type: CONST.CHAT_MESSAGE_TYPES.WHISPER,\n            whisper: game.users.filter(u => u.isGM).map(u => u.id)\n        });\n\n        // Chat messages for Bleeding and Dying consequences\n        for (let c of this.combatants) {\n\n            // Test Endurance when dying, prompt to add or remove Dying conditions\n            if (c.actor.statuses.has('dying') && !c.actor.statuses.has('defeated')) {\n                await ChatMessage.create({ speaker: ChatMessage.getSpeaker({ actor: c.actor }), content:\n                        `<p><strong>${c.name} is Dying!</strong></p><ul><li>Limited to 1 AP.</li><li>Making an Endurance test.` +\n                        `<ul><li><em>Crit Success:</em> Lose a Dying.</li><li><em>Failure:</em> Gain a Dying.</li><li><em>3 Dying:</em> ${c.name} dies.</li></ul></li></ul>` });\n                await c.actor.test({\n                    stat: 'endurance', tn: c.actor.dying_tn(), chat: true,\n                    effects: [{\"type\": \"consequence\", \"name\": \"Dying\", \"when\": \"failure\", \"target\": \"self\"}],\n                    ...c.actor.total_modifiers({score: 'defense'})\n                });\n            }\n\n            // Note Bleeding and prompt for damage\n            if (c.actor.statuses.has('bleeding') && !c.actor.statuses.has('defeated')) {\n                c.actor.items.filter(c => c.type === \"consequence\" && c.name === \"Bleeding\").forEach(b => {\n                    if (b.system.rank > 0) {\n                        const damage = new Effect({\n                            \"type\": \"damage\",\n                            \"value\": b.system.rank,\n                            \"damage_type\": b.system.specialization,\n                            \"properties\": \"Ignores\",\n                            \"when\": \"always\",\n                            \"target\": \"self\" }).apply();\n                        ChatMessage.create({\n                            speaker: ChatMessage.getSpeaker({ actor: c.actor }),\n                            content: `<p><strong>${c.name} is Bleeding!</strong></p><ul><li>Right-click and select Apply Damage.</li><li>${damage.message}</li></ul>`\n                        });\n                    }\n                });\n            }\n        }\n    }\n}\n\n/**\n * Modified combat tracker that includes a fast/slow turn toggle\n *\n * @inheritDoc\n */\nexport class SagaMachineCombatTracker extends CombatTracker {\n    /**\n     * @inheritDoc\n     * @param html\n     */\n    activateListeners(html) {\n        const combatants = this.viewed?.combatants;\n\n        // For each combatant in the tracker, change the initiative selector\n        html.find('.combatant').each((i, el) => {\n            const combatant_id = el.getAttribute('data-combatant-id');\n            const combatant = combatants.get(combatant_id);\n            if (!combatant) return;\n\n            const initiative = combatant.isNPC ? 'NPC' :\n                (combatant.actor?.system?.fast_turn ? 'FAST' : 'SLOW');\n\n            el.getElementsByClassName('token-initiative')[0].innerHTML =\n                `<a class=\"combatant-control dlturnorder\" title=\"Change Turn\">${initiative}</a>`;\n        });\n\n        super.activateListeners(html);\n\n        // When the turn type is clicked in the tracker, toggle the type, unless NPC\n        html.find('.dlturnorder').click(async ev => {\n            const li = ev.currentTarget.closest('li');\n            const combatant_id = li.dataset.combatantId;\n            const combatant = combatants.get(combatant_id);\n            if (!combatant || combatant.isNPC) return;\n\n            if (game.user.isGM || combatant.actor.isOwner) {\n                await combatant.actor.update({'system.fast_turn': !combatant.actor.system.fast_turn});\n                if (this.viewed) this.viewed.setupTurns();\n            }\n        });\n    }\n}","import { random_member } from \"../system/utils.js\";\nimport { Attack } from \"./tests.js\";\n\n/**\n * Object representing the effects of a test\n */\nexport class Effect {\n    test = null;\n    type = null;        // Valid values are 'consequence', 'damage' and 'defense'\n    target = 'self';    // Valid values are 'self' and 'target'\n    when = 'always';    // Valid values are 'success', 'failure' and 'always'\n    message = ''\n\n    /**\n     * Constant representing Ignores property\n     *\n     * @type {number}\n     */\n    static IGNORES_ALL_ARMOR = -1;\n\n    constructor(dataset, test = null) {\n        Object.assign(this, dataset);   // Assign properties from the dataset\n        if (test) this.test = test;     // Assign the test\n        this.validate(dataset);         // Validate the dataset\n    }\n\n    /**\n     * Validate whether this Effect object meets basic requirements\n     */\n    validate() {\n        if (!['consequence', 'damage', 'defense', 'message'].includes(this.type))\n            throw `Unknown type ${this.type}`;\n    }\n\n    /**\n     * Is this the right time to execute this effect?\n     *\n     * @param {string} when\n     * @return {boolean}\n     */\n    right_time(when) {\n        return this.when === 'always' || this.when === when;\n    }\n\n    /**\n     * Format this effect for concise display in a chat card\n     *\n     * @param {string} key\n     * @param value\n     * @return {string}\n     */\n    format_message(key, value) {\n        return `<div><strong>${key}:</strong> ${value}</div>`;\n    }\n\n    /**\n     * Summarize this effect for easy display\n     *\n     * @return {string}\n     */\n    effect() {\n        if (this.type === 'damage') return `${this.value} ${this.damage_type}`;\n        else if (this.type === 'consequence') return this.name;\n        else return 'Special';\n    }\n\n    /**\n     * Given a consequence name, return a link to the consequence item\n     *\n     * @param {string} name\n     * @return {string}\n     */\n    consequence_link(name = null) {\n        // If no provided name, use the default one\n        if (!name) name = this.name;\n\n        // Get the consequence, if it exists as an item\n        let consequence = game.items.filter(item => item.type === 'consequence' && item.name === name);\n        if (!consequence || !consequence.length) return name;\n        return `<a class=\"content-link\" draggable=\"true\" data-uuid=\"Item.${consequence[0].id}\" data-id=\"${consequence[0].id}\" data-type=\"Item\" data-tooltip=\"Item\"><i class=\"fas fa-suitcase\"></i>${name}</a>`;\n    }\n\n    /**\n     * Given an effect representing damage based on a stat, calculate the actual total\n     *\n     * @return {number}\n     */\n    base_damage() {\n        let damage = 0;\n\n        // Search damage string for each stat and apply\n        let str_dmg = String(this.value).toLowerCase();\n        if (str_dmg.includes('str')) damage += Number(this?.test?.actor?.system?.stats?.strength?.value);\n        if (str_dmg.includes('dex')) damage += Number(this?.test?.actor?.system?.stats?.dexterity?.value);\n        if (str_dmg.includes('spd')) damage += Number(this?.test?.actor?.system?.stats?.speed?.value);\n        if (str_dmg.includes('end')) damage += Number(this?.test?.actor?.system?.stats?.endurance?.value);\n        if (str_dmg.includes('int')) damage += Number(this?.test?.actor?.system?.stats?.intelligence?.value);\n        if (str_dmg.includes('per')) damage += Number(this?.test?.actor?.system?.stats?.perception?.value);\n        if (str_dmg.includes('chr')) damage += Number(this?.test?.actor?.system?.stats?.charisma?.value);\n        if (str_dmg.includes('det')) damage += Number(this?.test?.actor?.system?.stats?.determination?.value);\n\n        // Strip the damage string of any alphabetic characters, add and return\n        str_dmg = str_dmg.replace(/[^\\d.-]/g, '');\n        damage += Number(str_dmg);\n        return damage;\n    }\n\n    /**\n     * Apply this effect if it is the right time to do so\n     *\n     * @param {string} when - success, failure or always\n     * @param dataset - optional dataset representing the originating test\n     * @return {Effect}\n     */\n    apply(when = 'always', dataset) {\n        if (!dataset) dataset = this;\n\n        if (this.type === 'consequence' && this.right_time(when)) this.apply_consequence();\n        if (this.type === 'damage' && this.right_time(when)) this.apply_damage(dataset);\n        if (this.type === 'defense' && this.right_time(when)) this.apply_defense();\n        if (this.type === 'message' && this.right_time(when)) this.apply_message();\n\n        return this;\n    }\n\n    /**\n     * Apply a message effect, generating a message for later display\n     */\n    apply_message() {\n        this.message = this.format_message(this.key ? this.key : 'Message', this.value);\n    }\n\n    /**\n     * Apply a consequence effect, generating a message containing a consequence item link\n     */\n    apply_consequence() {\n        // Attach subject to name if specified\n        const clean_name = this.name ? this.name : 'Unknown';\n        const full_name = this.subject ? `${clean_name} (${this.subject})` : clean_name;\n\n        // Create the embedded consequence link\n        let link = this.consequence_link(full_name);\n        if (!link) link = full_name;\n\n        // Set the message\n        this.message = this.format_message('Consequence', link);\n    }\n\n    /**\n     * Apply a damage effect, generating a damage message and taking into account any attack properties from the\n     *     originating test, if provided\n     *\n     * @param dataset\n     */\n    apply_damage(dataset) {\n        // Calculate the damage\n        let base_damage = this.base_damage();                         // Base damage\n        let margin = this.margin ? Number(this.margin) :              // Get the margin\n            (this.test && this.test.margin ? Number(this.test.margin) : 0);\n\n        // Handle the Feeble property\n        this.properties = Attack.parse_properties(dataset.properties);\n        if (Attack.has_property(this.properties, 'Feeble'))\n            margin = Math.min(base_damage, margin);\n\n        // Handle the Ignores and Pierce properties\n        const ignores = Attack.has_property(this.properties, 'Ignores');\n        const pierce = ignores ? Effect.IGNORES_ALL_ARMOR : Attack.property_value(this.properties, 'Pierce');\n\n        let damage = base_damage + margin;                              // Add base damage and margin\n        if (damage < 0) damage = 0;                                     // Minimum 0\n\n        // Get the damage type\n        const damage_type = this.damage_type ? this.damage_type : '';\n\n        // Set the message\n        this.message = this.format_message('Damage',\n            `<span class=\"damage\" data-pierce=\"${pierce}\">${damage}</span> <span class=\"damage-type\">${damage_type}</span>`);\n    }\n\n    /**\n     * Update the actor's Defense and Willpower TNs after a Defense roll\n     */\n    apply_defense() {\n        if (!this.test) return; // If no test is know, nothing to do now\n\n        // Get the target\n        let target = null;\n        if (this.target === 'self') target = this.test.actor;\n        else if (this.target === 'target' && this.test.target) target = this.test.target;\n\n        // Calculate the TNs\n        const defense_tn = target.system.scores.defense.value + this.test.randomizer;\n        const willpower_tn = target.system.scores.willpower.value + this.test.randomizer;\n\n        // Update defense and willpower\n        target.update({'system.scores.defense.tn': defense_tn});\n        target.update({'system.scores.willpower.tn': willpower_tn});\n\n        // Set the message\n        this.message = this.format_message('Defense', `TN ${defense_tn}`) +\n            this.format_message('Willpower', `TN ${willpower_tn}`);\n    }\n\n    /**\n     * Return a json representation of the effect\n     *\n     * @param test\n     * @return {{}}\n     */\n    static to_json(test) {\n        const json = {};\n        for (let [key, value] of Object.entries(test)) {\n            // For basic data, copy it over to the JSON\n            if (typeof value === 'string' || typeof value === 'number' ||\n                typeof value === 'boolean' || value === null || key === 'properties')\n                json[key] = value;\n        }\n\n        return json;\n    }\n\n    /**\n     * Create a new Effect object from its json representation\n     *\n     * @param obj\n     * @return {Effect}\n     */\n    static from_json(obj) {\n        return new Effect(obj);\n    }\n}\n\n/**\n * A simple data class representing narrative aspects of a wound ahead of being transformed into a consequence.\n *\n * @see WoundFactory - A class for generating Wound objects randomly and from the Grave Wounds table\n */\nclass Wound {\n    /**\n     * A brief description of the wound. This gets turned into the specialization field of the resulting consequence.\n     *\n     * @type {string}\n     */\n    descriptor;\n\n    /**\n     * A longer description of the wound and its effects. This turns into the description field of the resulting\n     * consequence. This is primarily used to describe the game mechanics of Grave Wounds.\n     *\n     * @type {string}\n     */\n    description;\n\n    /**\n     * Creates a new wound and optionally sets descriptor and description\n     *\n     * @param {string} [descriptor='']\n     * @param {string} [description='']\n     */\n    constructor(descriptor, description) {\n        this.descriptor = descriptor || '';\n        this.description = description || '';\n    }\n}\n\n/**\n * Generates Wound objects which get passed to actors and transformed into the appropriate consequences\n *\n * @see Wound - A simple data class representing the wound\n */\nexport class WoundFactory {\n    /**\n     * Generates a Wound object to be given to an actor\n     *\n     * @param {string} type - The damage type of the wound in abbreviated format (e.g. cut, pi, sm)\n     * @param {boolean} critical - Whether the wound is being dealt by a critical hit\n     * @returns {Promise<Wound>}\n     */\n    static async generate_wound(type, critical) {\n        const wound = new Wound();\n\n        // Handle grave wounds\n        if (critical) {\n            const grave_wounds_table = game.tables.getName('Grave Wounds');\n            if (grave_wounds_table) {\n                wound.description = (await grave_wounds_table.draw()).results[0].text;\n                wound.descriptor = wound.description.split(':')[0];\n                return wound;\n            }\n            else {\n                wound.descriptor = random_member(['grave ', 'deep ', 'severe ',\n                    'critical ', 'serious ', 'major ']);\n            }\n        }\n\n        if (type !== 'fat') wound.descriptor += random_member(['arm ', 'leg ', 'abdomen ', 'chest ', 'head ',\n            'neck ', 'hand ', 'foot ', 'knee ', 'elbow ', 'forearm ', 'shin ', 'side ', 'back ', 'cheek ', 'brow ',\n            'shoulder ', 'hip ', 'thigh ', 'groin ', 'rib ', 'skull ', 'face ']);\n\n        switch (type) {\n            case 'burn':\n            case 'cor':\n            case 'fr':\n            case 'tox':\n                wound.descriptor += random_member(['burn', 'sore', 'lesion']);\n                break;\n            case 'cut':\n                wound.descriptor += random_member(['slash', 'cut', 'slice']);\n                break;\n            case 'fat':\n                wound.descriptor += random_member(['tired', 'weakened', 'winded']);\n                break;\n            case 'pi':\n                wound.descriptor += random_member(['stab', 'puncture', 'gash']);\n                break;\n            case 'sm':\n                wound.descriptor += random_member(['bruise', 'trauma', 'rent']);\n                break;\n            default:\n                wound.descriptor += random_member(['wound', 'gash', 'laceration']);\n        }\n\n        return wound;\n    }\n}\n","/**\n * Capitalize the first letter of the string\n *\n * @param {string} word\n * @returns {string}\n * @private\n */\nexport function capitalize(word) {\n\treturn word.charAt(0).toUpperCase() + word.slice(1);\n}\n\n/**\n * Get the actor from the specified IDs, return null if none found\n *\n * @param {string} scene_id\n * @param {string} token_id\n * @param {string} actor_id\n * @returns {SagaMachineActor|null}\n */\nexport function token_actor({scene_id=null, token_id=null, actor_id=null}) {\n\tif (scene_id && token_id) return game.scenes.get(scene_id)?.tokens.get(token_id)?.actor || null;\n\telse if (actor_id) return game.actors.get(actor_id) || null;\n\telse return null;\n}\n\n/**\n * Returns the median value from an array of numbers\n *\n * @param {number[]} arr\n * @returns {number}\n */\nexport function median(arr) {\n\tconst mid = Math.floor(arr.length / 2), nums = [...arr].sort((a, b) => a - b);\n\treturn arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\n}\n\n/**\n * Returns a random member of the provided list\n *\n * @param {*[]} member_list\n * @returns {*}\n */\nexport function random_member(member_list) {\n\treturn member_list[Math.floor(Math.random() * member_list.length)];\n}","import Tagify from \"../libraries/tagify.min.js\";\nimport { capitalize, token_actor } from \"../system/utils.js\";\nimport { ModifierSet } from \"./modifiers.js\";\nimport { Effect } from \"./damage.js\";\n\n/**\n * Object representing a Saga Machine test\n */\nexport class Test {\n    _actor = null;\n    _label = null;\n\n    target = null;\n    target_score = null;\n    critical = false;\n    evaluated = false;\n    margin = null;\n    pairs = null;\n    results = null;\n    skill_value = 0;\n    stat_value = 0;\n    success = false;\n    randomizer = null;\n    total = null;\n    use_pair = false;\n\n    /**\n     * Initialize test from a dataset and validate\n     *\n     * @param dataset\n     */\n    constructor(dataset) {\n        Object.assign(this, dataset);\n        this.validate();\n    }\n\n    /**\n     * Ensure that the test has all the critical properties necessary to evaluate it\n     */\n    validate() {\n        // Make sure the dataset has all the required components, throw an error if not\n        let valid = (this.sceneId && this.tokenId || this.actorId || this.actor) && this.actor && this.actor.system &&\n            (this.actor.system.stats[this.stat] || this.actor.system.scores[this.stat] || !this.stat);\n        if (!valid)\n            throw `Test missing required data: scene=${this.sceneId}, token=${this.tokenId}, actor=${this.actorId}, stat=${this.stat}`;\n\n        // Ensure that numeric parts of the dataset are represented as numbers\n        if (this.tn && !isNaN(this.tn)) this.tn = Number(this.tn);\n        if (this.boons && !isNaN(this.boons)) this.boons = Number(this.boons); else this.boons = 0;\n        if (this.banes && !isNaN(this.banes)) this.banes = Number(this.banes); else this.banes = 0;\n        if (this.modifier && !isNaN(this.modifier)) this.modifier = Number(this.modifier); else this.modifier = 0;\n\n        // Parse the effects, if any\n        if (this.effects) {\n            // If the effects are already parsed, return\n            if (Array.isArray(this.effects) && this.effects.every(c => c instanceof Effect))\n                return;\n\n            // Otherwise, parse them if a string\n            let effects_list = null;\n            if (typeof this.effects === 'string') effects_list = JSON.parse(this.effects);\n            else effects_list = this.effects;\n\n            // And transform the into effect objects\n            if (!Array.isArray(effects_list)) effects_list = [effects_list];\n            for (let i = 0; i < effects_list.length; i++)\n                effects_list[i] = new Effect(effects_list[i], this);\n            this.effects = effects_list;\n        }\n    }\n\n    /**\n     * Set the actor making the test\n     *\n     * @param {SagaMachineActor} actor\n     */\n    set actor(actor) {\n        this._actor = actor;\n    }\n\n    /**\n     * Get the actor making the test, returning null if not specified\n     *\n     * @return {SagaMachineActor|null}\n     */\n    get actor() {\n        if (this._actor) return this._actor;    // Return the cached actor, if available\n\n        // Get the actor corresponding to the token, if any\n        if (this.sceneId && this.tokenId) {\n            const scene = game.scenes.get(sceneId);\n            if (!scene) return null;\n            const token_data = scene.items.get(tokenId);\n            if (!token_data) return null;\n            const token = new Token(token_data);\n            this._actor = token.actor;\n            return this._actor;\n        }\n\n        // Otherwise, get the canonical actor\n        this._actor = game.actors.get(this.actorId) || null\n        return this._actor;\n    }\n\n    /**\n     * Generate the Saga Machine label for the test\n     *\n     * @returns {string}\n     */\n    get label() {\n        if (this._label) return this._label;\n\n        // Lazily generate the label\n        const stat_label = this.stat ? capitalize(this.stat) : '1d10';\n        const skill_label = this.skill ? `/${this.skill}` : '';\n        const tn_label = this.tn ? (isNaN(this.tn) ? ` vs. ${this.tn}` : `-${this.tn}`) : '';\n        this._label = stat_label + skill_label + tn_label;\n        return this._label;\n    }\n\n    /**\n     * Generate the roll string for the test, canceling out boons and banes\n     *\n     * @returns {string}\n     */\n    roll_syntax() {\n        const total = this.boons - this.banes;\n        if (total === 0) return '1d10';\n        else if (total > 0) return `${total+1}d10kh1`;\n        else return `${total*-1+1}d10kl1`;\n    }\n\n    /**\n     * Take the roll results and look for pairs, adding them appropriately if there were boons\n     *\n     * @returns {[number, boolean]} - the individual value of the highest pair, whether a pair should be used\n     */\n    make_pairs() {\n        // If there weren't any boons, there are no pairs\n        if (this.banes >= this.boons) return [null, false];\n\n        // Find the highest pair\n        const found = [];\n        let highest_pair = 0;\n        for (let i of this.results.dice[0].results) {\n            if (found.includes(i.result) && i.result > highest_pair) highest_pair = i.result;\n            found.push(i.result);\n        }\n\n        // Is the highest pair better than the highest result?\n        const use_pair = highest_pair * 2 > this.results.total;\n\n        // Set the total and discards in the roll results\n        let pairs = false;\n        if (highest_pair * 2 > this.results.total) {\n            pairs = highest_pair;\n            this.results._total = highest_pair * 2;\n            let active = 0;\n            for (let i of this.results.dice[0].results) {\n                if (i.result === highest_pair && active < 2) {\n                    i.discarded = false;\n                    active++;\n                }\n                else i.discarded = true;\n            }\n        }\n\n        return [highest_pair, use_pair];\n    }\n\n    /**\n     * Look up the rank of the skill specified in the test\n     *\n     * @return {number}\n     */\n    lookup_skill() {\n        // Separate skill name from specialization\n        let specialization = this.skill.match(/\\(([^\\)]+)\\)/);\n        if (specialization) specialization = specialization[specialization.length-1];\n        let skill = specialization ? this.skill.split(' ')[0] : this.skill;\n\n        // If no specialization, filter skills\n        let matching_skills = [];\n        if (!specialization) {\n            matching_skills = this.actor.items.filter(item => item.type === 'skill' && item.name === skill);\n        }\n\n        // Otherwise, clean the specialization then filter\n        else {\n            specialization = specialization.replace(/[()]/g, '');\n            matching_skills = this.actor.items.filter(item => item.type === 'skill' && item.name === skill &&\n                item.system.specialization === specialization);\n        }\n\n        // If there are no matching skills, try searching by full name\n        if (!matching_skills.length) {\n            matching_skills = this.actor.items.filter(item => item.type === 'skill' && item.name === this.skill);\n        }\n\n        // If there are still no matching skills, return 0\n        if (!matching_skills.length) return 0;\n\n        // Otherwise, look up the rank and return\n        else return Number(matching_skills[0].system.rank);\n    }\n\n    /**\n     * Calculate the total of the test\n     *\n     * @returns {[number, number, number, number]} - total, randomizer, stat, skill values\n     */\n    calc_total() {\n        // Look up the stat or score value\n        let stat = this.stat ? (this.stat in this.actor.system.stats ?\n            this.actor.system.stats[this.stat].value : this.actor.system.scores[this.stat].value) : 0;\n\n        // Get the skill rank\n        const relevant_skill = !!this.skill; // There is a skill for this test\n        const skill = relevant_skill && this.skill !== 'Unskilled' ? // If falsy, the actor is unskilled\n            this.lookup_skill() : 0;\n\n        // Halve the stat in the case of unskilled tests\n        if (relevant_skill && !skill) stat = Math.floor(stat / 2);\n\n        // Which is greater? The highest pair or the highest single die\n        const randomizer = this.pairs ?\n            (this.pairs * 2 > this.results.total ? this.pairs * 2 : this.results.total) : this.results.total;\n\n        // Return the total\n        const total = randomizer + stat + skill + this.modifier;\n        return [total, randomizer, stat, skill];\n    }\n\n    /**\n     * Look up the Defense or Willpower TN of the targeted token\n     *\n     * @returns {[number, SagaMachineActor|null, string|number]} - TN value, target actor, TN string (defense, willpower)\n     */\n    lookup_tn() {\n        if (typeof this.tn !== 'string') return [this.tn, null, null];\n\n        const is_defense = this.tn.toLowerCase() === 'defense';\n        const is_willpower = this.tn.toLowerCase() === 'willpower';\n        if (!is_defense && !is_willpower) return false;\n\n        const actor = game?.user?.targets?.values()?.next()?.value?.actor;\n        const scores = actor?.system?.scores;\n        if (!scores) return [null, null, null];\n\n        // Set properties and return\n        const tn = is_defense ? scores.defense.tn : scores.willpower.tn;\n        return [tn, actor, this.tn];\n    }\n\n    /**\n     * Did the dice turn up double 1's?\n     *\n     * @returns {boolean}\n     */\n     double_ones() {\n        let one_count = 0;\n        for (let i of this.results.dice[0].results)\n            if (i.result === 1) one_count++;\n        return one_count >= 2;\n    }\n\n    /**\n     * Calculate the margin of success or failure from the TN and total\n     *\n     * @returns {[boolean, boolean, number]} -  is success?, is critical?, margin\n     */\n    calc_margin() {\n        // Handle unknown TN\n        if (!this.tn) return [null, null, null];\n\n        // Calculate margin, success and criticals\n        let margin = Math.abs(this.total - this.tn);\n        let success = this.total >= this.tn;\n        let critical = margin >= this.tn || this.total < this.tn/2;\n\n        // Also check for double 1's on a bane being a critical failure\n        if (this.banes > this.boons && this.double_ones()) {\n            if (success) {\n                success = false;\n                margin = 0;\n            }\n            critical = true;\n        }\n\n        return [success, critical, margin];\n    }\n\n    /**\n     * Evaluate the test\n     *\n     * @returns {Test}\n     */\n    async evaluate() {\n        // Perform the roll and get the results\n        const roll_str = this.roll_syntax();\n        const roll = new Roll(roll_str);\n        this.results = await roll.evaluate();\n\n        // Make pairs and calculate the total\n        [this.pairs, this.use_pair] = this.make_pairs();\n        [this.total, this.randomizer, this.stat_value, this.skill_value] = this.calc_total();\n\n        // Determine success, critical and calculate the margin\n        [this.tn, this.target, this.target_score] = this.lookup_tn();\n        [this.success, this.critical, this.margin] = this.calc_margin();\n\n        // Mark as evaluated and return\n        this.evaluated = true;\n        return this;\n    }\n\n    /**\n     * Apply the effects of the action, depending on success or failure\n     *\n     * @param dataset\n     * @return {Promise<void>}\n     */\n    async apply_effects(dataset) {\n        if (!this.effects) this.effects = []; // Init effects, if needed\n        const properties = dataset?.properties || this.properties || [];\n        if (!this.effects_evaluated) {\n            // Handle extra hits and shots from the Auto property\n            if (Attack.has_property(properties, 'Auto')) {\n                const base_attack = this.basic_attack_damage() || {value: 0, damage_type: 'sm'};\n                for (let m_count = this.margin - 5; m_count > 0; m_count -= 5)\n                    this.effects.push(new Effect({\n                        type: 'damage',\n                        value: base_attack.value,\n                        damage_type: base_attack.damage_type,\n                        margin: m_count,\n                        when: 'success',\n                        target: 'target',\n                        properties: properties\n                    }, this));\n                this.effects.push(new Effect({\n                    type: 'message',\n                    key: 'Ammo',\n                    value: `Automatic fire consumes ${Attack.property_value(properties, 'Auto')} shots.`\n                }, this));\n            }\n\n            // Handle the Stun property\n            if (Attack.has_property(properties, 'Stun'))\n                this.effects.push(new Effect({ type: 'consequence', name: 'Stun', when: 'success', target: 'target' }, this));\n\n            const ordering = ['defense', 'damage', 'consequence', 'message'];\n            this.effects.sort((a, b) => {\n                if (ordering.indexOf(a.type) > ordering.indexOf(b.type)) return 1;\n                if (ordering.indexOf(a.type) < ordering.indexOf(b.type)) return -1;\n                if (ordering.indexOf(a.type) === ordering.indexOf(b.type)) return 0;\n            });\n            this.effects_evaluated = true;\n        }\n\n        // Apply effects\n        const when = this.success ? 'success' : (this.tn ? 'failure' : 'always');\n        for (let c of this.effects) c.apply(when, dataset);\n    }\n\n    /**\n     * Get the test's first 'damage' type Effect object, return null is no matches\n     *\n     * @return {Effect|null}\n     */\n    basic_attack_damage() {\n        const damage_effects = this.effects.filter(c => c.type === 'damage');\n        if (damage_effects.length) return damage_effects[0];\n        else return null;\n    }\n\n    /**\n     * Return the \"flavor\" portion of the test's chat card\n     *\n     * @return {string}\n     */\n    flavor() {\n        // Create target and result messages\n        const target_message = this.target ?\n            `<div><strong>Target:</strong> ${this.target.name} (${capitalize(this.target_score)} ${this.tn})</div>` : '';\n        const success_message = (this.critical ? 'Critical ' : '') +\n            (this.target_score ? (this.success ? 'Hit!' : 'Miss!') : (this.success ? 'Success!' : 'Failure!'));\n        const success_class = (this.critical ? 'critical ' : '') + (this.success ? 'success' : 'failure');\n        const result_message = this.tn ?\n            `<div><strong>Result:</strong> <span class=\"${success_class}\">${success_message}</span> Margin ${this.margin}</div>` : '';\n\n        // Create the effect message, if any\n        let effect_message = '';\n        if (this.effects)\n            for (let c of this.effects)\n                effect_message += c.message;\n\n        // Create the tags\n        let tags = '';\n        if (!!this.stat) tags += `<span class=\"tag\">${capitalize(this.stat)} +${this.stat_value}</span>`;\n        if (!!this.skill && this.skill !== 'Unskilled') tags += `<span class=\"tag\">${this.skill} +${this.skill_value}</span>`;\n        if (this.skill && this.skill_value === 0) tags += '<span class=\"tag\">Unskilled</span>';\n        if (!!this.tags && this.tags.length) this.tags.forEach(t => tags += `<span class=\"tag\">${t}</span>`);\n        if (this.use_pair) tags += '<span class=\"tag\">Pairs!</span>';\n        if (this.use_luck) tags += '<span class=\"tag\">Luck</span>';\n        if (this.edited) tags += '<span class=\"tag\">Edited</span>';\n\n        // Return the result\n        return `<h4 class=\"action\">${this.label}</h4>\n                ${target_message} \n                ${result_message} \n                ${effect_message}\n                <hr />\n                <div class=\"tags\">${tags}</div>`;\n    }\n\n    /**\n     * Generate the expanded roll for the test, to be output as a card in chat\n     *\n     * @returns {string}\n     */\n    dice_html() {\n        let to_return = '<ol class=\"dice-rolls\">';\n        for (let i of this.results.dice[0].results) {\n            const discarded = i.discarded ? 'discarded' : '';\n            to_return += `<li class=\"roll die d10 ${discarded}\">${i.result}</li>`;\n        }\n\n        to_return += '</ol>';\n        return to_return;\n    }\n\n    /**\n     * Return the \"content\" portion of the test's chat card\n     *\n     * @return {string}\n     */\n    content() {\n        const stat_span = this.stat_value ? `+ <span title=\"Stat\">${this.stat_value}</span>` : '';\n        const skill_span = this.skill_value ? `+ <span title=\"Skill\">${this.skill_value}</span>` : '';\n        const modifier_span = this.modifier ? `+ <span title=\"Modifier\">${this.modifier}</span>` : '';\n        const test_json = JSON.stringify(Test.to_json(this));\n\n        return `\n            <div class=\"dice-roll\">\n                <div class=\"dice-result\">\n                    <div class=\"dice-formula\">\n                        ${this.results.formula} ${skill_span} ${stat_span} ${modifier_span}\n                    </div>\n                    <div class=\"dice-tooltip\">\n                        <section class=\"tooltip-part\">\n                            <div class=\"dice\">\n                                <header class=\"part-header flexrow\">\n                                    <span class=\"part-formula\">${this.results.formula}</span>\n                                    <span class=\"part-total\">${this.results.total}</span>\n                                </header>\n                                ${this.dice_html()}\n                            </div>\n                        </section>\n                    </div>\n                    <h4 class=\"dice-total\">${this.total}</h4>\n                </div>\n            </div>\n            <input type=\"hidden\" class=\"test-json\" value='${test_json}' />`;\n    }\n\n    /**\n     * Send the test to chat\n     *\n     * @param {boolean} whisper\n     * @param {Roll[]|null} rolls\n     * @return {Promise<void>}\n     */\n    async to_chat({ whisper= false, rolls= null }) {\n        // Create the chat message\n        const message = await this.results.toMessage({}, { create: false });\n        message.flavor = this.flavor();\n        message.content = this.content();\n        message.speaker = ChatMessage.getSpeaker({ actor: this.actor });\n\n        // Set the roll, if a custom one was provided\n        if (rolls) {\n            if (!Array.isArray(rolls)) rolls = [rolls];                     // Ensure this is an array\n            message.rolls = rolls.map(r => JSON.stringify(r.toJSON()));     // Convert to what ChatMessage expects\n        }\n\n        // Set as a whisper, if requested\n        if (whisper) {\n            message.type = CONST.CHAT_MESSAGE_TYPES.WHISPER;\n            message.whisper = game.users.filter(u => u.isGM || u.character?.id === this.actor?.id ).map(u => u.id);\n        }\n\n        // Send the message to chat\n        await ChatMessage.create(message);\n    }\n\n    /**\n     * Create a json representation of the specified test\n     *\n     * @param test\n     * @return {*}\n     */\n    static to_json(test) {\n        const json = {};\n        for (let [key, value] of Object.entries(test)) {\n            // For basic data, copy it over to the JSON\n            if (typeof value === 'string' || typeof value === 'number' ||\n                typeof value === 'boolean' || value === null)\n                json[key] = value;\n\n            // Special handling for _actor and target\n            else if (key === '_actor' || key === 'target') {\n                // If not a token actor, copy over actor ID\n                if (!value.isToken) json[key] = { actor_id: value.id };\n\n                // If a token actor, copy over token and scene IDs\n                else json[key] = { token_id: value.token.id, scene_id: value.token.parent.id };\n            }\n\n            // Special handling for effects\n            else if (key === 'effects') {\n                const effect_json = [];\n                for (let con of test.effects)\n                    effect_json.push(Effect.to_json(con));\n                json[key] = effect_json;\n            }\n\n            // Special handling for results\n            else if (key === 'results')\n                json[key] = {\n                    _evaluated: value._evaluated,\n                    _formula: value._formula,\n                    _total: value._total,\n                    _terms: value.terms[0].results\n                };\n        }\n\n        return json;\n    }\n\n    /**\n     * Create a Test object from the given json representation\n     *\n     * @param obj\n     * @return {Test}\n     */\n    static from_json(obj) {\n        const dataset = {};\n        for (let [key, value] of Object.entries(obj)) {\n            // For basic data, copy it over to the JSON\n            if (typeof value === 'string' || typeof value === 'number' ||\n                typeof value === 'boolean' || value === null)\n                dataset[key] = obj[key]\n\n            // Special handling for _actor and target\n            else if (key === '_actor' || key === 'target') {\n                if (value instanceof game.sagamachine.SagaMachineActor) dataset[key] = value;\n                else dataset[key] = token_actor({\n                    scene_id: value.scene_id,\n                    token_id: value.token_id,\n                    actor_id: value.actor_id\n                });\n            }\n\n            // Special handling for effects\n            else if (key === 'effects') dataset[key] = value;\n\n            // Special handling for results\n            else if (key === 'results') {\n                dataset[key] = new Roll(value._formula);\n                dataset[key]._evaluated = value._evaluated;\n                dataset[key]._formula = value._formula;\n                dataset[key]._total = value._total;\n                dataset[key].terms = [new Die({faces: 10})];\n                dataset[key].terms[0].results = value._terms;\n            }\n        }\n\n        return new Test(dataset);\n    }\n}\n\n/**\n * Object representing an Attack test\n *\n * @extends Test\n */\nexport class Attack extends Test {\n    _effects_string = null;\n    _effect = null;\n\n    /**\n     * Get the name of the attack, defaulting to \"Unnamed Attack\"\n     *\n     * @return {string}\n     */\n    get full_name() {\n        return this.name || \"Unnamed Attack\";\n    }\n\n    /**\n     * Return a json string containing all the attack's effects - used in HTML templates\n     *\n     * @return {string}\n     */\n    get effects_string() {\n        // Return cached version\n        if (this._effects_string) return this._effects_string;\n\n        // Or lazily generate the string and return\n        this._effects_string = this.effects ?\n            JSON.stringify(this.effects.map(c => Effect.to_json(c))) : \"[]\";\n        return this.effects_string;\n    }\n\n    /**\n     * Returns a list containing all the attack's Effect objects\n     *\n     * @return {Effect[]}\n     */\n    get effect() {\n        // Return cached version\n        if (this._effect) return this._effect;\n\n        // If there are no effects specified, return empty string, otherwise, compile the list of effects\n        this._effect = this.effects ? this.effects.map(c => c.effect()).join(', ') : '';\n        return this._effect\n    }\n\n    /**\n     * Returns whether this test is an attack (shorthand: targets Defense or Willpower)\n     *\n     * @param dataset\n     * @return {boolean}\n     */\n    static is_attack(dataset) {\n        return dataset.tn === 'Defense' || dataset.tn === 'Willpower';\n    }\n\n    /**\n     * Returns whether the character meets the strength requirements for the attack\n     *\n     * @param dataset\n     * @param {SagaMachineActor} actor\n     * @return {boolean}\n     */\n    static strength_met(dataset, actor=null) {\n        // Get a reference to the actor if one has not been provided\n        if (!actor) actor = token_actor({\n            scene_id: dataset.sceneId,\n            token_id: dataset.tokenId,\n            actor_id: dataset.actorId\n        });\n\n        const strength = actor.system.stats.strength.value;                     // Get the actor's strength\n        const damage = Attack.damage(dataset);                                  // Get the attack's damage\n        const properties = Attack.parse_properties(dataset.properties);\n        const light = Attack.property_value(properties, 'Light');       // Get the Light X property, if any\n        const hands = Attack.property_value(properties, 'Hands');  // Get the Hands X property\n\n        // Check to see if the strength requirement is met\n        if (hands >= 2) return strength >= (light || (damage/2))\n        else            return strength >= (light || damage)\n    }\n\n    /**\n     * Returns the base damage value of the attack\n     *\n     * @param dataset\n     * @return {number}\n     */\n    static damage(dataset) {\n        if (!dataset.effects) return 0;\n\n        // Parse effects into a list\n        let effects_list = JSON.parse(dataset.effects);\n        if (!Array.isArray(effects_list)) effects_list = [effects_list];\n\n        // Get the damage\n        for (let i = 0; i < effects_list.length; i++) {\n            const effect = new Effect(effects_list[i]);\n            if (effect.type === 'damage') return effect.base_damage();\n        }\n\n        return 0;\n    }\n\n    /**\n     * Parses the attacks properties, if necessary, from string to list\n     *\n     * @param properties\n     * @return {string[]}\n     */\n    static parse_properties(properties) {\n        if (typeof properties === 'string') return properties.split(',').map(t => t.trim());\n        else if (Array.isArray(properties)) return properties;\n        else return [];\n    }\n\n    /**\n     * Returns the value of the specified property, returning 0 if not specified or no match\n     *\n     * @param {string|string[]} properties\n     * @param {string} property\n     * @return {number}\n     */\n    static property_value(properties, property) {\n        for (const prop of Attack.parse_properties(properties)) {\n            if (prop.toLowerCase().startsWith(`${property.toLowerCase()} `)) {\n                const [, val] = prop.split(' ');\n                return Number(val);\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Returns whether the attack has the specified property\n     *\n     * @param {string|string[]} properties\n     * @param {string} property\n     * @return {boolean}\n     */\n    static has_property(properties, property) {\n        return Attack.parse_properties(properties).map(p => p.split(' ')[0]).includes(property);\n    }\n}\n\n/**\n * Show a test dialog for the test provided in the dataset\n *\n * @param dataset\n * @returns {Promise<void>}\n * @private\n */\nexport async function test_dialog(dataset) {\n    const actor = token_actor({\n        scene_id: dataset.sceneId,\n        token_id: dataset.tokenId,\n        actor_id: dataset.actorId\n    });\n\n    const dialog_content = await renderTemplate(\"systems/saga-machine/templates/test-dialog.html\",\n        { actor: { ...actor.sheet.getData().data }, ...dataset });\n\n    new Dialog({\n        title: \"Make Test\",\n        content: dialog_content,\n        render: html => {\n            // Initialize the modifiers (tag) widget\n            const modifiers = actor.modifiers(dataset);         // Get the list of modifiers from consequences\n            const input = html.find('input[name=modifiers]');   // Get the modifiers input DOM element\n            if (!input) return;\n            input.val(JSON.stringify(modifiers.map(m => m.tag())));\n            const tagify = new Tagify(input[0], {\n                duplicates: true,\n                transformTag: tag_data => {\n                    tag_data.style = ModifierSet.color(tag_data.value);\n                    if (isNaN(parseInt(tag_data.value.split(\" \").at(-1))))\n                        tag_data.value = tag_data.value.replaceAll('+', '⊕').replaceAll('-', '⊖');\n                }\n            });\n\n            // Redo modifiers when the stat, score or TN is changed\n            const inputs = html.find('select[name=stat], select[name=score], input[name=tn]');\n            inputs.on('change', event => {\n                // Get the new test parameters\n                const modified_dataset = foundry.utils.deepClone(dataset);\n                modified_dataset.stat = html.find('select[name=stat]').val();\n                modified_dataset.score = html.find('select[name=score]').val();\n                modified_dataset.tn = html.find('input[name=tn]').val();\n\n                // Get the new modifiers and set the tag widget\n                const new_modifiers = actor.modifiers(modified_dataset);\n                input.val(JSON.stringify(new_modifiers.map(m => m.tag())));\n            });\n        },\n        buttons: {\n            roll: {\n                label: \"Make Test\",\n                callback: async (html) => {\n                    html.find('select[name=stat] > option:selected').trigger('focus');\n                    setTimeout(async () => { // Wait for unfocus event on modifier widget\n                        // Gather form data\n                        let stat = html.find('select[name=stat] > option:selected').val();\n                        let score = html.find('select[name=score] > option:selected').val();\n                        let skill = html.find('select[name=skill] > option:selected').val();\n                        const { boons, banes, modifier, tags } = ModifierSet.total_modifiers(\n                            ModifierSet.list_from_string(html.find('input[name=modifiers]').val())\n                        );\n                        const tn = html.find('input[name=tn]').val();\n                        const effects = html.find('input[name=effects]').val();\n\n                        // Create and evaluate the test\n                        const test = new Test({\n                            actor: actor,\n                            stat: stat || score,\n                            skill: skill || null,\n                            boons: boons || 0,\n                            banes: banes || 0,\n                            modifier: modifier || 0,\n                            tags: tags,\n                            tn: tn || null,\n                            effects: effects || null\n                        });\n                        await test.evaluate();\n\n                        // Apply any immediate test effects\n                        await test.apply_effects(dataset);\n\n                        // Send the message to chat\n                        const whisper = !!dataset['whisper'];\n                        await test.to_chat({whisper: whisper});\n                    }, 200);\n                },\n                icon: `<i class=\"fas fa-check\"></i>`\n            }\n        },\n        default: \"roll\"\n    }).render(true, { width: 450 });\n}\n","/**\n * Tagify (v 4.17.9) - tags input component\n * By undefined\n * https://github.com/yairEO/tagify\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n * \n * THE SOFTWARE IS NOT PERMISSIBLE TO BE SOLD.\n */\n\n!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).Tagify=e()}(this,(function(){\"use strict\";function t(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);e&&(s=s.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,s)}return i}function e(e){for(var s=1;s<arguments.length;s++){var a=null!=arguments[s]?arguments[s]:{};s%2?t(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):t(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(t,e,i){return(e=function(t){var e=function(t,e){if(\"object\"!=typeof t||null===t)return t;var i=t[Symbol.toPrimitive];if(void 0!==i){var s=i.call(t,e||\"default\");if(\"object\"!=typeof s)return s;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return(\"string\"===e?String:Number)(t)}(t,\"string\");return\"symbol\"==typeof e?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}var s=\"​\";const a=(t,e,i,s)=>(t=\"\"+t,e=\"\"+e,s&&(t=t.trim(),e=e.trim()),i?t==e:t.toLowerCase()==e.toLowerCase()),n=(t,e)=>t&&Array.isArray(t)&&t.map((t=>o(t,e)));function o(t,e){var i,s={};for(i in t)e.indexOf(i)<0&&(s[i]=t[i]);return s}function r(t){var e=document.createElement(\"div\");return t.replace(/\\&#?[0-9a-z]+;/gi,(function(t){return e.innerHTML=t,e.innerText}))}function l(t){return(new DOMParser).parseFromString(t.trim(),\"text/html\").body.firstElementChild}function d(t,e){for(e=e||\"previous\";t=t[e+\"Sibling\"];)if(3==t.nodeType)return t}function h(t){return\"string\"==typeof t?t.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\").replace(/`|'/g,\"&#039;\"):t}function g(t){var e=Object.prototype.toString.call(t).split(\" \")[1].slice(0,-1);return t===Object(t)&&\"Array\"!=e&&\"Function\"!=e&&\"RegExp\"!=e&&\"HTMLUnknownElement\"!=e}function p(t,e,i){function s(t,e){for(var i in e)if(e.hasOwnProperty(i)){if(g(e[i])){g(t[i])?s(t[i],e[i]):t[i]=Object.assign({},e[i]);continue}if(Array.isArray(e[i])){t[i]=Object.assign([],e[i]);continue}t[i]=e[i]}}return t instanceof Object||(t={}),s(t,e),i&&s(t,i),t}function c(){const t=[],e={};for(let i of arguments)for(let s of i)g(s)?e[s.value]||(t.push(s),e[s.value]=1):t.includes(s)||t.push(s);return t}function u(t){return String.prototype.normalize?\"string\"==typeof t?t.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g,\"\"):void 0:t}var m=()=>/(?=.*chrome)(?=.*android)/i.test(navigator.userAgent);function v(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(t=>(t^crypto.getRandomValues(new Uint8Array(1))[0]&15>>t/4).toString(16)))}function f(t){return t&&t.classList&&t.classList.contains(this.settings.classNames.tag)}function T(t,e){var i=window.getSelection();return e=e||i.getRangeAt(0),\"string\"==typeof t&&(t=document.createTextNode(t)),e&&(e.deleteContents(),e.insertNode(t)),t}function w(t,e,i){return t?(e&&(t.__tagifyTagData=i?e:p({},t.__tagifyTagData||{},e)),t.__tagifyTagData):(console.warn(\"tag element doesn't exist\",t,e),e)}function b(t){if(t&&t.parentNode){var e=t,i=window.getSelection(),s=i.getRangeAt(0);i.rangeCount&&(s.setStartAfter(e),s.collapse(!0),i.removeAllRanges(),i.addRange(s))}}function y(t,e){t.forEach((t=>{if(w(t.previousSibling)||!t.previousSibling){var i=document.createTextNode(s);t.before(i),e&&b(i)}}))}var x={delimiters:\",\",pattern:null,tagTextProp:\"value\",maxTags:1/0,callbacks:{},addTagOnBlur:!0,onChangeAfterBlur:!0,duplicates:!1,whitelist:[],blacklist:[],enforceWhitelist:!1,userInput:!0,keepInvalidTags:!1,createInvalidTags:!0,mixTagsAllowedAfter:/,|\\.|\\:|\\s/,mixTagsInterpolator:[\"[[\",\"]]\"],backspace:!0,skipInvalid:!1,pasteAsTags:!0,editTags:{clicks:2,keepInvalid:!0},transformTag:()=>{},trim:!0,a11y:{focusableTags:!1},mixMode:{insertAfterTag:\" \"},autoComplete:{enabled:!0,rightKey:!1},classNames:{namespace:\"tagify\",mixMode:\"tagify--mix\",selectMode:\"tagify--select\",input:\"tagify__input\",focus:\"tagify--focus\",tagNoAnimation:\"tagify--noAnim\",tagInvalid:\"tagify--invalid\",tagNotAllowed:\"tagify--notAllowed\",scopeLoading:\"tagify--loading\",hasMaxTags:\"tagify--hasMaxTags\",hasNoTags:\"tagify--noTags\",empty:\"tagify--empty\",inputInvalid:\"tagify__input--invalid\",dropdown:\"tagify__dropdown\",dropdownWrapper:\"tagify__dropdown__wrapper\",dropdownHeader:\"tagify__dropdown__header\",dropdownFooter:\"tagify__dropdown__footer\",dropdownItem:\"tagify__dropdown__item\",dropdownItemActive:\"tagify__dropdown__item--active\",dropdownItemHidden:\"tagify__dropdown__item--hidden\",dropdownInital:\"tagify__dropdown--initial\",tag:\"tagify__tag\",tagText:\"tagify__tag-text\",tagX:\"tagify__tag__removeBtn\",tagLoading:\"tagify__tag--loading\",tagEditing:\"tagify__tag--editable\",tagFlash:\"tagify__tag--flash\",tagHide:\"tagify__tag--hide\"},dropdown:{classname:\"\",enabled:2,maxItems:10,searchKeys:[\"value\",\"searchBy\"],fuzzySearch:!0,caseSensitive:!1,accentedSearch:!0,includeSelectedTags:!1,highlightFirst:!1,closeOnSelect:!0,clearOnSelect:!0,position:\"all\",appendTarget:null},hooks:{beforeRemoveTag:()=>Promise.resolve(),beforePaste:()=>Promise.resolve(),suggestionClick:()=>Promise.resolve()}};function O(){this.dropdown={};for(let t in this._dropdown)this.dropdown[t]=\"function\"==typeof this._dropdown[t]?this._dropdown[t].bind(this):this._dropdown[t];this.dropdown.refs()}var D={refs(){this.DOM.dropdown=this.parseTemplate(\"dropdown\",[this.settings]),this.DOM.dropdown.content=this.DOM.dropdown.querySelector(\"[data-selector='tagify-suggestions-wrapper']\")},getHeaderRef(){return this.DOM.dropdown.querySelector(\"[data-selector='tagify-suggestions-header']\")},getFooterRef(){return this.DOM.dropdown.querySelector(\"[data-selector='tagify-suggestions-footer']\")},getAllSuggestionsRefs(){return[...this.DOM.dropdown.content.querySelectorAll(this.settings.classNames.dropdownItemSelector)]},show(t){var e,i,s,n=this.settings,o=\"mix\"==n.mode&&!n.enforceWhitelist,r=!n.whitelist||!n.whitelist.length,l=\"manual\"==n.dropdown.position;if(t=void 0===t?this.state.inputText:t,!(r&&!o&&!n.templates.dropdownItemNoMatch||!1===n.dropdown.enable||this.state.isLoading||this.settings.readonly)){if(clearTimeout(this.dropdownHide__bindEventsTimeout),this.suggestedListItems=this.dropdown.filterListItems(t),t&&!this.suggestedListItems.length&&(this.trigger(\"dropdown:noMatch\",t),n.templates.dropdownItemNoMatch&&(s=n.templates.dropdownItemNoMatch.call(this,{value:t}))),!s){if(this.suggestedListItems.length)t&&o&&!this.state.editing.scope&&!a(this.suggestedListItems[0].value,t)&&this.suggestedListItems.unshift({value:t});else{if(!t||!o||this.state.editing.scope)return this.input.autocomplete.suggest.call(this),void this.dropdown.hide();this.suggestedListItems=[{value:t}]}i=\"\"+(g(e=this.suggestedListItems[0])?e.value:e),n.autoComplete&&i&&0==i.indexOf(t)&&this.input.autocomplete.suggest.call(this,e)}this.dropdown.fill(s),n.dropdown.highlightFirst&&this.dropdown.highlightOption(this.DOM.dropdown.content.querySelector(n.classNames.dropdownItemSelector)),this.state.dropdown.visible||setTimeout(this.dropdown.events.binding.bind(this)),this.state.dropdown.visible=t||!0,this.state.dropdown.query=t,this.setStateSelection(),l||setTimeout((()=>{this.dropdown.position(),this.dropdown.render()})),setTimeout((()=>{this.trigger(\"dropdown:show\",this.DOM.dropdown)}))}},hide(t){var e=this.DOM,i=e.scope,s=e.dropdown,a=\"manual\"==this.settings.dropdown.position&&!t;if(s&&document.body.contains(s)&&!a)return window.removeEventListener(\"resize\",this.dropdown.position),this.dropdown.events.binding.call(this,!1),i.setAttribute(\"aria-expanded\",!1),s.parentNode.removeChild(s),setTimeout((()=>{this.state.dropdown.visible=!1}),100),this.state.dropdown.query=this.state.ddItemData=this.state.ddItemElm=this.state.selection=null,this.state.tag&&this.state.tag.value.length&&(this.state.flaggedTags[this.state.tag.baseOffset]=this.state.tag),this.trigger(\"dropdown:hide\",s),this},toggle(t){this.dropdown[this.state.dropdown.visible&&!t?\"hide\":\"show\"]()},render(){var t,e,i,s=(t=this.DOM.dropdown,(i=t.cloneNode(!0)).style.cssText=\"position:fixed; top:-9999px; opacity:0\",document.body.appendChild(i),e=i.clientHeight,i.parentNode.removeChild(i),e),a=this.settings;return\"number\"==typeof a.dropdown.enabled&&a.dropdown.enabled>=0?(this.DOM.scope.setAttribute(\"aria-expanded\",!0),document.body.contains(this.DOM.dropdown)||(this.DOM.dropdown.classList.add(a.classNames.dropdownInital),this.dropdown.position(s),a.dropdown.appendTarget.appendChild(this.DOM.dropdown),setTimeout((()=>this.DOM.dropdown.classList.remove(a.classNames.dropdownInital)))),this):this},fill(t){t=\"string\"==typeof t?t:this.dropdown.createListHTML(t||this.suggestedListItems);var e,i=this.settings.templates.dropdownContent.call(this,t);this.DOM.dropdown.content.innerHTML=(e=i)?e.replace(/\\>[\\r\\n ]+\\</g,\"><\").split(/>\\s+</).join(\"><\").trim():\"\"},fillHeaderFooter(){var t=this.dropdown.filterListItems(this.state.dropdown.query),e=this.parseTemplate(\"dropdownHeader\",[t]),i=this.parseTemplate(\"dropdownFooter\",[t]),s=this.dropdown.getHeaderRef(),a=this.dropdown.getFooterRef();e&&s?.parentNode.replaceChild(e,s),i&&a?.parentNode.replaceChild(i,a)},refilter(t){t=t||this.state.dropdown.query||\"\",this.suggestedListItems=this.dropdown.filterListItems(t),this.dropdown.fill(),this.suggestedListItems.length||this.dropdown.hide(),this.trigger(\"dropdown:updated\",this.DOM.dropdown)},position(t){var e=this.settings.dropdown;if(\"manual\"!=e.position){var i,s,a,n,o,r,l=this.DOM.dropdown,d=e.placeAbove,h=e.appendTarget===document.body,g=h?window.pageYOffset:e.appendTarget.scrollTop,p=document.fullscreenElement||document.webkitFullscreenElement||document.documentElement,c=p.clientHeight,u=Math.max(p.clientWidth||0,window.innerWidth||0)>480?e.position:\"all\",m=this.DOM[\"input\"==u?\"input\":\"scope\"];if(t=t||l.clientHeight,this.state.dropdown.visible){if(\"text\"==u?(a=(i=function(){const t=document.getSelection();if(t.rangeCount){const e=t.getRangeAt(0),i=e.startContainer,s=e.startOffset;let a,n;if(s>0)return n=document.createRange(),n.setStart(i,s-1),n.setEnd(i,s),a=n.getBoundingClientRect(),{left:a.right,top:a.top,bottom:a.bottom};if(i.getBoundingClientRect)return i.getBoundingClientRect()}return{left:-9999,top:-9999}}()).bottom,s=i.top,n=i.left,o=\"auto\"):(r=function(t){for(var e=0,i=0;t&&t!=p;)e+=t.offsetLeft||0,i+=t.offsetTop||0,t=t.parentNode;return{left:e,top:i}}(e.appendTarget),s=(i=m.getBoundingClientRect()).top-r.top,a=i.bottom-1-r.top,n=i.left-r.left,o=i.width+\"px\"),!h){let t=function(){for(var t=0,i=e.appendTarget.parentNode;i;)t+=i.scrollTop||0,i=i.parentNode;return t}();s+=t,a+=t}s=Math.floor(s),a=Math.ceil(a),d=void 0===d?c-i.bottom<t:d,l.style.cssText=\"left:\"+(n+window.pageXOffset)+\"px; width:\"+o+\";\"+(d?\"top: \"+(s+g)+\"px\":\"top: \"+(a+g)+\"px\"),l.setAttribute(\"placement\",d?\"top\":\"bottom\"),l.setAttribute(\"position\",u)}}},events:{binding(){let t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];var e=this.dropdown.events.callbacks,i=this.listeners.dropdown=this.listeners.dropdown||{position:this.dropdown.position.bind(this,null),onKeyDown:e.onKeyDown.bind(this),onMouseOver:e.onMouseOver.bind(this),onMouseLeave:e.onMouseLeave.bind(this),onClick:e.onClick.bind(this),onScroll:e.onScroll.bind(this)},s=t?\"addEventListener\":\"removeEventListener\";\"manual\"!=this.settings.dropdown.position&&(document[s](\"scroll\",i.position,!0),window[s](\"resize\",i.position),window[s](\"keydown\",i.onKeyDown)),this.DOM.dropdown[s](\"mouseover\",i.onMouseOver),this.DOM.dropdown[s](\"mouseleave\",i.onMouseLeave),this.DOM.dropdown[s](\"mousedown\",i.onClick),this.DOM.dropdown.content[s](\"scroll\",i.onScroll)},callbacks:{onKeyDown(t){if(this.state.hasFocus&&!this.state.composing){var e=this.DOM.dropdown.querySelector(this.settings.classNames.dropdownItemActiveSelector),i=this.dropdown.getSuggestionDataByNode(e);switch(t.key){case\"ArrowDown\":case\"ArrowUp\":case\"Down\":case\"Up\":t.preventDefault();var s=this.dropdown.getAllSuggestionsRefs(),a=\"ArrowUp\"==t.key||\"Up\"==t.key;e&&(e=this.dropdown.getNextOrPrevOption(e,!a)),e&&e.matches(this.settings.classNames.dropdownItemSelector)||(e=s[a?s.length-1:0]),this.dropdown.highlightOption(e,!0);break;case\"Escape\":case\"Esc\":this.dropdown.hide();break;case\"ArrowRight\":if(this.state.actions.ArrowLeft)return;case\"Tab\":if(\"mix\"!=this.settings.mode&&e&&!this.settings.autoComplete.rightKey&&!this.state.editing){t.preventDefault();var n=this.dropdown.getMappedValue(i);return this.input.autocomplete.set.call(this,n),!1}return!0;case\"Enter\":t.preventDefault(),this.settings.hooks.suggestionClick(t,{tagify:this,tagData:i,suggestionElm:e}).then((()=>{if(e)return this.dropdown.selectOption(e),e=this.dropdown.getNextOrPrevOption(e,!a),void this.dropdown.highlightOption(e);this.dropdown.hide(),\"mix\"!=this.settings.mode&&this.addTags(this.state.inputText.trim(),!0)})).catch((t=>t));break;case\"Backspace\":{if(\"mix\"==this.settings.mode||this.state.editing.scope)return;const t=this.input.raw.call(this);\"\"!=t&&8203!=t.charCodeAt(0)||(!0===this.settings.backspace?this.removeTags():\"edit\"==this.settings.backspace&&setTimeout(this.editTag.bind(this),0))}}}},onMouseOver(t){var e=t.target.closest(this.settings.classNames.dropdownItemSelector);e&&this.dropdown.highlightOption(e)},onMouseLeave(t){this.dropdown.highlightOption()},onClick(t){if(0==t.button&&t.target!=this.DOM.dropdown&&t.target!=this.DOM.dropdown.content){var e=t.target.closest(this.settings.classNames.dropdownItemSelector),i=this.dropdown.getSuggestionDataByNode(e);this.state.actions.selectOption=!0,setTimeout((()=>this.state.actions.selectOption=!1),50),this.settings.hooks.suggestionClick(t,{tagify:this,tagData:i,suggestionElm:e}).then((()=>{e?this.dropdown.selectOption(e,t):this.dropdown.hide()})).catch((t=>console.warn(t)))}},onScroll(t){var e=t.target,i=e.scrollTop/(e.scrollHeight-e.parentNode.clientHeight)*100;this.trigger(\"dropdown:scroll\",{percentage:Math.round(i)})}}},getSuggestionDataByNode(t){var e=t&&t.getAttribute(\"value\");return this.suggestedListItems.find((t=>t.value==e))||null},getNextOrPrevOption(t){let e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];var i=this.dropdown.getAllSuggestionsRefs(),s=i.findIndex((e=>e===t));return e?i[s+1]:i[s-1]},highlightOption(t,e){var i,s=this.settings.classNames.dropdownItemActive;if(this.state.ddItemElm&&(this.state.ddItemElm.classList.remove(s),this.state.ddItemElm.removeAttribute(\"aria-selected\")),!t)return this.state.ddItemData=null,this.state.ddItemElm=null,void this.input.autocomplete.suggest.call(this);i=this.dropdown.getSuggestionDataByNode(t),this.state.ddItemData=i,this.state.ddItemElm=t,t.classList.add(s),t.setAttribute(\"aria-selected\",!0),e&&(t.parentNode.scrollTop=t.clientHeight+t.offsetTop-t.parentNode.clientHeight),this.settings.autoComplete&&(this.input.autocomplete.suggest.call(this,i),this.dropdown.position())},selectOption(t,e){var i=this.settings.dropdown,s=i.clearOnSelect,a=i.closeOnSelect;if(!t)return this.addTags(this.state.inputText,!0),void(a&&this.dropdown.hide());e=e||{};var n=t.getAttribute(\"value\"),o=\"noMatch\"==n,r=this.suggestedListItems.find((t=>(t.value??t)==n));this.trigger(\"dropdown:select\",{data:r,elm:t,event:e}),n&&(r||o)?(this.state.editing?this.onEditTagDone(null,p({__isValid:!0},this.normalizeTags([r])[0])):this[\"mix\"==this.settings.mode?\"addMixTags\":\"addTags\"]([r||this.input.raw.call(this)],s),this.DOM.input.parentNode&&(setTimeout((()=>{this.DOM.input.focus(),this.toggleFocusClass(!0)})),a&&setTimeout(this.dropdown.hide.bind(this)),t.addEventListener(\"transitionend\",(()=>{this.dropdown.fillHeaderFooter(),setTimeout((()=>t.remove()),100)}),{once:!0}),t.classList.add(this.settings.classNames.dropdownItemHidden))):a&&setTimeout(this.dropdown.hide.bind(this))},selectAll(t){this.suggestedListItems.length=0,this.dropdown.hide(),this.dropdown.filterListItems(\"\");var e=this.dropdown.filterListItems(\"\");return t||(e=this.state.dropdown.suggestions),this.addTags(e,!0),this},filterListItems(t,e){var i,s,a,n,o,r=this.settings,l=r.dropdown,d=(e=e||{},[]),h=[],p=r.whitelist,c=l.maxItems>=0?l.maxItems:1/0,m=l.searchKeys,v=0;if(!(t=\"select\"==r.mode&&this.value.length&&this.value[0][r.tagTextProp]==t?\"\":t)||!m.length)return d=l.includeSelectedTags?p:p.filter((t=>!this.isTagDuplicate(g(t)?t.value:t))),this.state.dropdown.suggestions=d,d.slice(0,c);function f(t,e){return e.toLowerCase().split(\" \").every((e=>t.includes(e.toLowerCase())))}for(o=l.caseSensitive?\"\"+t:(\"\"+t).toLowerCase();v<p.length;v++){let t,r;i=p[v]instanceof Object?p[v]:{value:p[v]};let c=!Object.keys(i).some((t=>m.includes(t)))?[\"value\"]:m;l.fuzzySearch&&!e.exact?(a=c.reduce(((t,e)=>t+\" \"+(i[e]||\"\")),\"\").toLowerCase().trim(),l.accentedSearch&&(a=u(a),o=u(o)),t=0==a.indexOf(o),r=a===o,s=f(a,o)):(t=!0,s=c.some((t=>{var s=\"\"+(i[t]||\"\");return l.accentedSearch&&(s=u(s),o=u(o)),l.caseSensitive||(s=s.toLowerCase()),r=s===o,e.exact?s===o:0==s.indexOf(o)}))),n=!l.includeSelectedTags&&this.isTagDuplicate(g(i)?i.value:i),s&&!n&&(r&&t?h.push(i):\"startsWith\"==l.sortby&&t?d.unshift(i):d.push(i))}return this.state.dropdown.suggestions=h.concat(d),\"function\"==typeof l.sortby?l.sortby(h.concat(d),o):h.concat(d).slice(0,c)},getMappedValue(t){var e=this.settings.dropdown.mapValueTo;return e?\"function\"==typeof e?e(t):t[e]||t.value:t.value},createListHTML(t){return p([],t).map(((t,i)=>{\"string\"!=typeof t&&\"number\"!=typeof t||(t={value:t});var s=this.dropdown.getMappedValue(t);return s=\"string\"==typeof s?h(s):s,this.settings.templates.dropdownItem.apply(this,[e(e({},t),{},{mappedValue:s}),this])})).join(\"\")}};const M=\"@yaireo/tagify/\";var I,N={empty:\"empty\",exceed:\"number of tags exceeded\",pattern:\"pattern mismatch\",duplicate:\"already exists\",notAllowed:\"not allowed\"},S={wrapper:(t,e)=>`<tags class=\"${e.classNames.namespace} ${e.mode?`${e.classNames[e.mode+\"Mode\"]}`:\"\"} ${t.className}\"\\n                    ${e.readonly?\"readonly\":\"\"}\\n                    ${e.disabled?\"disabled\":\"\"}\\n                    ${e.required?\"required\":\"\"}\\n                    ${\"select\"===e.mode?\"spellcheck='false'\":\"\"}\\n                    tabIndex=\"-1\">\\n            <span ${!e.readonly&&e.userInput?\"contenteditable\":\"\"} tabIndex=\"0\" data-placeholder=\"${e.placeholder||\"&#8203;\"}\" aria-placeholder=\"${e.placeholder||\"\"}\"\\n                class=\"${e.classNames.input}\"\\n                role=\"textbox\"\\n                aria-autocomplete=\"both\"\\n                aria-multiline=\"${\"mix\"==e.mode}\"></span>\\n                &#8203;\\n        </tags>`,tag(t,e){let i=e.settings;return`<tag title=\"${t.title||t.value}\"\\n                    contenteditable='false'\\n                    spellcheck='false'\\n                    tabIndex=\"${i.a11y.focusableTags?0:-1}\"\\n                    class=\"${i.classNames.tag} ${t.class||\"\"}\"\\n                    ${this.getAttributes(t)}>\\n            <x title='' class=\"${i.classNames.tagX}\" role='button' aria-label='remove tag'></x>\\n            <div>\\n                <span class=\"${i.classNames.tagText}\">${t[i.tagTextProp]||t.value}</span>\\n            </div>\\n        </tag>`},dropdown(t){var e=t.dropdown,i=\"manual\"==e.position,s=`${t.classNames.dropdown}`;return`<div class=\"${i?\"\":s} ${e.classname}\" role=\"listbox\" aria-labelledby=\"dropdown\">\\n                    <div data-selector='tagify-suggestions-wrapper' class=\"${t.classNames.dropdownWrapper}\"></div>\\n                </div>`},dropdownContent(t){var e=this.settings,i=this.state.dropdown.suggestions;return`\\n            ${e.templates.dropdownHeader.call(this,i)}\\n            ${t}\\n            ${e.templates.dropdownFooter.call(this,i)}\\n        `},dropdownItem(t){return`<div ${this.getAttributes(t)}\\n                    class='${this.settings.classNames.dropdownItem} ${t.class?t.class:\"\"}'\\n                    tabindex=\"0\"\\n                    role=\"option\">${t.mappedValue||t.value}</div>`},dropdownHeader(t){return`<header data-selector='tagify-suggestions-header' class=\"${this.settings.classNames.dropdownHeader}\"></header>`},dropdownFooter(t){var e=t.length-this.settings.dropdown.maxItems;return e>0?`<footer data-selector='tagify-suggestions-footer' class=\"${this.settings.classNames.dropdownFooter}\">\\n                ${e} more items. Refine your search.\\n            </footer>`:\"\"},dropdownItemNoMatch:null};var E={customBinding(){this.customEventsList.forEach((t=>{this.on(t,this.settings.callbacks[t])}))},binding(){let t=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];var e,i=this.events.callbacks,s=t?\"addEventListener\":\"removeEventListener\";if(!this.state.mainEvents||!t){for(var a in this.state.mainEvents=t,t&&!this.listeners.main&&(this.events.bindGlobal.call(this),this.settings.isJQueryPlugin&&jQuery(this.DOM.originalInput).on(\"tagify.removeAllTags\",this.removeAllTags.bind(this))),e=this.listeners.main=this.listeners.main||{focus:[\"input\",i.onFocusBlur.bind(this)],keydown:[\"input\",i.onKeydown.bind(this)],click:[\"scope\",i.onClickScope.bind(this)],dblclick:[\"scope\",i.onDoubleClickScope.bind(this)],paste:[\"input\",i.onPaste.bind(this)],drop:[\"input\",i.onDrop.bind(this)],compositionstart:[\"input\",i.onCompositionStart.bind(this)],compositionend:[\"input\",i.onCompositionEnd.bind(this)]})this.DOM[e[a][0]][s](a,e[a][1]);clearInterval(this.listeners.main.originalInputValueObserverInterval),this.listeners.main.originalInputValueObserverInterval=setInterval(i.observeOriginalInputValue.bind(this),500);var n=this.listeners.main.inputMutationObserver||new MutationObserver(i.onInputDOMChange.bind(this));n.disconnect(),\"mix\"==this.settings.mode&&n.observe(this.DOM.input,{childList:!0})}},bindGlobal(t){var e,i=this.events.callbacks,s=t?\"removeEventListener\":\"addEventListener\";if(this.listeners&&(t||!this.listeners.global))for(e of(this.listeners.global=this.listeners.global||[{type:this.isIE?\"keydown\":\"input\",target:this.DOM.input,cb:i[this.isIE?\"onInputIE\":\"onInput\"].bind(this)},{type:\"keydown\",target:window,cb:i.onWindowKeyDown.bind(this)},{type:\"blur\",target:this.DOM.input,cb:i.onFocusBlur.bind(this)},{type:\"click\",target:document,cb:i.onClickAnywhere.bind(this)}],this.listeners.global))e.target[s](e.type,e.cb)},unbindGlobal(){this.events.bindGlobal.call(this,!0)},callbacks:{onFocusBlur(t){var e=this.settings,i=t.target?this.trim(t.target.textContent):\"\",s=this.value?.[0]?.[e.tagTextProp],a=t.type,n=e.dropdown.enabled>=0,o={relatedTarget:t.relatedTarget},r=this.state.actions.selectOption&&(n||!e.dropdown.closeOnSelect),l=this.state.actions.addNew&&n,d=t.relatedTarget&&f.call(this,t.relatedTarget)&&this.DOM.scope.contains(t.relatedTarget);if(\"blur\"==a){if(t.relatedTarget===this.DOM.scope)return this.dropdown.hide(),void this.DOM.input.focus();this.postUpdate(),e.onChangeAfterBlur&&this.triggerChangeEvent()}if(!r&&!l)if(this.state.hasFocus=\"focus\"==a&&+new Date,this.toggleFocusClass(this.state.hasFocus),\"mix\"!=e.mode){if(\"focus\"==a)return this.trigger(\"focus\",o),void(0!==e.dropdown.enabled&&e.userInput||this.dropdown.show(this.value.length?\"\":void 0));\"blur\"==a&&(this.trigger(\"blur\",o),this.loading(!1),\"select\"==e.mode&&(d&&(this.removeTags(),i=\"\"),s===i&&(i=\"\")),i&&!this.state.actions.selectOption&&e.addTagOnBlur&&this.addTags(i,!0)),this.DOM.input.removeAttribute(\"style\"),this.dropdown.hide()}else\"focus\"==a?this.trigger(\"focus\",o):\"blur\"==t.type&&(this.trigger(\"blur\",o),this.loading(!1),this.dropdown.hide(),this.state.dropdown.visible=void 0,this.setStateSelection())},onCompositionStart(t){this.state.composing=!0},onCompositionEnd(t){this.state.composing=!1},onWindowKeyDown(t){var e,i=document.activeElement,s=f.call(this,i)&&this.DOM.scope.contains(document.activeElement),a=s&&i.hasAttribute(\"readonly\");if(s&&!a)switch(e=i.nextElementSibling,t.key){case\"Backspace\":this.settings.readonly||(this.removeTags(i),(e||this.DOM.input).focus());break;case\"Enter\":setTimeout(this.editTag.bind(this),0,i)}},onKeydown(t){var e=this.settings;if(!this.state.composing&&e.userInput){\"select\"==e.mode&&e.enforceWhitelist&&this.value.length&&\"Tab\"!=t.key&&t.preventDefault();var i=this.trim(t.target.textContent);if(this.trigger(\"keydown\",{event:t}),\"mix\"==e.mode){switch(t.key){case\"Left\":case\"ArrowLeft\":this.state.actions.ArrowLeft=!0;break;case\"Delete\":case\"Backspace\":if(this.state.editing)return;var s=document.getSelection(),a=\"Delete\"==t.key&&s.anchorOffset==(s.anchorNode.length||0),n=s.anchorNode.previousSibling,o=1==s.anchorNode.nodeType||!s.anchorOffset&&n&&1==n.nodeType&&s.anchorNode.previousSibling;r(this.DOM.input.innerHTML);var l,h,g,p=this.getTagElms(),c=1===s.anchorNode.length&&s.anchorNode.nodeValue==String.fromCharCode(8203);if(\"edit\"==e.backspace&&o)return l=1==s.anchorNode.nodeType?null:s.anchorNode.previousElementSibling,setTimeout(this.editTag.bind(this),0,l),void t.preventDefault();if(m()&&o instanceof Element)return g=d(o),o.hasAttribute(\"readonly\")||o.remove(),this.DOM.input.focus(),void setTimeout((()=>{b(g),this.DOM.input.click()}));if(\"BR\"==s.anchorNode.nodeName)return;if((a||o)&&1==s.anchorNode.nodeType?h=0==s.anchorOffset?a?p[0]:null:p[Math.min(p.length,s.anchorOffset)-1]:a?h=s.anchorNode.nextElementSibling:o instanceof Element&&(h=o),3==s.anchorNode.nodeType&&!s.anchorNode.nodeValue&&s.anchorNode.previousElementSibling&&t.preventDefault(),(o||a)&&!e.backspace)return void t.preventDefault();if(\"Range\"!=s.type&&!s.anchorOffset&&s.anchorNode==this.DOM.input&&\"Delete\"!=t.key)return void t.preventDefault();if(\"Range\"!=s.type&&h&&h.hasAttribute(\"readonly\"))return void b(d(h));\"Delete\"==t.key&&c&&w(s.anchorNode.nextSibling)&&this.removeTags(s.anchorNode.nextSibling),clearTimeout(I),I=setTimeout((()=>{var t=document.getSelection();r(this.DOM.input.innerHTML),!a&&t.anchorNode.previousSibling,this.value=[].map.call(p,((t,e)=>{var i=w(t);if(t.parentNode||i.readonly)return i;this.trigger(\"remove\",{tag:t,index:e,data:i})})).filter((t=>t))}),20)}return!0}switch(t.key){case\"Backspace\":\"select\"==e.mode&&e.enforceWhitelist&&this.value.length?this.removeTags():this.state.dropdown.visible&&\"manual\"!=e.dropdown.position||\"\"!=t.target.textContent&&8203!=i.charCodeAt(0)||(!0===e.backspace?this.removeTags():\"edit\"==e.backspace&&setTimeout(this.editTag.bind(this),0));break;case\"Esc\":case\"Escape\":if(this.state.dropdown.visible)return;t.target.blur();break;case\"Down\":case\"ArrowDown\":this.state.dropdown.visible||this.dropdown.show();break;case\"ArrowRight\":{let t=this.state.inputSuggestion||this.state.ddItemData;if(t&&e.autoComplete.rightKey)return void this.addTags([t],!0);break}case\"Tab\":{let s=\"select\"==e.mode;if(!i||s)return!0;t.preventDefault()}case\"Enter\":if(this.state.dropdown.visible&&\"manual\"!=e.dropdown.position)return;t.preventDefault(),setTimeout((()=>{this.state.dropdown.visible||this.state.actions.selectOption||this.addTags(i,!0)}))}}},onInput(t){this.postUpdate();var e=this.settings;if(\"mix\"==e.mode)return this.events.callbacks.onMixTagsInput.call(this,t);var i=this.input.normalize.call(this),s=i.length>=e.dropdown.enabled,a={value:i,inputElm:this.DOM.input},n=this.validateTag({value:i});\"select\"==e.mode&&this.toggleScopeValidation(n),a.isValid=n,this.state.inputText!=i&&(this.input.set.call(this,i,!1),-1!=i.search(e.delimiters)?this.addTags(i)&&this.input.set.call(this):e.dropdown.enabled>=0&&this.dropdown[s?\"show\":\"hide\"](i),this.trigger(\"input\",a))},onMixTagsInput(t){var e,i,s,a,n,o,r,l,d=this.settings,h=this.value.length,g=this.getTagElms(),c=document.createDocumentFragment(),u=window.getSelection().getRangeAt(0),v=[].map.call(g,(t=>w(t).value));if(\"deleteContentBackward\"==t.inputType&&m()&&this.events.callbacks.onKeydown.call(this,{target:t.target,key:\"Backspace\"}),y(this.getTagElms()),this.value.slice().forEach((t=>{t.readonly&&!v.includes(t.value)&&c.appendChild(this.createTagElem(t))})),c.childNodes.length&&(u.insertNode(c),this.setRangeAtStartEnd(!1,c.lastChild)),g.length!=h)return this.value=[].map.call(this.getTagElms(),(t=>w(t))),void this.update({withoutChangeEvent:!0});if(this.hasMaxTags())return!0;if(window.getSelection&&(o=window.getSelection()).rangeCount>0&&3==o.anchorNode.nodeType){if((u=o.getRangeAt(0).cloneRange()).collapse(!0),u.setStart(o.focusNode,0),s=(e=u.toString().slice(0,u.endOffset)).split(d.pattern).length-1,(i=e.match(d.pattern))&&(a=e.slice(e.lastIndexOf(i[i.length-1]))),a){if(this.state.actions.ArrowLeft=!1,this.state.tag={prefix:a.match(d.pattern)[0],value:a.replace(d.pattern,\"\")},this.state.tag.baseOffset=o.baseOffset-this.state.tag.value.length,l=this.state.tag.value.match(d.delimiters))return this.state.tag.value=this.state.tag.value.replace(d.delimiters,\"\"),this.state.tag.delimiters=l[0],this.addTags(this.state.tag.value,d.dropdown.clearOnSelect),void this.dropdown.hide();n=this.state.tag.value.length>=d.dropdown.enabled;try{r=(r=this.state.flaggedTags[this.state.tag.baseOffset]).prefix==this.state.tag.prefix&&r.value[0]==this.state.tag.value[0],this.state.flaggedTags[this.state.tag.baseOffset]&&!this.state.tag.value&&delete this.state.flaggedTags[this.state.tag.baseOffset]}catch(t){}(r||s<this.state.mixMode.matchedPatternCount)&&(n=!1)}else this.state.flaggedTags={};this.state.mixMode.matchedPatternCount=s}setTimeout((()=>{this.update({withoutChangeEvent:!0}),this.trigger(\"input\",p({},this.state.tag,{textContent:this.DOM.input.textContent})),this.state.tag&&this.dropdown[n?\"show\":\"hide\"](this.state.tag.value)}),10)},onInputIE(t){var e=this;setTimeout((function(){e.events.callbacks.onInput.call(e,t)}))},observeOriginalInputValue(){this.DOM.originalInput.parentNode||this.destroy(),this.DOM.originalInput.value!=this.DOM.originalInput.tagifyValue&&this.loadOriginalValues()},onClickAnywhere(t){t.target==this.DOM.scope||this.DOM.scope.contains(t.target)||(this.toggleFocusClass(!1),this.state.hasFocus=!1)},onClickScope(t){var e=this.settings,i=t.target.closest(\".\"+e.classNames.tag),s=+new Date-this.state.hasFocus;if(t.target!=this.DOM.scope){if(!t.target.classList.contains(e.classNames.tagX))return i?(this.trigger(\"click\",{tag:i,index:this.getNodeIndex(i),data:w(i),event:t}),void(1!==e.editTags&&1!==e.editTags.clicks||this.events.callbacks.onDoubleClickScope.call(this,t))):void(t.target==this.DOM.input&&(\"mix\"==e.mode&&this.fixFirefoxLastTagNoCaret(),s>500)?this.state.dropdown.visible?this.dropdown.hide():0===e.dropdown.enabled&&\"mix\"!=e.mode&&this.dropdown.show(this.value.length?\"\":void 0):\"select\"!=e.mode||0!==e.dropdown.enabled||this.state.dropdown.visible||this.dropdown.show());this.removeTags(t.target.parentNode)}else this.DOM.input.focus()},onPaste(t){t.preventDefault();var e,i,s=this.settings;if(\"select\"==s.mode&&s.enforceWhitelist||!s.userInput)return!1;s.readonly||(e=t.clipboardData||window.clipboardData,i=e.getData(\"Text\"),s.hooks.beforePaste(t,{tagify:this,pastedText:i,clipboardData:e}).then((e=>{void 0===e&&(e=i),e&&(this.injectAtCaret(e,window.getSelection().getRangeAt(0)),\"mix\"==this.settings.mode?this.events.callbacks.onMixTagsInput.call(this,t):this.settings.pasteAsTags?this.addTags(this.state.inputText+e,!0):this.state.inputText=e)})).catch((t=>t)))},onDrop(t){t.preventDefault()},onEditTagInput(t,e){var i=t.closest(\".\"+this.settings.classNames.tag),s=this.getNodeIndex(i),a=w(i),n=this.input.normalize.call(this,t),o={[this.settings.tagTextProp]:n,__tagId:a.__tagId},r=this.validateTag(o);this.editTagChangeDetected(p(a,o))||!0!==t.originalIsValid||(r=!0),i.classList.toggle(this.settings.classNames.tagInvalid,!0!==r),a.__isValid=r,i.title=!0===r?a.title||a.value:r,n.length>=this.settings.dropdown.enabled&&(this.state.editing&&(this.state.editing.value=n),this.dropdown.show(n)),this.trigger(\"edit:input\",{tag:i,index:s,data:p({},this.value[s],{newValue:n}),event:e})},onEditTagPaste(t,e){var i=(e.clipboardData||window.clipboardData).getData(\"Text\");e.preventDefault();var s=T(i);this.setRangeAtStartEnd(!1,s)},onEditTagFocus(t){this.state.editing={scope:t,input:t.querySelector(\"[contenteditable]\")}},onEditTagBlur(t){if(this.state.hasFocus||this.toggleFocusClass(),this.DOM.scope.contains(t)){var e,i,s=this.settings,a=t.closest(\".\"+s.classNames.tag),n=w(a),o=this.input.normalize.call(this,t),r={[s.tagTextProp]:o,__tagId:n.__tagId},l=n.__originalData,d=this.editTagChangeDetected(p(n,r)),h=this.validateTag(r);if(o)if(d){if(e=this.hasMaxTags(),i=p({},l,{[s.tagTextProp]:this.trim(o),__isValid:h}),s.transformTag.call(this,i,l),!0!==(h=(!e||!0===l.__isValid)&&this.validateTag(i))){if(this.trigger(\"invalid\",{data:i,tag:a,message:h}),s.editTags.keepInvalid)return;s.keepInvalidTags?i.__isValid=h:i=l}else s.keepInvalidTags&&(delete i.title,delete i[\"aria-invalid\"],delete i.class);this.onEditTagDone(a,i)}else this.onEditTagDone(a,l);else this.onEditTagDone(a)}},onEditTagkeydown(t,e){if(!this.state.composing)switch(this.trigger(\"edit:keydown\",{event:t}),t.key){case\"Esc\":case\"Escape\":e.parentNode.replaceChild(e.__tagifyTagData.__originalHTML,e),this.state.editing=!1;case\"Enter\":case\"Tab\":t.preventDefault(),t.target.blur()}},onDoubleClickScope(t){var e,i,s=t.target.closest(\".\"+this.settings.classNames.tag),a=w(s),n=this.settings;s&&n.userInput&&!1!==a.editable&&(e=s.classList.contains(this.settings.classNames.tagEditing),i=s.hasAttribute(\"readonly\"),\"select\"==n.mode||n.readonly||e||i||!this.settings.editTags||this.editTag(s),this.toggleFocusClass(!0),this.trigger(\"dblclick\",{tag:s,index:this.getNodeIndex(s),data:w(s)}))},onInputDOMChange(t){t.forEach((t=>{t.addedNodes.forEach((t=>{if(\"<div><br></div>\"==t.outerHTML)t.replaceWith(document.createElement(\"br\"));else if(1==t.nodeType&&t.querySelector(this.settings.classNames.tagSelector)){let e=document.createTextNode(\"\");3==t.childNodes[0].nodeType&&\"BR\"!=t.previousSibling.nodeName&&(e=document.createTextNode(\"\\n\")),t.replaceWith(e,...[...t.childNodes].slice(0,-1)),b(e)}else if(f.call(this,t))if(3!=t.previousSibling?.nodeType||t.previousSibling.textContent||t.previousSibling.remove(),t.previousSibling&&\"BR\"==t.previousSibling.nodeName){t.previousSibling.replaceWith(\"\\n\"+s);let e=t.nextSibling,i=\"\";for(;e;)i+=e.textContent,e=e.nextSibling;i.trim()&&b(t.previousSibling)}else t.previousSibling&&!w(t.previousSibling)||t.before(s)})),t.removedNodes.forEach((t=>{t&&\"BR\"==t.nodeName&&f.call(this,e)&&(this.removeTags(e),this.fixFirefoxLastTagNoCaret())}))}));var e=this.DOM.input.lastChild;e&&\"\"==e.nodeValue&&e.remove(),e&&\"BR\"==e.nodeName||this.DOM.input.appendChild(document.createElement(\"br\"))}}};function _(t,e){if(!t){console.warn(\"Tagify:\",\"input element not found\",t);const e=new Proxy(this,{get:()=>()=>e});return e}if(t.__tagify)return console.warn(\"Tagify: \",\"input element is already Tagified - Same instance is returned.\",t),t.__tagify;var i;p(this,function(t){var e=document.createTextNode(\"\");function i(t,i,s){s&&i.split(/\\s+/g).forEach((i=>e[t+\"EventListener\"].call(e,i,s)))}return{off(t,e){return i(\"remove\",t,e),this},on(t,e){return e&&\"function\"==typeof e&&i(\"add\",t,e),this},trigger(i,s,a){var n;if(a=a||{cloneData:!0},i)if(t.settings.isJQueryPlugin)\"remove\"==i&&(i=\"removeTag\"),jQuery(t.DOM.originalInput).triggerHandler(i,[s]);else{try{var o=\"object\"==typeof s?s:{value:s};if((o=a.cloneData?p({},o):o).tagify=this,s.event&&(o.event=this.cloneEvent(s.event)),s instanceof Object)for(var r in s)s[r]instanceof HTMLElement&&(o[r]=s[r]);n=new CustomEvent(i,{detail:o})}catch(t){console.warn(t)}e.dispatchEvent(n)}}}}(this)),this.isFirefox=/firefox|fxios/i.test(navigator.userAgent)&&!/seamonkey/i.test(navigator.userAgent),this.isIE=window.document.documentMode,e=e||{},this.getPersistedData=(i=e.id,t=>{let e,s=\"/\"+t;if(1==localStorage.getItem(M+i+\"/v\",1))try{e=JSON.parse(localStorage[M+i+s])}catch(t){}return e}),this.setPersistedData=(t=>t?(localStorage.setItem(M+t+\"/v\",1),(e,i)=>{let s=\"/\"+i,a=JSON.stringify(e);e&&i&&(localStorage.setItem(M+t+s,a),dispatchEvent(new Event(\"storage\")))}):()=>{})(e.id),this.clearPersistedData=(t=>e=>{const i=M+\"/\"+t+\"/\";if(e)localStorage.removeItem(i+e);else for(let t in localStorage)t.includes(i)&&localStorage.removeItem(t)})(e.id),this.applySettings(t,e),this.state={inputText:\"\",editing:!1,composing:!1,actions:{},mixMode:{},dropdown:{},flaggedTags:{}},this.value=[],this.listeners={},this.DOM={},this.build(t),O.call(this),this.getCSSVars(),this.loadOriginalValues(),this.events.customBinding.call(this),this.events.binding.call(this),t.autofocus&&this.DOM.input.focus(),t.__tagify=this}return _.prototype={_dropdown:D,getSetTagData:w,helpers:{sameStr:a,removeCollectionProp:n,omit:o,isObject:g,parseHTML:l,escapeHTML:h,extend:p,concatWithoutDups:c,getUID:v,isNodeTag:f},customEventsList:[\"change\",\"add\",\"remove\",\"invalid\",\"input\",\"click\",\"keydown\",\"focus\",\"blur\",\"edit:input\",\"edit:beforeUpdate\",\"edit:updated\",\"edit:start\",\"edit:keydown\",\"dropdown:show\",\"dropdown:hide\",\"dropdown:select\",\"dropdown:updated\",\"dropdown:noMatch\",\"dropdown:scroll\"],dataProps:[\"__isValid\",\"__removed\",\"__originalData\",\"__originalHTML\",\"__tagId\"],trim(t){return this.settings.trim&&t&&\"string\"==typeof t?t.trim():t},parseHTML:l,templates:S,parseTemplate(t,e){return l((t=this.settings.templates[t]||t).apply(this,e))},set whitelist(t){const e=t&&Array.isArray(t);this.settings.whitelist=e?t:[],this.setPersistedData(e?t:[],\"whitelist\")},get whitelist(){return this.settings.whitelist},generateClassSelectors(t){for(let e in t){let i=e;Object.defineProperty(t,i+\"Selector\",{get(){return\".\"+this[i].split(\" \")[0]}})}},applySettings(t,i){x.templates=this.templates;var s=p({},x,\"mix\"==i.mode?{dropdown:{position:\"text\"}}:{}),a=this.settings=p({},s,i);if(a.disabled=t.hasAttribute(\"disabled\"),a.readonly=a.readonly||t.hasAttribute(\"readonly\"),a.placeholder=h(t.getAttribute(\"placeholder\")||a.placeholder||\"\"),a.required=t.hasAttribute(\"required\"),this.generateClassSelectors(a.classNames),void 0===a.dropdown.includeSelectedTags&&(a.dropdown.includeSelectedTags=a.duplicates),this.isIE&&(a.autoComplete=!1),[\"whitelist\",\"blacklist\"].forEach((e=>{var i=t.getAttribute(\"data-\"+e);i&&(i=i.split(a.delimiters))instanceof Array&&(a[e]=i)})),\"autoComplete\"in i&&!g(i.autoComplete)&&(a.autoComplete=x.autoComplete,a.autoComplete.enabled=i.autoComplete),\"mix\"==a.mode&&(a.pattern=a.pattern||/@/,a.autoComplete.rightKey=!0,a.delimiters=i.delimiters||null,a.tagTextProp&&!a.dropdown.searchKeys.includes(a.tagTextProp)&&a.dropdown.searchKeys.push(a.tagTextProp)),t.pattern)try{a.pattern=new RegExp(t.pattern)}catch(t){}if(a.delimiters){a._delimiters=a.delimiters;try{a.delimiters=new RegExp(this.settings.delimiters,\"g\")}catch(t){}}a.disabled&&(a.userInput=!1),this.TEXTS=e(e({},N),a.texts||{}),(\"select\"!=a.mode||i.dropdown?.enabled)&&a.userInput||(a.dropdown.enabled=0),a.dropdown.appendTarget=i.dropdown?.appendTarget||document.body;let n=this.getPersistedData(\"whitelist\");Array.isArray(n)&&(this.whitelist=Array.isArray(a.whitelist)?c(a.whitelist,n):n)},getAttributes(t){var e,i=this.getCustomAttributes(t),s=\"\";for(e in i)s+=\" \"+e+(void 0!==t[e]?`=\"${i[e]}\"`:\"\");return s},getCustomAttributes(t){if(!g(t))return\"\";var e,i={};for(e in t)\"__\"!=e.slice(0,2)&&\"class\"!=e&&t.hasOwnProperty(e)&&void 0!==t[e]&&(i[e]=h(t[e]));return i},setStateSelection(){var t=window.getSelection(),e={anchorOffset:t.anchorOffset,anchorNode:t.anchorNode,range:t.getRangeAt&&t.rangeCount&&t.getRangeAt(0)};return this.state.selection=e,e},getCSSVars(){var t=getComputedStyle(this.DOM.scope,null);var e;this.CSSVars={tagHideTransition:(t=>{let e=t.value;return\"s\"==t.unit?1e3*e:e})(function(t){if(!t)return{};var e=(t=t.trim().split(\" \")[0]).split(/\\d+/g).filter((t=>t)).pop().trim();return{value:+t.split(e).filter((t=>t))[0].trim(),unit:e}}((e=\"tag-hide-transition\",t.getPropertyValue(\"--\"+e))))}},build(t){var e=this.DOM;this.settings.mixMode.integrated?(e.originalInput=null,e.scope=t,e.input=t):(e.originalInput=t,e.originalInput_tabIndex=t.tabIndex,e.scope=this.parseTemplate(\"wrapper\",[t,this.settings]),e.input=e.scope.querySelector(this.settings.classNames.inputSelector),t.parentNode.insertBefore(e.scope,t),t.tabIndex=-1)},destroy(){this.events.unbindGlobal.call(this),this.DOM.scope.parentNode.removeChild(this.DOM.scope),this.DOM.originalInput.tabIndex=this.DOM.originalInput_tabIndex,delete this.DOM.originalInput.__tagify,this.dropdown.hide(!0),clearTimeout(this.dropdownHide__bindEventsTimeout),clearInterval(this.listeners.main.originalInputValueObserverInterval)},loadOriginalValues(t){var e,i=this.settings;if(this.state.blockChangeEvent=!0,void 0===t){const e=this.getPersistedData(\"value\");t=e&&!this.DOM.originalInput.value?e:i.mixMode.integrated?this.DOM.input.textContent:this.DOM.originalInput.value}if(this.removeAllTags(),t)if(\"mix\"==i.mode)this.parseMixTags(t),(e=this.DOM.input.lastChild)&&\"BR\"==e.tagName||this.DOM.input.insertAdjacentHTML(\"beforeend\",\"<br>\");else{try{JSON.parse(t)instanceof Array&&(t=JSON.parse(t))}catch(t){}this.addTags(t,!0).forEach((t=>t&&t.classList.add(i.classNames.tagNoAnimation)))}else this.postUpdate();this.state.lastOriginalValueReported=i.mixMode.integrated?\"\":this.DOM.originalInput.value},cloneEvent(t){var e={};for(var i in t)\"path\"!=i&&(e[i]=t[i]);return e},loading(t){return this.state.isLoading=t,this.DOM.scope.classList[t?\"add\":\"remove\"](this.settings.classNames.scopeLoading),this},tagLoading(t,e){return t&&t.classList[e?\"add\":\"remove\"](this.settings.classNames.tagLoading),this},toggleClass(t,e){\"string\"==typeof t&&this.DOM.scope.classList.toggle(t,e)},toggleScopeValidation(t){var e=!0===t||void 0===t;!this.settings.required&&t&&t===this.TEXTS.empty&&(e=!0),this.toggleClass(this.settings.classNames.tagInvalid,!e),this.DOM.scope.title=e?\"\":t},toggleFocusClass(t){this.toggleClass(this.settings.classNames.focus,!!t)},triggerChangeEvent:function(){if(!this.settings.mixMode.integrated){var t=this.DOM.originalInput,e=this.state.lastOriginalValueReported!==t.value,i=new CustomEvent(\"change\",{bubbles:!0});e&&(this.state.lastOriginalValueReported=t.value,i.simulated=!0,t._valueTracker&&t._valueTracker.setValue(Math.random()),t.dispatchEvent(i),this.trigger(\"change\",this.state.lastOriginalValueReported),t.value=this.state.lastOriginalValueReported)}},events:E,fixFirefoxLastTagNoCaret(){},setRangeAtStartEnd(t,e){if(e){t=\"number\"==typeof t?t:!!t,e=e.lastChild||e;var i=document.getSelection();if(i.focusNode instanceof Element&&!this.DOM.input.contains(i.focusNode))return!0;try{i.rangeCount>=1&&[\"Start\",\"End\"].forEach((s=>i.getRangeAt(0)[\"set\"+s](e,t||e.length)))}catch(t){}}},insertAfterTag(t,e){if(e=e||this.settings.mixMode.insertAfterTag,t&&t.parentNode&&e)return e=\"string\"==typeof e?document.createTextNode(e):e,t.parentNode.insertBefore(e,t.nextSibling),e},editTagChangeDetected(t){var e=t.__originalData;for(var i in e)if(!this.dataProps.includes(i)&&t[i]!=e[i])return!0;return!1},getTagTextNode(t){return t.querySelector(this.settings.classNames.tagTextSelector)},setTagTextNode(t,e){this.getTagTextNode(t).innerHTML=h(e)},editTag(t,e){t=t||this.getLastTag(),e=e||{},this.dropdown.hide();var i=this.settings,s=this.getTagTextNode(t),a=this.getNodeIndex(t),n=w(t),o=this.events.callbacks,r=this,l=!0;if(s){if(!(n instanceof Object&&\"editable\"in n)||n.editable)return n=w(t,{__originalData:p({},n),__originalHTML:t.cloneNode(!0)}),w(n.__originalHTML,n.__originalData),s.setAttribute(\"contenteditable\",!0),t.classList.add(i.classNames.tagEditing),s.addEventListener(\"focus\",o.onEditTagFocus.bind(this,t)),s.addEventListener(\"blur\",(function(){setTimeout((()=>o.onEditTagBlur.call(r,r.getTagTextNode(t))))})),s.addEventListener(\"input\",o.onEditTagInput.bind(this,s)),s.addEventListener(\"paste\",o.onEditTagPaste.bind(this,s)),s.addEventListener(\"keydown\",(e=>o.onEditTagkeydown.call(this,e,t))),s.addEventListener(\"compositionstart\",o.onCompositionStart.bind(this)),s.addEventListener(\"compositionend\",o.onCompositionEnd.bind(this)),e.skipValidation||(l=this.editTagToggleValidity(t)),s.originalIsValid=l,this.trigger(\"edit:start\",{tag:t,index:a,data:n,isValid:l}),s.focus(),this.setRangeAtStartEnd(!1,s),this}else console.warn(\"Cannot find element in Tag template: .\",i.classNames.tagTextSelector)},editTagToggleValidity(t,e){var i;if(e=e||w(t))return(i=!(\"__isValid\"in e)||!0===e.__isValid)||this.removeTagsFromValue(t),this.update(),t.classList.toggle(this.settings.classNames.tagNotAllowed,!i),e.__isValid=i,e.__isValid;console.warn(\"tag has no data: \",t,e)},onEditTagDone(t,e){e=e||{};var i={tag:t=t||this.state.editing.scope,index:this.getNodeIndex(t),previousData:w(t),data:e};this.trigger(\"edit:beforeUpdate\",i,{cloneData:!1}),this.state.editing=!1,delete e.__originalData,delete e.__originalHTML,t&&e[this.settings.tagTextProp]?(t=this.replaceTag(t,e),this.editTagToggleValidity(t,e),this.settings.a11y.focusableTags?t.focus():b(t)):t&&this.removeTags(t),this.trigger(\"edit:updated\",i),this.dropdown.hide(),this.settings.keepInvalidTags&&this.reCheckInvalidTags()},replaceTag(t,e){e&&e.value||(e=t.__tagifyTagData),e.__isValid&&1!=e.__isValid&&p(e,this.getInvalidTagAttrs(e,e.__isValid));var i=this.createTagElem(e);return t.parentNode.replaceChild(i,t),this.updateValueByDOMTags(),i},updateValueByDOMTags(){this.value.length=0,[].forEach.call(this.getTagElms(),(t=>{t.classList.contains(this.settings.classNames.tagNotAllowed.split(\" \")[0])||this.value.push(w(t))})),this.update()},injectAtCaret(t,e){return!(e=e||this.state.selection?.range)&&t?(this.appendMixTags(t),this):(T(t,e),this.setRangeAtStartEnd(!1,t),this.updateValueByDOMTags(),this.update(),this)},input:{set(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"\",e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];var i=this.settings.dropdown.closeOnSelect;this.state.inputText=t,e&&(this.DOM.input.innerHTML=h(\"\"+t)),!t&&i&&this.dropdown.hide.bind(this),this.input.autocomplete.suggest.call(this),this.input.validate.call(this)},raw(){return this.DOM.input.textContent},validate(){var t=!this.state.inputText||!0===this.validateTag({value:this.state.inputText});return this.DOM.input.classList.toggle(this.settings.classNames.inputInvalid,!t),t},normalize(t){var e=t||this.DOM.input,i=[];e.childNodes.forEach((t=>3==t.nodeType&&i.push(t.nodeValue))),i=i.join(\"\\n\");try{i=i.replace(/(?:\\r\\n|\\r|\\n)/g,this.settings.delimiters.source.charAt(0))}catch(t){}return i=i.replace(/\\s/g,\" \"),this.trim(i)},autocomplete:{suggest(t){if(this.settings.autoComplete.enabled){\"string\"==typeof(t=t||{value:\"\"})&&(t={value:t});var e=this.dropdown.getMappedValue(t);if(\"number\"!=typeof e){var i=e.substr(0,this.state.inputText.length).toLowerCase(),s=e.substring(this.state.inputText.length);e&&this.state.inputText&&i==this.state.inputText.toLowerCase()?(this.DOM.input.setAttribute(\"data-suggest\",s),this.state.inputSuggestion=t):(this.DOM.input.removeAttribute(\"data-suggest\"),delete this.state.inputSuggestion)}}},set(t){var e=this.DOM.input.getAttribute(\"data-suggest\"),i=t||(e?this.state.inputText+e:null);return!!i&&(\"mix\"==this.settings.mode?this.replaceTextWithNode(document.createTextNode(this.state.tag.prefix+i)):(this.input.set.call(this,i),this.setRangeAtStartEnd(!1,this.DOM.input)),this.input.autocomplete.suggest.call(this),this.dropdown.hide(),!0)}}},getTagIdx(t){return this.value.findIndex((e=>e.__tagId==(t||{}).__tagId))},getNodeIndex(t){var e=0;if(t)for(;t=t.previousElementSibling;)e++;return e},getTagElms(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var s=\".\"+[...this.settings.classNames.tag.split(\" \"),...e].join(\".\");return[].slice.call(this.DOM.scope.querySelectorAll(s))},getLastTag(){var t=this.DOM.scope.querySelectorAll(`${this.settings.classNames.tagSelector}:not(.${this.settings.classNames.tagHide}):not([readonly])`);return t[t.length-1]},isTagDuplicate(t,e,i){var s=0;if(\"select\"==this.settings.mode)return!1;for(let n of this.value){a(this.trim(\"\"+t),n.value,e)&&i!=n.__tagId&&s++}return s},getTagIndexByValue(t){var e=[],i=this.settings.dropdown.caseSensitive;return this.getTagElms().forEach(((s,n)=>{s.__tagifyTagData&&a(this.trim(s.__tagifyTagData.value),t,i)&&e.push(n)})),e},getTagElmByValue(t){var e=this.getTagIndexByValue(t)[0];return this.getTagElms()[e]},flashTag(t){t&&(t.classList.add(this.settings.classNames.tagFlash),setTimeout((()=>{t.classList.remove(this.settings.classNames.tagFlash)}),100))},isTagBlacklisted(t){return t=this.trim(t.toLowerCase()),this.settings.blacklist.filter((e=>(\"\"+e).toLowerCase()==t)).length},isTagWhitelisted(t){return!!this.getWhitelistItem(t)},getWhitelistItem(t,e,i){e=e||\"value\";var s,n=this.settings;return(i=i||n.whitelist).some((i=>{var o=\"string\"==typeof i?i:i[e]||i.value;if(a(o,t,n.dropdown.caseSensitive,n.trim))return s=\"string\"==typeof i?{value:i}:i,!0})),s||\"value\"!=e||\"value\"==n.tagTextProp||(s=this.getWhitelistItem(t,n.tagTextProp,i)),s},validateTag(t){var e=this.settings,i=\"value\"in t?\"value\":e.tagTextProp,s=this.trim(t[i]+\"\");return(t[i]+\"\").trim()?\"mix\"!=e.mode&&e.pattern&&e.pattern instanceof RegExp&&!e.pattern.test(s)?this.TEXTS.pattern:!e.duplicates&&this.isTagDuplicate(s,e.dropdown.caseSensitive,t.__tagId)?this.TEXTS.duplicate:this.isTagBlacklisted(s)||e.enforceWhitelist&&!this.isTagWhitelisted(s)?this.TEXTS.notAllowed:!e.validate||e.validate(t):this.TEXTS.empty},getInvalidTagAttrs(t,e){return{\"aria-invalid\":!0,class:`${t.class||\"\"} ${this.settings.classNames.tagNotAllowed}`.trim(),title:e}},hasMaxTags(){return this.value.length>=this.settings.maxTags&&this.TEXTS.exceed},setReadonly(t,e){var i=this.settings;document.activeElement.blur(),i[e||\"readonly\"]=t,this.DOM.scope[(t?\"set\":\"remove\")+\"Attribute\"](e||\"readonly\",!0),this.settings.userInput=!0,this.setContentEditable(!t)},setContentEditable(t){this.settings.userInput&&(this.DOM.input.contentEditable=t,this.DOM.input.tabIndex=t?0:-1)},setDisabled(t){this.setReadonly(t,\"disabled\")},normalizeTags(t){var e=this.settings,i=e.whitelist,s=e.delimiters,a=e.mode,n=e.tagTextProp,o=[],r=!!i&&i[0]instanceof Object,l=Array.isArray(t),d=l&&t[0].value,h=t=>(t+\"\").split(s).filter((t=>t)).map((t=>({[n]:this.trim(t),value:this.trim(t)})));if(\"number\"==typeof t&&(t=t.toString()),\"string\"==typeof t){if(!t.trim())return[];t=h(t)}else l&&(t=[].concat(...t.map((t=>null!=t.value?t:h(t)))));return r&&!d&&(t.forEach((t=>{var e=o.map((t=>t.value)),i=this.dropdown.filterListItems.call(this,t[n],{exact:!0});this.settings.duplicates||(i=i.filter((t=>!e.includes(t.value))));var s=i.length>1?this.getWhitelistItem(t[n],n,i):i[0];s&&s instanceof Object?o.push(s):\"mix\"!=a&&(null==t.value&&(t.value=t[n]),o.push(t))})),o.length&&(t=o)),t},parseMixTags(t){var e=this.settings,i=e.mixTagsInterpolator,s=e.duplicates,a=e.transformTag,n=e.enforceWhitelist,o=e.maxTags,r=e.tagTextProp,l=[];t=t.split(i[0]).map(((t,e)=>{var d,h,g,p=t.split(i[1]),c=p[0],u=l.length==o;try{if(c==+c)throw Error;h=JSON.parse(c)}catch(t){h=this.normalizeTags(c)[0]||{value:c}}if(a.call(this,h),u||!(p.length>1)||n&&!this.isTagWhitelisted(h.value)||!s&&this.isTagDuplicate(h.value)){if(t)return e?i[0]+t:t}else h[d=h[r]?r:\"value\"]=this.trim(h[d]),g=this.createTagElem(h),l.push(h),g.classList.add(this.settings.classNames.tagNoAnimation),p[0]=g.outerHTML,this.value.push(h);return p.join(\"\")})).join(\"\"),this.DOM.input.innerHTML=t,this.DOM.input.appendChild(document.createTextNode(\"\")),this.DOM.input.normalize();var d=this.getTagElms();return d.forEach(((t,e)=>w(t,l[e]))),this.update({withoutChangeEvent:!0}),y(d,this.state.hasFocus),t},replaceTextWithNode(t,e){if(this.state.tag||e){e=e||this.state.tag.prefix+this.state.tag.value;var i,s,a=this.state.selection||window.getSelection(),n=a.anchorNode,o=this.state.tag.delimiters?this.state.tag.delimiters.length:0;return n.splitText(a.anchorOffset-o),-1==(i=n.nodeValue.lastIndexOf(e))?!0:(s=n.splitText(i),t&&n.parentNode.replaceChild(t,s),!0)}},selectTag(t,e){var i=this.settings;if(!i.enforceWhitelist||this.isTagWhitelisted(e.value)){this.input.set.call(this,e[i.tagTextProp]||e.value,!0),this.state.actions.selectOption&&setTimeout((()=>this.setRangeAtStartEnd(!1,this.DOM.input)));var s=this.getLastTag();return s?this.replaceTag(s,e):this.appendTag(t),this.value[0]=e,this.update(),this.trigger(\"add\",{tag:t,data:e}),[t]}},addEmptyTag(t){var e=p({value:\"\"},t||{}),i=this.createTagElem(e);w(i,e),this.appendTag(i),this.editTag(i,{skipValidation:!0})},addTags(t,e,i){var s=[],a=this.settings,n=[],o=document.createDocumentFragment();if(i=i||a.skipInvalid,!t||0==t.length)return s;switch(t=this.normalizeTags(t),a.mode){case\"mix\":return this.addMixTags(t);case\"select\":e=!1,this.removeAllTags()}return this.DOM.input.removeAttribute(\"style\"),t.forEach((t=>{var e,r={},l=Object.assign({},t,{value:t.value+\"\"});if(t=Object.assign({},l),a.transformTag.call(this,t),t.__isValid=this.hasMaxTags()||this.validateTag(t),!0!==t.__isValid){if(i)return;if(p(r,this.getInvalidTagAttrs(t,t.__isValid),{__preInvalidData:l}),t.__isValid==this.TEXTS.duplicate&&this.flashTag(this.getTagElmByValue(t.value)),!a.createInvalidTags)return void n.push(t.value)}if(\"readonly\"in t&&(t.readonly?r[\"aria-readonly\"]=!0:delete t.readonly),e=this.createTagElem(t,r),s.push(e),\"select\"==a.mode)return this.selectTag(e,t);o.appendChild(e),t.__isValid&&!0===t.__isValid?(this.value.push(t),this.trigger(\"add\",{tag:e,index:this.value.length-1,data:t})):(this.trigger(\"invalid\",{data:t,index:this.value.length,tag:e,message:t.__isValid}),a.keepInvalidTags||setTimeout((()=>this.removeTags(e,!0)),1e3)),this.dropdown.position()})),this.appendTag(o),this.update(),t.length&&e&&(this.input.set.call(this,a.createInvalidTags?\"\":n.join(a._delimiters)),this.setRangeAtStartEnd(!1,this.DOM.input)),a.dropdown.enabled&&this.dropdown.refilter(),s},addMixTags(t){if((t=this.normalizeTags(t))[0].prefix||this.state.tag)return this.prefixedTextToTag(t[0]);var e=document.createDocumentFragment();return t.forEach((t=>{var i=this.createTagElem(t);e.appendChild(i)})),this.appendMixTags(e),e},appendMixTags(t){var e=!!this.state.selection;e?this.injectAtCaret(t):(this.DOM.input.focus(),(e=this.setStateSelection()).range.setStart(this.DOM.input,e.range.endOffset),e.range.setEnd(this.DOM.input,e.range.endOffset),this.DOM.input.appendChild(t),this.updateValueByDOMTags(),this.update())},prefixedTextToTag(t){var e,i=this.settings,s=this.state.tag.delimiters;if(i.transformTag.call(this,t),t.prefix=t.prefix||this.state.tag?this.state.tag.prefix:(i.pattern.source||i.pattern)[0],e=this.createTagElem(t),this.replaceTextWithNode(e)||this.DOM.input.appendChild(e),setTimeout((()=>e.classList.add(this.settings.classNames.tagNoAnimation)),300),this.value.push(t),this.update(),!s){var a=this.insertAfterTag(e)||e;setTimeout(b,0,a)}return this.state.tag=null,this.trigger(\"add\",p({},{tag:e},{data:t})),e},appendTag(t){var e=this.DOM,i=e.input;e.scope.insertBefore(t,i)},createTagElem(t,i){t.__tagId=v();var s,a=p({},t,e({value:h(t.value+\"\")},i));return function(t){for(var e,i=document.createNodeIterator(t,NodeFilter.SHOW_TEXT,null,!1);e=i.nextNode();)e.textContent.trim()||e.parentNode.removeChild(e)}(s=this.parseTemplate(\"tag\",[a,this])),w(s,t),s},reCheckInvalidTags(){var t=this.settings;this.getTagElms(t.classNames.tagNotAllowed).forEach(((e,i)=>{var s=w(e),a=this.hasMaxTags(),n=this.validateTag(s),o=!0===n&&!a;if(\"select\"==t.mode&&this.toggleScopeValidation(n),o)return s=s.__preInvalidData?s.__preInvalidData:{value:s.value},this.replaceTag(e,s);e.title=a||n}))},removeTags(t,e,i){var s,a=this.settings;if(t=t&&t instanceof HTMLElement?[t]:t instanceof Array?t:t?[t]:[this.getLastTag()],s=t.reduce(((t,e)=>{e&&\"string\"==typeof e&&(e=this.getTagElmByValue(e));var i=w(e);return e&&i&&!i.readonly&&t.push({node:e,idx:this.getTagIdx(i),data:w(e,{__removed:!0})}),t}),[]),i=\"number\"==typeof i?i:this.CSSVars.tagHideTransition,\"select\"==a.mode&&(i=0,this.input.set.call(this)),1==s.length&&\"select\"!=a.mode&&s[0].node.classList.contains(a.classNames.tagNotAllowed)&&(e=!0),s.length)return a.hooks.beforeRemoveTag(s,{tagify:this}).then((()=>{function t(t){t.node.parentNode&&(t.node.parentNode.removeChild(t.node),e?a.keepInvalidTags&&this.trigger(\"remove\",{tag:t.node,index:t.idx}):(this.trigger(\"remove\",{tag:t.node,index:t.idx,data:t.data}),this.dropdown.refilter(),this.dropdown.position(),this.DOM.input.normalize(),a.keepInvalidTags&&this.reCheckInvalidTags()))}i&&i>10&&1==s.length?function(e){e.node.style.width=parseFloat(window.getComputedStyle(e.node).width)+\"px\",document.body.clientTop,e.node.classList.add(a.classNames.tagHide),setTimeout(t.bind(this),i,e)}.call(this,s[0]):s.forEach(t.bind(this)),e||(this.removeTagsFromValue(s.map((t=>t.node))),this.update(),\"select\"==a.mode&&this.setContentEditable(!0))})).catch((t=>{}))},removeTagsFromDOM(){[].slice.call(this.getTagElms()).forEach((t=>t.parentNode.removeChild(t)))},removeTagsFromValue(t){(t=Array.isArray(t)?t:[t]).forEach((t=>{var e=w(t),i=this.getTagIdx(e);i>-1&&this.value.splice(i,1)}))},removeAllTags(t){t=t||{},this.value=[],\"mix\"==this.settings.mode?this.DOM.input.innerHTML=\"\":this.removeTagsFromDOM(),this.dropdown.refilter(),this.dropdown.position(),this.state.dropdown.visible&&setTimeout((()=>{this.DOM.input.focus()})),\"select\"==this.settings.mode&&(this.input.set.call(this),this.setContentEditable(!0)),this.update(t)},postUpdate(){this.state.blockChangeEvent=!1;var t=this.settings,e=t.classNames,i=\"mix\"==t.mode?t.mixMode.integrated?this.DOM.input.textContent:this.DOM.originalInput.value.trim():this.value.length+this.input.raw.call(this).length;this.toggleClass(e.hasMaxTags,this.value.length>=t.maxTags),this.toggleClass(e.hasNoTags,!this.value.length),this.toggleClass(e.empty,!i),\"select\"==t.mode&&this.toggleScopeValidation(this.value?.[0]?.__isValid)},setOriginalInputValue(t){var e=this.DOM.originalInput;this.settings.mixMode.integrated||(e.value=t,e.tagifyValue=e.value,this.setPersistedData(t,\"value\"))},update(t){clearTimeout(this.debouncedUpdateTimeout),this.debouncedUpdateTimeout=setTimeout(function(){var e=this.getInputValue();this.setOriginalInputValue(e),this.settings.onChangeAfterBlur&&(t||{}).withoutChangeEvent||this.state.blockChangeEvent||this.triggerChangeEvent();this.postUpdate()}.bind(this),100)},getInputValue(){var t=this.getCleanValue();return\"mix\"==this.settings.mode?this.getMixedTagsAsString(t):t.length?this.settings.originalInputValueFormat?this.settings.originalInputValueFormat(t):JSON.stringify(t):\"\"},getCleanValue(t){return n(t||this.value,this.dataProps)},getMixedTagsAsString(){var t=\"\",e=this,i=this.settings,s=i.originalInputValueFormat||JSON.stringify,a=i.mixTagsInterpolator;return function i(n){n.childNodes.forEach((n=>{if(1==n.nodeType){const r=w(n);if(\"BR\"==n.tagName&&(t+=\"\\r\\n\"),r&&f.call(e,n)){if(r.__removed)return;t+=a[0]+s(o(r,e.dataProps))+a[1]}else n.getAttribute(\"style\")||[\"B\",\"I\",\"U\"].includes(n.tagName)?t+=n.textContent:\"DIV\"!=n.tagName&&\"P\"!=n.tagName||(t+=\"\\r\\n\",i(n))}else t+=n.textContent}))}(this.DOM.input),t}},_.prototype.removeTag=_.prototype.removeTags,_}));\n","/**\n * Object representing a set of modifiers for a score or test\n */\nexport class ModifierSet {\n    _name = null;\n    _description = null;\n    boons = 0;\n    banes = 0\n    modifier = 0;\n    divide = 0;\n    percent = 0;\n\n    constructor({name = null, description = null, boons = 0, banes = 0, modifier = 0,\n                 divide = 0, percent = 0}) {\n        this._name = name;\n        this._description = description;\n        this.boons = parseInt(boons) || 0;\n        this.banes = parseInt(banes) || 0;\n        this.modifier = parseInt(modifier) || 0;\n        this.divide = parseInt(divide) || 0;\n        this.percent = parseInt(percent) || 0;\n    }\n\n    /**\n     * Get the name of this modifier\n     *\n     * @return {string}\n     */\n    get name() {\n        return this._name ? `${this._name} ${this.mod_str()}` : this.mod_str()\n    }\n\n    /**\n     * Get a description of this modifier\n     *\n     * @return {string|null}\n     */\n    get description() {\n        return this._description || this._name\n    }\n\n    /**\n     * Get a string describing the modifier, including boons, banes and value modifier\n     *\n     * @return {string}\n     */\n    mod_str() {\n        const boons_banes = '⊕'.repeat(this.boons) + '⊖'.repeat(this.banes);\n        const mod = this.modifier >= 0 ? `+${this.modifier}` : `${this.modifier}`;\n        if (!boons_banes) return mod;\n        else if (!this.modifier) return boons_banes;\n        else return boons_banes + mod;\n    }\n\n    /**\n     * Get a Tagify tag representing of this modifier\n     *\n     * @return {{style: string, title: string|null, value: string}}\n     */\n    tag() {\n        return { value: this.name, title: this.description, style: ModifierSet.color(this.name) }\n    }\n\n    /**\n     * Return a json representation of this modifier\n     * @return {{modifier: number, name: string, description: (string|null), divide: number, percent: number,\n     *           boons: number, banes: number}}\n     */\n    json() {\n        return {\n            \"boons\": this.boons,\n            \"banes\": this.banes,\n            \"modifier\": this.modifier,\n            \"divide\": this.divide,\n            \"percent\": this.percent,\n            \"name\": this.name,\n            \"description\": this.description\n        };\n    }\n\n    /**\n     * Accepts list of raw key/value strings and returns a list of ModifierSet objects\n     *\n     * Ex: name=short_name&description=for_tooltip&boons=0&banes=0&modifier=0&divide=0&percent=0\n     *\n     * @param {string[]} raw_mods_list\n     * @returns {ModifierSet[]}\n     */\n    static parse(raw_mods_list) {\n        let mods_list = [];\n        try {\n            raw_mods_list.forEach(m => {\n                const params = new URLSearchParams(m);\n                mods_list.push(new ModifierSet({\n                    name: params.get('name'),\n                    description: params.get('description'),\n                    boons: params.get('boons'),\n                    banes: params.get('banes'),\n                    modifier: params.get('modifier'),\n                    divide: params.get('divide'),\n                    percent: params.get('percent')\n                }));\n            });\n\n            return mods_list;\n        } catch (e) {\n            console.error(`Error parsing modifiers object: ${raw_mods_list}`);\n            return [];\n        }\n    }\n\n    /**\n     * Return a CSS color string for the modifier, based on whether it is positive, negative or neutral\n     *\n     * @param {string} name\n     * @return {string}\n     */\n    static color(name) {\n        const includes_plus = name.includes('+') || name.includes('⊕');\n        const includes_minus = name.includes('-') || name.includes('⊖');\n\n        const GRAY = '--tag-bg:#a1a1a1;--tag-text-color:#2b2a2a;--tag-hover:#bababa;--tag-remove-bg:#a1a1a1;--tag-remove-btn-color:#2b2a2a';\n        const RED = '--tag-bg:#d19d9d;--tag-text-color:#530d0d;--tag-hover:#e1b4b4;--tag-remove-bg:#d19d9d;--tag-remove-btn-color:#530d0d';\n        const GREEN = '--tag-bg:#9dd1ab;--tag-text-color:#224939;--tag-hover:#b5e0c1;--tag-remove-bg:#9dd1ab;--tag-remove-btn-color:#224939';\n\n        if (includes_plus && includes_minus) return GRAY;\n        else if (includes_plus) return GREEN;\n        else if (includes_minus) return RED;\n        else return GRAY;\n    }\n\n    /**\n     * Total all modifiers from the given list of modifier sets\n     *\n     * @param {{modifier: number, divide: number, percent: number, boons: number, banes: number, tags: string[]}[]} mods_list\n     * @return {{modifier: number, divide: number, percent: number, boons: number, banes: number, tags: string[]}}\n     */\n    static total_modifiers(mods_list) {\n        let boons = 0;\n        let banes = 0;\n        let modifier = 0;\n        let divide = 0;\n        let percent = 0;\n        let tags = [];\n\n        // Add up the totals\n        mods_list.forEach(m => {\n            boons += m.boons || 0;\n            banes += m.banes || 0;\n            modifier += m.modifier || 0;\n            divide += m.divide || 0;\n            percent += m.percent || 0;\n            if (!!m.name) tags.push(m.name);\n        });\n\n        return { boons: boons, banes: banes, modifier: modifier, divide: divide, percent: percent, tags: tags };\n    }\n\n    /**\n     * Parse a string containing a list of Tagify tags and return a list of ModifierSet objects\n     *\n     * @param {string} input_str\n     * @return {ModifierSet[]}\n     */\n    static list_from_string(input_str) {\n        let json_list = null;\n        try {\n            json_list = JSON.parse(input_str);\n        } catch (e) {\n            console.error(\"Error parsing list from tagify\");\n        }\n\n        if (!json_list) return [];\n        if (!Array.isArray(json_list)) json_list = [json_list];\n\n        return json_list.map(t => ModifierSet.from_tag(t));\n    }\n\n    /**\n     * Parse a json object representing a single Tagify tag and return a ModifierSet object\n     *\n     * @param {{value: string, title: string|undefined, color: string|undefined}} tag_json\n     * @return {ModifierSet}\n     */\n    static from_tag(tag_json) {\n        // '[{\"value\":\"Dazed ⊖\",\"title\":\"Dazed\",\"color\":\"red\"},{\"value\":\"Confused ⊕\"},{\"value\":\"Skilled +2\"}]'\n        if (!tag_json.value) return {};\n\n        // Parse the tag name\n        const parts = tag_json.value.split(\" \");\n        const all_mods = parts.pop();\n        const name = parts.join(\" \");\n\n        // Count boons, banes and mod\n        let modifier = parseInt(all_mods.replace(/^\\D+/, '')) || null;\n        let leading = all_mods.replace(/[0-9]/g, '');\n        if (modifier !== null && leading.at(-1) === '-') modifier *= -1; // If mod is negative, make it so\n        if (modifier !== null) leading = leading.slice(0, -1);\n        let boons = (leading.match(/[+⊕]/g) || []).length;\n        let banes = (leading.match(/[-⊖]/g) || []).length;\n\n        return new ModifierSet({\n            name: name.replace(/[⊕⊖]/g, ''),\n            boons: boons,\n            banes: banes,\n            modifier: modifier || 0\n        });\n    }\n}","/**\n * Put the standard Saga Machine consequences in the formated expected for Foundry status effects\n *\n * @return {{icon: string, statuses: string[], name: string, id: string, flags:{core: {overlay: string[]}, system: *}}[]}\n */\nexport const generate_conditions = () => {\n    const system_conditions = [];\n    const standard_consequences = ['Bleeding', 'Bolstered', 'Dazed', 'Defeated', 'Desire', 'Disabled', 'Dying', 'Fatigue',\n      'Fear', 'Fixated', 'Grave Wound', 'Hidden', 'Hindered', 'Prone', 'Stun', 'Wound'];\n\n    // Generate and append an object for each consequence\n    standard_consequences.forEach(consequence => system_conditions.push({\n        icon: `systems/saga-machine/images/consequences/${consequence.slugify()}.svg`,\n        statuses: [consequence.slugify()],\n        name: consequence,\n        id: consequence.slugify(),\n        flags: {\n            core: { overlay: ['Defeated'].includes(consequence) },\n            system: {\n                subject_prompt: ['Bleeding', 'Desire', 'Fear', 'Fixated'].includes(consequence),\n                value_prompt: ['Fatigue', 'Grave Wound', 'Wound'].includes(consequence),\n                remove_others: ['Desire', 'Fixated'].includes(consequence),\n                no_consequence: ['Defeated', 'Unconscious'].includes(consequence)\n            }\n        }\n    }));\n\n    return system_conditions;\n}\n\n/**\n * Get a reference to a standard Saga Machine consequence if one exists on the actor, if not check for one globally, if\n * not lazily create one.\n *\n * @param name - The name of the consequence\n * @param actor - The actor to check\n * @param skip_actor - Skip checking the actor?\n * @param skip_global - Skip checking the global/game scope?\n * @param skip_new - Skip lazy creation?\n * @return {Promise<SagaMachineItem|null>}\n */\nexport async function standard_consequence({name, actor, skip_actor=false, skip_global=false, skip_new=false}) {\n    let consequence = null;\n\n    // Get the existing consequence on this actor, if one exists\n    if (!skip_actor)\n        consequence = actor?.items.filter(c => c.name === name && c.type === \"consequence\")\n            .values().next()?.value;\n\n    // If the consequence was not found, check for a matching globally defined consequence\n    if (!skip_global && !consequence)\n        consequence = game.items.filter(c => c.name === name && c.type === \"consequence\")\n            .values().next()?.value;\n\n    // If the consequence was still not found, create a dummy one\n    if (!skip_new && !consequence)\n        consequence = await Item.create({\n            name: name.capitalize(),\n            type: 'consequence',\n            system: { rank: 1 }\n        });\n\n    return consequence;\n}\n\n/**\n * Sync the actor's status effects with its consequences\n *\n * @param actor - The actor to sync\n * @return {Promise<void>}\n */\nexport async function sync_status(actor) {\n    // Get the consequences and statuses\n    const consequences = new Set(actor.items.filter(item => item.type === \"consequence\" && item.system.rank > 0 &&\n        game.sagamachine.standard_consequences.includes(item.name)).map(c => c.name.slugify()));\n    const statuses = actor.statuses;\n\n    // Get the items that need synced\n    const add_set = consequences.difference(statuses);\n    const remove_set = statuses.difference(consequences);\n\n    // Special case for defeated and unconscious, which have no consequence\n    remove_set.delete('defeated');\n    remove_set.delete('unconscious');\n\n    // Add missing statuses\n    const status_list = [];\n    CONFIG.statusEffects.forEach(e => {\n        if (add_set.has(e.id)) status_list.push(foundry.utils.deepClone(e));\n    });\n    if (status_list.length)\n        await actor.createEmbeddedDocuments(\"ActiveEffect\", status_list);\n\n    // Remove stale statuses\n    if (remove_set.size)\n        await actor.deleteEmbeddedDocuments(\"ActiveEffect\", actor.effects.filter(e => remove_set.has(e.name.slugify())).map(e => e.id));\n\n    // Remove duplicate statuses, if necessary\n    const status_set = new Set(actor.effects.map(e => e.name));\n    if (status_set.size !== actor.effects.size) {\n        for (const s of status_set) {\n            if (!game.sagamachine.standard_consequences.includes(s)) return;\n            const matches = actor.effects.filter(e => e.name === s);\n            if (matches.length > 1) {\n                matches.shift();\n                await actor.deleteEmbeddedDocuments(\"ActiveEffect\", matches.map(e => e.id));\n            }\n        }\n    }\n}\n\n/**\n * Sync the item's active effects with its parent actor\n *\n * @param item - The item with active effects to sync\n * @param delete_only - Only delete active effects, do not add\n * @return {Promise<void>}\n */\nexport async function sync_effects(item, delete_only=false) {\n    // Find item effects, delete those effects, return if delete_only\n    const matches = item.parent.effects.filter(e => e.origin === item.uuid);\n    for (let e of matches) e.delete();\n    if (delete_only) return;\n\n    // Copy all item effects to actor\n    const copies = [];\n    for (let e of item.effects) copies.push(e.clone({ parent: item.parent, origin: item.uuid }));\n    item.parent.createEmbeddedDocuments('ActiveEffect', copies);\n}\n\n/**\n * Evaluate variables embedded in active effects\n *\n * @param value - Active effect value\n * @param item - Item to which the active effect belongs\n * @return {string} - The evaluated active effect value\n */\nexport function evaluate_formula(value, item) {\n    function substitute_variables(raw, item) {\n        raw = raw.replaceAll('@rank', item.system.rank);\n        if (item.parent)\n            raw =     raw.replaceAll('@strength', item.parent.system.stats.strength.value)\n                         .replaceAll('@dexterity', item.parent.system.stats.dexterity.value)\n                         .replaceAll('@speed', item.parent.system.stats.speed.value)\n                         .replaceAll('@endurance', item.parent.system.stats.endurance.value)\n                         .replaceAll('@intelligence', item.parent.system.stats.intelligence.value)\n                         .replaceAll('@perception', item.parent.system.stats.perception.value)\n                         .replaceAll('@charisma', item.parent.system.stats.charisma.value)\n                         .replaceAll('@determination', item.parent.system.stats.determination.value);\n        return raw;\n    }\n\n    const do_math = raw => Function(`'use strict'; return (${raw})`)();\n    const to_evaluate = ['boons', 'banes', 'modifier', 'divide', 'percent'];\n    const params = new URLSearchParams(value.replaceAll('+', '%2b'));\n    for (const p of to_evaluate)\n        if (params.has(p)) params.set(p, do_math(substitute_variables(params.get(p), item)));\n\n    return params.toString();\n}\n\n/**\n * Evaluate all @-style variables in active effect and replace with the literal values\n *\n * @param {ActiveEffect} effect\n * @return {Promise<boolean>}\n */\nexport async function evaluate_effect_variables(effect) {\n    const item = await fromUuid(effect.origin);               // Get the item\n    if (!item) return true;                                                 // If not valid item, do nothing\n    for (let change of effect.changes)                                 // For each change in the Active Effect\n        change.value = evaluate_formula(change.value, item);                // Replace variables, do math\n    await effect.updateSource({'changes': effect.changes});                 // Update the effect being added\n\n    return true;\n}\n\n/**\n * Sync effects applied from the UI with consequences on the actor - after adding an effect\n *\n * @param {ActiveEffect} effect\n * @return {Promise<void>}\n */\nexport async function add_effect_from_ui(effect) {\n        const actor = effect.target;\n        const status_name = effect.statuses.first();\n\n        // If this status doesn't have a corresponding consequence, return\n        if (effect?.flags?.system?.no_consequence) return;\n\n        // Get the existing consequence on this actor, if one exists\n        let consequence = actor.items.filter(c => c.name.slugify() === status_name && c.type === \"consequence\")\n            .values().next()?.value;\n        if (consequence) return;  // Return if found\n\n        // If the consequence was not found, check for a matching globally defined consequence\n        consequence = game.items.filter(c => c.name === effect.name && c.type === \"consequence\")\n            .values().next()?.value;\n\n        // If the consequence was still not found, create a dummy one\n        if (!consequence)\n            consequence = await Item.create({\n                name: status_name.capitalize(),\n                type: 'consequence',\n                system: { rank: 1 }\n            });\n\n        // If this consequence accepts a subject, prompt the user for it\n        if (effect?.flags?.system?.subject_prompt)\n            new Dialog({\n                title: `Specify Subject of ${consequence.name}`,\n                content: `\n                    <form>\n                        <div class=\"form-group\">\n                            <label for=\"subject\">Subject</label>\n                            <input type=\"text\" name=\"subject\" value=\"\" autofocus>\n                        </div>\n                    </form>`,\n                buttons:{\n                    Confirm: {\n                        icon: \"<i class='fas fa-check'></i>\",\n                        label: 'OK',\n                        callback: async (html) => {\n                            const subject = html.find(\"[name=subject]\").val().trim();  // Get the user set subject\n\n                            // Update the subject\n                            consequence.update({'system.specialization': subject, 'system.rank': 1});\n                            consequence.system.specialization = subject;\n\n                            // Special case for Desire and Fixated: remove other copies with a different subject\n                            if (effect?.flags?.system?.remove_others)\n                                actor.items.filter(c => c.name === consequence.name && c.type === \"consequence\" &&\n                                    c.system.specialization !== subject).forEach(c => c.delete());\n                        }\n                    }\n                },\n                default: 'Confirm'\n            }).render(true);\n\n        // Prompt for consequence value\n        if (effect?.flags?.system?.value_prompt)\n            new Dialog({\n                title: `Specify Descriptor and Value of ${consequence.name}`,\n                content: `\n                    <form>\n                        <div class=\"grid grid-2col\">\n                            <label for=\"subject\">Descriptor (optional)</label>\n                            <input type=\"text\" name=\"subject\" value=\"\" autofocus>\n                            <label for=\"value\">Value</label>\n                            <input type=\"number\" name=\"value\" value=\"1\">\n                        </div>\n                    </form>`,\n                buttons:{\n                    Confirm: {\n                        icon: \"<i class='fas fa-check'></i>\",\n                        label: 'OK',\n                        callback: async (html) => {\n                            const subject = html.find(\"[name=subject]\").val().trim();       // Get the user set subject\n                            const value = parseInt(html.find(\"[name=value]\").val()) || 1;   // Get the user set value\n\n                            // Create update object\n                            const update = { 'system.rank': value };\n                            if (subject) update['system.specialization'] = subject;\n\n                            // Update the subject and value\n                            consequence.update({'system.specialization': subject, 'system.rank': value});\n                        }\n                    }\n                },\n                default: 'Confirm'\n            }).render(true);\n\n        // Add a copy to the actor\n        [consequence] = await actor.createEmbeddedDocuments('Item', [consequence]);\n}\n\n/**\n * Sync effects applied from the UI with consequences on the actor - after removing an effect\n *\n * @param {ActiveEffect} effect\n * @return {Promise<void>}\n */\nexport async function remove_effect_from_ui(effect) {\n    const actor = effect.target\n\n    // Get the existing consequence on this actor, if one exists\n    let consequences = actor.items.filter(c => c.name === effect.name && c.type === \"consequence\");\n\n    // Remove any matching consequences\n    if (consequences.length)\n        await actor.deleteEmbeddedDocuments(\"Item\", consequences.map(c => c.id));\n}\n\n/**\n * When removing an effect from the UI that is ambiguious (e.g. has multiple instances or subjects), prompt the user\n *\n * @param {ActiveEffect} effect\n * @return {boolean}\n */\nexport function prompt_on_effect_deletion(effect) {\n        const actor = effect.target\n\n        let consequences = actor.items.filter(c => c.name === effect.name && c.type === \"consequence\");\n        if (!consequences.length) return true;\n        if (consequences.length > 1 || effect?.flags?.system?.value_prompt) {\n            let content = '<form><div class=\"grid grid-2col\">';\n            consequences.forEach(c => {\n                const rank_display = effect?.flags?.system?.value_prompt || c.system.rank > 1 ? c.system.rank : '';\n                content += `<input type=\"radio\" name=\"consequence\" value=\"${c.id}\" />\n                            <label for=\"consequence\">${c.system.full_name} ${rank_display}</label>`\n            });\n            content += '</div></form>';\n\n            new Dialog({\n                title: `Select Which ${consequences[0].name} to Remove`,\n                content: content,\n                buttons: {\n                    Confirm: {\n                        icon: \"<i class='fa fa-trash'></i>\",\n                        label: 'Remove',\n                        callback: async (html) => {\n                            const delete_id = html.find(\"input[name=consequence]:checked\").val();\n                            if (delete_id) await actor.deleteEmbeddedDocuments(\"Item\", [delete_id]);\n                        }\n                    }\n                },\n                default: 'Confirm'\n            }).render(true);\n\n            return false;\n        }\n\n        return true;\n}\n","import { Attack, test_dialog } from \"../game/tests.js\";\n\n/**\n * ActorSheet context used in getData() and dependent methods.\n *\n * @typedef {{cssClass: string, editable: *, document: *, data: *, limited: *, options: *, owner: *, title: *}} Context\n */\n\n/**\n * JQuery library - used by Foundry VTT\n *\n * @external JQuery\n * @link https://api.jquery.com/\n */\n\n/**\n * Handlebars library - used by Foundry VTT\n *\n * @external Handlebars\n * @link https://handlebarsjs.com/api-reference/\n */\n\n/**\n * Register a Handlebars helper\n *\n * @function Handlebars.registerHelper\n * @link https://handlebarsjs.com/api-reference/\n */\n\n/**\n * Register Handlebars helpers and partials: Hooks.once('init')\n */\nHooks.once(\"init\", async () => {\n\t// Register handlebars helpers\n\tHandlebars.registerHelper(\"is_GM\", () => game.user.isGM);\n\tHandlebars.registerHelper(\"is_weapon\", item => item.system.group.toLowerCase() === 'weapons');\n\tHandlebars.registerHelper(\"is_wearable\",\n\t\t\titem => item.system.group.toLowerCase() === 'armors' || item.system.group.toLowerCase() === 'apparel');\n\n\t// Register handlebars partials\n\tawait loadTemplates([\n\t\t'systems/saga-machine/templates/partials/character-header.html',\n\t\t'systems/saga-machine/templates/partials/character-sidebar.html',\n\t\t'systems/saga-machine/templates/partials/character-inventory.html'\n\t]);\n});\n\n/**\n * Extend Foundry's ActorSheet with modifications to support the Saga Machine system.\n * This is a base class that's meant to be extended for specific actor types.\n */\nexport class SagaMachineActorSheet extends ActorSheet {\n\n    /**********************************\n     * METHODS THAT SET BASIC OPTIONS *\n     **********************************/\n\n\t/**\n\t * The default options for actor sheets\n\t *\n\t * @override\n\t * @returns {DocumentSheetOptions}\n\t * */\n\tstatic get defaultOptions() {\n\t\treturn foundry.utils.mergeObject(super.defaultOptions, {\n\t\t\tclasses: [\"saga-machine\", \"sheet\", \"actor\"],\n\t\t\twidth: 850,\n\t\t\theight: 650,\n\t\t\ttabs: [{navSelector: \".sheet-tabs\", contentSelector: \".sheet-body\", initial: \"basics\"}],\n\t\t\tscrollY: [\".basics\", \".combat\", \".inventory\", \".advancement\"],\n\t\t\tdragDrop: [{dragSelector: \".items-list .item\", dropSelector: null}]\n\t\t});\n\t}\n\n    /**\n     * Dynamically set the HTML template for the actor based on type\n\t *\n     * @returns {string}\n     */\n\tget template() { return `systems/saga-machine/templates/actors/${this.actor.type}-sheet.html`; }\n\n    /**********************************\n     * METHODS THAT HANDLE SHEET DATA *\n     **********************************/\n\n\t/**\n\t * @inheritdoc\n\t * @override\n\t * @return Context\n\t * */\n\tgetData() {\n\t\tconst context = super.getData();\n\n\t\t// Filter and sort all item lists for the character\n\t\tcontext.data.system.ambitions = this.items(context, 'ambition', null,\n\t\t\t(a, b) =>  a.system.type > b.system.type ? 1 : -1);\n\t\tcontext.data.system.paths = this.items(context, 'path');\n\t\tcontext.data.system.origins = this.items(context, 'origin');\n\t\tcontext.data.system.all_skills = this.items(context, 'skill');\n\t\tcontext.data.system.skill_groups = this.skills_and_traits(context.data.system.all_skills, 'General Skills');\n\t\tcontext.data.system.all_traits = this.items(context, 'trait');\n\t\tcontext.data.system.trait_groups = this.skills_and_traits(context.data.system.all_traits, 'General Traits', ['General Traits', 'Weaknesses']);\n\t\tcontext.data.system.consequences = this.items(context, 'consequence');\n\t\tcontext.data.system.equipment = this.items(context, 'item');\n\t\tcontext.data.system.containers = this.items(context, 'item', i => !!i.system.container);\n\n\t\treturn context;\n\t}\n\n\t/**\n\t * Get all items of the specified type, apply an optional secondary filter and sort (alphabetically by default).\n\t *\n\t * @param {Context} context - Context produced in getData()\n\t * @param {string} type - Item type (e.g. 'skill', 'trait', 'consequence')\n\t * @param {Function} [filter] - Optional filtering function\n\t * @param {Function} [sort] - Optional sorting function\n\t * @returns {SagaMachineItem[]}\n\t */\n\titems(context, type, filter, sort) {\n\t\tif (!filter) filter = () => true;\n\t\tif (!sort) sort = (a, b) =>  a.name > b.name ? 1 : -1;\n\t\treturn context.actor.items.filter( item => item.type === type && filter(item)).sort(sort);\n\t}\n\n\t/**\n\t * Organize skill or trait items into groups\n\t *\n\t * @param {SagaMachineItem[]} all_items - Items to be organized\n\t * @param {string} default_group - Default group for new items or those without a specified group\n\t * @param {string[]} display_if_empty - Groups to create even if they are empty\n\t * @return {{name: string, contents: SagaMachineItem[]}[]}\n\t * @private\n\t */\n\tskills_and_traits(all_items, default_group, display_if_empty=null) {\n\t\tconst raw_groups = this.group_items(all_items, i => i.system.group, null, null, default_group);\n\t\tconst final_groups = []; // { name: String, contents: Skill[] }\n\n\t\t// Add empty groups\n\t\tif (display_if_empty)\n\t\t\tfor (const c of display_if_empty)\n\t\t\t\tif (!(c in raw_groups))\n\t\t\t\t\tfinal_groups.push({ name: c, contents: [] });\n\n\t\t// Add groups\n\t\tfor (const g of Object.keys(raw_groups))\n\t\t\tfinal_groups.push({ name: g, contents: raw_groups[g] });\n\n\t\t// Sort groups by name\n\t\tfinal_groups.sort((a, b) => {\n\t\t\tif (a.name === b.name) return 0;\n\t\t\tif (a.name === default_group) return -1;\n\t\t\tif (b.name === default_group) return 1;\n\t\t\tif (a.name < b.name) return -1;\n\t\t\tif (a.name > b.name) return 1;\n\t\t\treturn 0;\n\t\t});\n\n\t\treturn final_groups;\n\t}\n\n\t/**\n\t * Organize inventory by item group and by container\n\t *\n\t * @param {Context} context - Context produced in getData()\n\t * @param {string[]} [top_groups] - Item groups to display at the top, regardless of alphabetical order\n\t * @param {string} [blank] - Default group for new items or those without a specified group\n\t * @return {{name: string, container: null|string, contents: SagaMachineItem[], encumbrance: number, max:number}[]}\n\t */\n\tgroups_and_containers({context, top_groups = ['Weapons', 'Armors'], blank = 'Miscellanea'}) {\n\t\tconst raw_groups = this.group_items(context.data.system.equipment,\n\t\t\t\ti => i.system.parent || i.system.group, i => !i.system.container);\n\t\tif (!context.data.system.equipment.filter(i => !i.system.parent && !i.system.container).length)\n\t\t\traw_groups[blank] = []; // Add blank group if no non-container groups\n\n\t\tconst equipment_groups = []; // { name: String, container: null|Item, contents: Item[], encumbrance: Int, max: 0|Int }\n\n\t\t// Add empty containers\n\t\tfor (const c of context.data.system.containers)\n\t\t\tif (!(c.id in raw_groups))\n\t\t\t\tequipment_groups.push({\n\t\t\t\t\tname: c.system.full_name,\n\t\t\t\t\tcontainer: c,\n\t\t\t\t\tcontents: [],\n\t\t\t\t\tencumbrance: 0,\n\t\t\t\t\tmax: c.system.container\n\t\t\t\t});\n\n\t\t// Add other containers and groups\n\t\tfor (const g of Object.keys(raw_groups)) {\n\t\t\tconst container = context.data.system.containers.find(c => c.id === g)\n\t\t\tequipment_groups.push({\n\t\t\t\tname: container ? container.system.full_name : g,\n\t\t\t\tcontainer: container || null,\n\t\t\t\tcontents: raw_groups[g],\n\t\t\t\tencumbrance: raw_groups[g].reduce((total, i) => total + i.system.container_encumbrance, 0),\n\t\t\t\tmax: container ? container.system.container : 0\n\t\t\t});\n\t\t}\n\n\t\t// Sort groups by name and whether it is a container\n\t\tequipment_groups.sort((a, b) => {\n\t\t\tif (a.name === b.name) return 0;\n\t\t\tfor (let g of top_groups) {\n\t\t\t\tif (a.name === g) return -1;\n\t\t\t\tif (b.name === g) return 1;\n\t\t\t}\n\n\t\t\tif (!!a.container && !b.container) return 1;\n\t\t\tif (!!b.container && !a.container) return -1;\n\n\t\t\tif (a.name < b.name) return -1;\n\t\t\tif (a.name > b.name) return 1;\n\t\t\treturn 0;\n\t\t});\n\n\t\treturn equipment_groups;\n\t}\n\n\t/**\n\t * Iterate over list of items and group them into a map by the specified property, optionally apply a filter\n\t *\n\t * @param {SagaMachineItem[]} items - LItems to group\n\t * @param {string|Function} group_path - Function or string representing the group\n\t * @param {Function} [filter] - Optional filtering function\n\t * @param {Function} [sort] - Optional sorting function\n\t * @param {string} [blank_name] - Default group for items without one\n\t * @returns {Object.<string, SagaMachineItem[]>}\n\t */\n\tgroup_items(items, group_path, filter, sort, blank_name) {\n\t\tif (!filter) filter = () => true;\n\t\tif (!sort) sort = (a, b) =>  a.name > b.name ? 1 : -1;\n\t\tif (!blank_name) blank_name = 'Miscellanea';\n\t\tconst access = (object, path) => path.split('.').reduce((o, i) => o[i], object);\n\t\tconst groups = {};\n\n\t\tfor (let i of items) {\n\t\t\tif (!filter(i)) continue;\n\t\t\tlet group_name = typeof group_path === 'function' ? group_path(i) : access(i, group_path);\n\t\t\tif (!group_name || typeof group_name !== 'string') group_name = blank_name;\n\t\t\tif (group_name in groups) groups[group_name].push(i);\n\t\t\telse groups[group_name] = [i];\n\t\t}\n\n\t\t// Sort all groups\n\t\tfor (const k of Object.keys(groups)) groups[k].sort(sort)\n\n\t\treturn groups;\n\t}\n\n\t/**\n\t * Calculate health progress bar percentages\n\t *\n\t * @param {Context} context\n\t */\n\tcalc_health_progress_bar(context) {\n\t\tif (!context.data.system.scores.health.max) context.data.system.scores.health.percent = 0;\n\t\telse context.data.system.scores.health.percent =\n\t\t\tMath.round((context.data.system.scores.health.value / context.data.system.scores.health.max) * 100);\n\t}\n\n    /****************************************\n     * METHODS THAT SET SHEET INTERACTIVITY *\n     ****************************************/\n\n\t/**\n\t * @inheritdoc\n\t * @override\n\t * @param {JQuery} html\n\t * */\n\tactivateListeners(html) {\n\t\tsuper.activateListeners(html);\n\n\t\t// Everything below here is only needed if the sheet is editable\n\t\tif ( !this.isEditable ) return;\n\n\t\thtml.find('.item-create').on(\"click\", this.on_item_create.bind(this));\t\t// Item creation\n\t\thtml.find('.item-edit').on(\"click\", this.on_item_edit.bind(this));\t\t\t// Item editing\n\t\thtml.find('.item-delete').on(\"click\", this.on_item_delete.bind(this));\t\t// Item deletion\n\t\thtml.find('.item-remove').on(\"click\", this.on_item_remove.bind(this));\t\t// Remove item from container\n\t\thtml.find('.item-input').on(\"change\", this.on_item_update.bind(this));\t\t// Update item's rank or quantity\n\n\t\thtml.find('.expandable').on(\"click\", this.expand_description.bind(this));\t// Expand description\n\t\thtml.find('.chatable').on(\"click\", this.chat_description.bind(this));\t\t// Send description to chat\n\n\t\tthis.attach_drag_events(html);\t\t\t\t// Make icons draggable to hot bar, disable drag for input elements\n\t\tthis.attach_drop_events(html);\t\t\t\t// Enable drop events for containers and groups\n\t}\n\n\t/**\n\t * Attach data to drag events\n\t *\n\t * @param {Event} event\n\t * @override\n\t * @private\n\t */\n\t_onDragStart(event) {\n\t\tif (event.currentTarget.dataset['type'] === 'Test') event.stopPropagation();\n\n\t\t// Attach IDs to the dataset\n\t\tthis.attach_ids(event.currentTarget.dataset);\n\t\tconst mod_keys = {'key-alt': event.altKey, 'key-ctrl': event.ctrlKey, 'key-shift': event.shiftKey, 'key-meta': event.metaKey};\n\t\tevent.dataTransfer.setData(\"text/plain\", JSON.stringify({...event.currentTarget.dataset, ...mod_keys}));\n\n\t\tsuper._onDragStart(event);\n\t}\n\n\t/**\n\t * Create a new item of the specified type\n\t *\n\t * @param {Event} event\n\t * @returns {Promise<SagaMachineItem>}\n\t */\n\tasync on_item_create(event) {\n\t\tevent.preventDefault();\n\n\t\tconst type = $(event.currentTarget).data(\"type\");\t\t\t// Get item type\n\t\tconst name = $(event.currentTarget).data(\"name\");\t\t\t// Get item name\n\t\tconst system = $(event.currentTarget).data(\"system\") || {};\t// Get system data\n\n\t\t// Prepare item data\n\t\tconst itemData = {\t\t\t\t\t\t\t\t\t// Prepare the item object\n\t\t\tname: name ? name : `New ${type}`,\n\t\t\ttype: type,\n\t\t\tsystem: system\n\t\t};\n\n\t\t// Finally, create the item!\n\t\treturn await Item.create(itemData, {parent: this.actor});\n\t}\n\t/**\n\t * Open the item sheet for an actor's item\n\t *\n\t * @param {Event} event\n\t * @return {Promise<void>}\n\t */\n\tasync on_item_edit(event) {\n\t\tconst box = $(event.currentTarget).parents(\".item\");\n\t\tconst item = this.actor.items.get(box.data(\"id\"));\n\t\titem.sheet.render(true);\n\t}\n\n\t/**\n\t * Delete an item from the actor\n\t *\n\t * @param {Event} event\n\t * @return {Promise<void>}\n\t */\n\tasync on_item_delete(event) {\n\t\tconst box = $(event.currentTarget).parents(\".item\");\n\t\tconst item = this.actor.items.get(box.data(\"id\"));\n\t\tif (!!item.system.container) {\n\t\t\tconst contained = this.actor.items.filter(i => i.type === 'item' && i.system.parent === item.id);\n\t\t\tawait this.actor.updateEmbeddedDocuments(\"Item\", contained.map(i => new Object({ '_id': i.id, 'system.parent': null })));\n\t\t}\n\t\titem.delete();\n\t\tbox.slideUp(200, () => this.render(false));\n\t}\n\n\t/**\n\t * Remove an item from a container\n\t *\n\t * @param {Event} event\n\t * @return {Promise<void>}\n\t */\n\tasync on_item_remove(event) {\n\t\tconst box = $(event.currentTarget).parents(\".item\");\n\t\tconst item = this.actor.items.get(box.data(\"id\"));\n\t\tconst update = { _id: item.id, 'system.parent': null };\n\t\tthis.actor.updateEmbeddedDocuments(\"Item\", [update] );\n\t}\n\n\tasync on_item_update(event) {\n\t\tconst box = $(event.currentTarget).parents(\".item\");\n\t\tconst attribute = event.currentTarget.getAttribute('data-name');\n\t\tconst update = { _id: box.data(\"id\") };\n\t\tupdate[attribute] = Number(event.currentTarget.value);\n\t\tthis.actor.updateEmbeddedDocuments(\"Item\", [update] );\n\t}\n\n\t/**\n\t * Expand the description when the name is clicked\n\t *\n\t * @param {Event} event\n\t * @return {Promise<void>}\n\t */\n\tasync expand_description(event) {\n\t\tlet all_descriptions = null;\n\t\tlet description = $(event.target).closest('.item').find('.item-description');\t// PC sheets\n\t\tif (!description.length) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t// NPC sheets\n\t\t\tconst id = $(event.target).closest('.item').data('id');\n\t\t\tall_descriptions = $(event.target).closest('.items-inline').find(`.item-description`);\n\t\t\tdescription = $(event.target).closest('.items-inline').find(`.item-description[data-id='${id}']`);\n\t\t}\n\t\tif (all_descriptions)\n\t\t\tfor (let d of all_descriptions)\n\t\t\t\tif (d !== description[0] && $(d).is(':visible')) $(d).slideUp(200);\n\t\tdescription.slideToggle(200);\n\t}\n\n\t/**\n\t * Send the description to chat when the icon is clicked\n\t *\n\t * @param {Event} event\n\t * @return {Promise<void>}\n\t */\n\tasync chat_description(event) {\n\t\tconst item_id = $(event.target).closest('.item').data('id');\n\t\tif (!item_id) return;\n\t\tconst item = this.actor.items.get(item_id);\n\t\tif (!item) return;\n\t\tthis.to_chat(item);\n\t}\n\n\t/**\n\t * Attach macro drag event for hot bar, disable drag for input elements\n\t *\n\t * @param {JQuery} html\n\t */\n\tattach_drag_events(html) {\n\t\t// Drag events for macros\n\t\thtml.find('.rollable').each((i, li) => {\t\t\t\t\t// Find all items on the character sheet.\n\t\t\tli.setAttribute(\"draggable\", true);\t\t// Add draggable and dragstart listener\n\t\t\tli.addEventListener(\"dragstart\", ev => this._onDragStart(ev), false);\n\t\t});\n\n\t\t// Disable drag events for inputs\n\t\thtml.find('.items-list .item input, .items-list .item select').on('mousedown', function(e) {\n\t\t\te.stopPropagation();\n\t\t\t$(e.target).closest('.item').attr('draggable', false);\n\t\t});\n\t\thtml.find('.items-list .item').on('mousedown', function(e) {\n\t\t\t$(e.target).attr('draggable', true);\n\t\t}).on({\n\t\t\t'dragstart': function(e) {\n\t\t\t\te.stopPropagation();\n\t\t\t\tlet dt = e.originalEvent.dataTransfer;\n\t\t\t\tif (dt) {\n\t\t\t\t\tdt.effectAllowed = 'move';\n\t\t\t\t\tdt.setData('text/html', '');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Attach drop events for containers and groups\n\t *\n\t * @param {JQuery} html\n\t */\n\tattach_drop_events(html) {\n\t\t// Handle drop events for containers and item groups\n\t\thtml.find('.item-group').on('drop', async event => {\n\t\t\t// Get the drag event data\n\t\t\tlet data = null;\n\t\t\ttry { data = JSON.parse(event.originalEvent.dataTransfer.getData(\"text\")); } catch(error) {}\n\t\t\tif (!data || !data.uuid || data.type !== 'Item') return;\n\n\t\t\t// Get the item being dropped\n\t\t\tconst drop_item = await fromUuid(data.uuid);\n\t\t\tif (drop_item.type !== 'item') return;\n\n\t\t\t// Get the container ID, if applicable, and add the item to the container if it fits\n\t\t\tconst container_id = $(event.currentTarget).data('id');\n\t\t\tif (container_id)\n\t\t\t\tif (drop_item.system.container_encumbrance + $(event.currentTarget).data('encumbrance') <= $(event.currentTarget).data('max'))\n\t\t\t\t\tawait drop_item.update({ 'system.parent': container_id });\n\n\t\t\t// Otherwise, remove the item from the container\n\t\t\telse await drop_item.update({ 'system.parent': null });\n\t\t});\n\t}\n\n\t/**\n\t * Handle right-click on scores: toggle on/off custom mode or decrement secondary score\n\t *\n\t * @param {Event} event\n\t * @return {Promise<void>}\n\t */\n\tasync on_score_toggle(event) {\n\t\tevent.preventDefault();\n\t\tconst target = $(event.target);\n\t\tif (target.hasClass('score-secondary')) this.adjust_score(target, -1);\n\t\telse this.toggle_custom(target);\n\t}\n\n\t/**\n\t * Handle clicks on secondary scores to increment them\n\t *\n\t * @param {Event} event\n\t * @return {Promise<void>}\n\t */\n\tasync on_score_increment(event) {\n\t\tevent.preventDefault();\n\t\tconst target = $(event.target);\n\t\tif (target.hasClass('score-secondary')) this.adjust_score(target, 1);\n\t}\n\n\t/**\n\t * Attach token, scene and/or actor IDs to the given dataset\n\t *\n\t * @param {{}} dataset\n\t */\n\tattach_ids(dataset) {\n\t\t// Attach token and scene ID, if available\n\t\tif (this.token) {\n\t\t\tdataset['tokenId'] = this.token.id;\n\t\t\tdataset['sceneId'] = this.token.parent.id;\n\t\t}\n\n\t\t// Otherwise, attach the actor ID\n\t\telse {\n\t\t\tdataset['actorId'] = this.actor.id;\n\t\t}\n\t}\n\n\t/**\n\t * Adjust the actor's score by the given value. Usually used to increment or decrement.\n\t *\n\t * @param {JQuery} target\n\t * @param {number} mod\n\t */\n\tadjust_score(target, mod) {\n\t\tconst score_name = target.attr('name');\n\t\tconst score = this.get_score(score_name, []);\n\n\t\t// Make the adjustment\n\t\tconst update_obj = {};\n\t\tupdate_obj[score_name] = score + mod;\n\t\tthis.actor.update(update_obj);\n\t}\n\n\t/**\n\t * Toggle between custom mode and calculated mode for actor's score.\n\t *\n\t * @param {HTMLElement} element\n\t */\n\ttoggle_custom(element) {\n\t\tconst input = element.hasClass('score-input') ? element : element.find('.score-input');\n\t\tif (!input.length) return;\n\n\t\tconst score_name = input.attr('name');\n\t\tconst score = this.get_score(score_name, ['max', 'value', 'tn']);\n\t\tif (!score) return; // If the score was not found, do nothing\n\n\t\t// Toggle custom value\n\t\tinput.prop('disabled', !!score.custom);\n\t\tconst score_custom = this.get_score_custom(score_name);\n\t\tconst update_obj = {};\n\t\tupdate_obj[score_custom] = !score.custom;\n\t\tthis.actor.update(update_obj);\n\t}\n\n\t/**\n\t * Get the score object for the actor\n\t *\n\t * @param {string} score_name\n\t * @param {string[]} ignore_array\n\t * @return {string|Actor}\n\t */\n\tget_score(score_name, ignore_array) {\n\t\tconst path = score_name.split('.');\n\t\tlet pointer = this.actor;\n\t\tfor (const p of path) {\n\t\t\tif (pointer && !ignore_array.includes(p)) pointer = pointer[p] ? pointer[p] : null;\n\t\t\telse return pointer;\n\t\t}\n\t\treturn pointer;\n\t}\n\n\t/**\n\t * Get whether this particular score has custom mode set\n\t *\n\t * @param {string} score_name\n\t * @return {string}\n\t * @private\n\t */\n\tget_score_custom(score_name) {\n\t\treturn score_name.substring(0, score_name.lastIndexOf(\"\\.\")) + '.custom';\n\t}\n\n\t/**\n\t * Send chatable item to group chat\n\t *\n\t * @param {SagaMachineItem} item\n\t */\n\tto_chat(item) {\n\t\tChatMessage.create({\n\t\t\tflavor: `<header class=\"item-header\"><img src=\"${item.img}\" alt=\"${item.name}\" /><h2>${item.name}</h2></header>`,\n\t\t\tcontent: item.system.description,\n\t\t\tspeaker: ChatMessage.getSpeaker({ actor: this.actor })\n\t\t});\n\t}\n\n\t/**\n\t * When a roll label is clicked, open the test dialog\n\t *\n\t * @param event\n\t * @returns {Promise<void>}\n\t */\n\tasync on_test(event) {\n\t\tevent.preventDefault();\n\t\tthis.attach_ids(event.currentTarget.dataset);\t\t// Attach IDs to the dataset\n\t\tawait test_dialog(event.currentTarget.dataset);\t\t// Show the dialog\n\t}\n}\n\n/**\n * Character sheet functionality for PCs and NPCs\n */\nexport class CharacterSheet extends SagaMachineActorSheet {\n    /**\n\t * Dynamically set the HTML template for the actor based on permissions and PC/NPC\n\t *\n\t * @returns {string}\n\t * @override\n     */\n    get template() {\n\t\tif (!game.user.isGM && this.actor.limited) \treturn \"systems/saga-machine/templates/actors/limited-sheet.html\";\n\t\tif (this.actor.is_pc()) \t\t\t\t\treturn `systems/saga-machine/templates/actors/pc-sheet.html`;\n\t\telse \t\t\t\t\t\t\t\t\t\treturn `systems/saga-machine/templates/actors/npc-sheet.html`;\n    }\n\n\t/**\n\t * @inheritdoc\n\t * @override\n\t * */\n\tgetData() {\n\t\tconst context = super.getData();\n\n\t\t// Organize inventory\n\t\tcontext.data.system.equipment_groups = this.groups_and_containers({\n\t\t\tcontext: context,\n\t\t\ttop_groups: ['Weapons', 'Armors'],\n\t\t\tblank: 'Miscellanea'\n\t\t});\n\n\t\tcontext.data.system.attacks = this.gather_attacks(context);\t// Gather the list of attacks\n\t\tthis.calc_health_progress_bar(context);\t\t\t\t\t\t// Calculate health progress bar percentages\n\n\t\treturn context;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tactivateListeners(html) {\n\t\tsuper.activateListeners(html);\n\n\t\thtml.find('.rollable').click(this.on_test.bind(this));\t\t\t\t\t\t// Open test dialog\n\t\thtml.find('.score').on(\"contextmenu\", this.on_score_toggle.bind(this));\t\t// Toggle custom score mode on/off\n\t\thtml.find('.score').on(\"click\", this.on_score_increment.bind(this));\t\t// Increment secondary score\n\t\thtml.find('.item-equip').click(this.on_item_equip.bind(this));\t\t\t\t// Item equipping\n\t\thtml.find('.item-carry').click(this.on_item_carry.bind(this));\t\t\t\t// Item carrying\n\t\thtml.find('.items-inline > .item').on(\"contextmenu\", this.on_npc_edit.bind(this));\t// Open item on NPC sheet\n\t}\n\n\t/**\n\t * Equip or un-equip an item\n\t *\n\t * @param {Event} event\n\t * @return {Promise<void>}\n\t */\n\tasync on_item_equip(event) {\n\t\tconst box = $(event.currentTarget).parents(\".item\");\n\t\tconst item = this.actor.items.get(box.data(\"id\"));\n\t\tconst update = { _id: item.id, 'system.equipped': !item.system.equipped };\n\t\tthis.actor.updateEmbeddedDocuments(\"Item\", [update] );\n\t}\n\n\t/**\n\t * Carry or un-carry an item\n\t *\n\t * @param {Event} event\n\t * @return {Promise<void>}\n\t */\n\tasync on_item_carry(event) {\n\t\tconst box = $(event.currentTarget).parents(\".item\");\n\t\tconst item = this.actor.items.get(box.data(\"id\"));\n\t\tconst update = { _id: item.id, 'system.carried': !item.system.carried };\n\t\tthis.actor.updateEmbeddedDocuments(\"Item\", [update] );\n\t}\n\n\t/**\n\t * Open item dialogs on NPC sheet\n\t *\n\t * @param event\n\t * @return {Promise<void>}\n\t */\n\tasync on_npc_edit(event) {\n\t\tevent.preventDefault();\n\t\tconst box = $(event.currentTarget).closest(\".item\");\n\t\tconst item = this.actor.items.get(box.data(\"id\"));\n\t\titem.sheet.render(true);\n\t}\n\n\t/**\n\t * Return list of all attacks provided by items\n\t *\n\t * @param {Context} context\n\t * @returns {Attack[]}\n\t * @private\n\t */\n\tgather_attacks(context) {\n\t\tconst attacks = [];\n\t\tconst attack_items = context.actor.items.filter(item => item.system.attacks && item.system.attacks.length &&\n\t\t\t(item.system.equipped || item.system.equipped === undefined));\n\n\t\tfor (let item of attack_items)\n\t\t\tfor (let attack of item.system.attacks)\n\t\t\t\tattacks.push(new Attack({\n\t\t\t\t\tactor: this.actor,\n\t\t\t\t\titem: item,\n\t\t\t\t\tname: item.system.full_name,\n\t\t\t\t\ttype: item.type,\n\t\t\t\t\tproperties: item.system.properties || '',\n\t\t\t\t\t...attack\n\t\t\t\t}));\n\n\t\treturn attacks;\n\t}\n}\n\n/**\n * Character sheet functionality for stashes and shops\n */\nexport class StashSheet extends SagaMachineActorSheet {\n\t/**\n\t * @inheritdoc\n\t * @override\n\t * */\n\tgetData() {\n\t\tconst context = super.getData();\n\n\t\t// Organize inventory\n\t\tcontext.data.system.equipment_groups = this.groups_and_containers({\n\t\t\tcontext: context,\n\t\t\ttop_groups: ['Weapons', 'Armors'],\n\t\t\tblank: 'Miscellanea'\n\t\t});\n\n\t\treturn context;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tactivateListeners(html) {\n\t\tsuper.activateListeners(html);\n\n\t\thtml.find('.distribute-money').on(\"click\", this.distribute_money.bind(this));\t\t// Distribute money\n\t}\n\n\tasync distribute_money() {\n\t\tconst tokens = game?.canvas?.tokens?.controlled;  // Get selected tokens\n\t\tif (!tokens.length) return ui.notifications.warn(\"No valid character selected.\");\n\n\t\tlet money_remaining = this.actor.system.wealth.money % tokens.length;\t\t\t\t// Remaining on sheet\n\t\tconst money_each = Math.floor(this.actor.system.wealth.money / tokens.length);\t// Money for each actor\n\n\t\t// Update selected actors\n\t\tfor (let token of tokens) {\n\t\t\tif (token.actor.isOwner)\n\t\t\t\ttoken.actor.update({'system.wealth.money': token.actor.system.wealth.money + money_each});\n\t\t\telse money_remaining += money_each;\n\t\t}\n\n\t\t// Update this actor\n\t\tthis.actor.update({'system.wealth.money': money_remaining});\n\n\t\t// Report the exchange to chat\n\t\tconst target_names = '<li>' + tokens.map(t => `@UUID[${t.actor.uuid}]{${t.name}}`).join('</li><li>') + '</li>';\n\t\tChatMessage.create({content: `<strong>${money_each}¤</strong> each distributed from @UUID[${this.actor.uuid}]{${this.actor.name}} to:<ul style=\"line-height: 1.7em\">${target_names}</ul>`});\n\t}\n}\n\n/**\n * Character sheet functionality for vehicles\n */\nexport class VehicleSheet extends SagaMachineActorSheet {\n\t/**\n\t * @inheritdoc\n\t * @override\n\t * */\n\tgetData() {\n\t\tconst context = super.getData();\n\n\t\t// Organize inventory\n\t\tcontext.data.system.equipment_groups = this.groups_and_containers({\n\t\t\tcontext: context,\n\t\t\ttop_groups: ['Vehicle Components', 'Trade Goods'],\n\t\t\tblank: 'Trade Goods'\n\t\t});\n\n\t\tthis.calc_health_progress_bar(context);\t// Calculate health progress bar percentages\n\t\tthis.calc_space_progress_bar(context);\t// Calculate space progress bar percentages\n\n\t\treturn context;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t * @override\n\t */\n\tactivateListeners(html) {\n\t\tsuper.activateListeners(html);\n\n\t\thtml.find('.score').on(\"contextmenu\", this.on_score_toggle.bind(this));\t\t// Toggle custom score mode on/off\n\t\thtml.find('.score').on(\"click\", this.on_score_increment.bind(this));\t\t// Increment secondary score\n\n\t\t// Handle positions\n\t\tthis.draw_positions(html);\n\t\thtml.find('.position-list .position-create').click(this.add_position.bind(this));\n\t\thtml.find('.position-list .position-delete').click(this.delete_position.bind(this));\n\t}\n\n\t/**\n\t * Calculate space progress bar percentages\n\t *\n\t * @param {Context} context\n\t */\n\tcalc_space_progress_bar(context) {\n\t\tif (!context.data.system.scores.space.max) context.data.system.scores.space.percent = 0;\n\t\telse context.data.system.scores.space.percent =\n\t\t\tMath.round((context.data.system.scores.space.value / context.data.system.scores.space.max) * 100);\n\t}\n\n\t/**\n\t * Add a position to the vehicle positions form\n\t */\n    add_position() {\n        if ( !this.isEditable ) return;\n\n        // Get the prototype position node and parent node, return if it wasn't found\n        const prototype = this.element.find('.position.prototype');\n        const parent = this.element.find('ol.position-list');\n        if (!prototype || !prototype.length || !parent || !parent.length) return;\n\n        const clone = prototype.clone();\n        clone.removeClass('prototype');\n        clone.find('input, select').change(this.update_positions.bind(this));\n        parent.append(clone);\n    }\n\n\t/**\n\t * Delete a position in the vehicle position form\n\t *\n\t * @param {Event} event\n\t */\n    delete_position(event) {\n        const box = $(event.currentTarget).closest(\".position\");\n        const position_list = box.closest('.position-list');\n        box.remove();\n        this.update_positions(event, position_list);\n    }\n\n\t/**\n\t * Draw the vehicle positions form\n\t *\n\t * @param {JQuery} html\n\t */\n\tdraw_positions(html) {\n        // Don't draw positions if there are no positions\n        if (!this.actor.system.scores.crew.positions || !this.actor.system.scores.crew.positions.length) return;\n\n        // Get the prototype attack position and parent node, return if it wasn't found\n        const prototype = html.find('.position.prototype');\n        const parent = html.find('ol.position-list');\n        if (!prototype || !prototype.length || !parent || !parent.length) return;\n\n        // For each position, clone the prototype and set up the form\n        for (let position of this.actor.system.scores.crew.positions) {\n            const clone = prototype.clone();\n            clone.removeClass('prototype');\n            clone.find(\"[name=position]\").val(position.position);\n            clone.find(\"[name=character]\").val(position.character);\n            parent.append(clone);\n\n            // Set up the data handlers for the form, if this sheet is editable\n\t\t    if ( !this.isEditable ) continue;\n            clone.find('input, select').change(this.update_positions.bind(this));\n        }\n    }\n\n    /**\n     * Handle changes to the vehicle position form\n     *\n     * @param {Event} event\n\t * @param {JQuery|null} position_list\n     */\n    update_positions(event, position_list=null) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Get all positions\n        const position_nodes = position_list ? position_list.find('.position:not(.prototype)') :\n            $(event.currentTarget).closest('ol.position-list').find('.position:not(.prototype)');\n\n        // Iterate over each node and add to the list\n        const positions = [];\n        position_nodes.each((i, node) => {\n            let position = $(node).find(\"[name=position]\").val().trim();\n            let character = $(node).find(\"[name=character]\").val().trim();\n\n            // Create position, add name and properties if set, add to list\n            const position_object = {\n                position: position,\n                character: character\n            };\n            positions.push(position_object);\n\n            this.actor.update({'system.scores.crew.positions': positions});\n        });\n    }\n}","/**\n * Extend the base Item class to support the Saga Machine system\n */\nexport class SagaMachineItem extends Item {\n    /**\n     * @inheritdoc\n     * @override\n     */\n    async prepareDerivedData() {\n        super.prepareDerivedData();\n\n        // Don't derive properties for items you don't own or which haven't been saved to the db\n        if (!this.actor || !this.actor.isOwner || !this.id || !this.actor.items.get(this.id)) return;\n\n        // Derive the full name from the base name and specialization\n        this.full_name();\n\n        // Parse the submitted property string into an array and set various derived values\n        this.parse_properties();\n    }\n\n    /**\n     * Code to run when a new SagaMachineItem is created - changes default icon\n     *\n     * @override\n     */\n    async _onCreate(data, options, userId) {\n        await super._onCreate(data, options, userId);\n\n        // Return if you're not the owner of this item, or it hasn't been saved to the database\n        if (!this.isOwner || !this.id) return;\n\n        // Set new default icons\n        if (data.img === foundry.documents.BaseItem.DEFAULT_ICON) { // If default\n            if (this.type === 'skill') this.update({'img': 'systems/saga-machine/images/defaults/skill.svg'});\n            if (this.type === 'trait') this.update({'img': 'systems/saga-machine/images/defaults/trait.svg'});\n            if (this.type === 'origin') this.update({'img': 'systems/saga-machine/images/defaults/origin.svg'});\n            if (this.type === 'path') this.update({'img': 'systems/saga-machine/images/defaults/path.svg'});\n            if (this.type === 'ambition') this.update({'img': 'systems/saga-machine/images/defaults/ambition.svg'});\n            if (this.type === 'consequence') this.update({'img': 'systems/saga-machine/images/defaults/consequence.svg'});\n        }\n    }\n\n    /**\n     * Derive the full name from the base name and specialization\n     */\n    full_name() {\n        let full_name = this.name + (this.system.specialized ? ` (${this.system.specialization})` : '');\n        if (this.type === 'trait' && this.system.ranked) full_name += ` ${this.system.rank}`;\n        this.system.full_name = full_name;\n    }\n\n    /**\n     * Parse the submitted property string into an array\n     */\n    parse_properties() {\n        // Only do this for equipment\n        if (this.type !== 'item') return;\n\n        // Parse string into an array\n        if (typeof this.system.properties === 'string') {\n            this.system.properties = this.system.properties.split(',').map(t => t.trim());\n        }\n\n        this.system.container = this.property_value('Container');\n        this.system.armor = this.property_value('Armor');\n        this.system.bulky = this.property_value('Bulky');\n        this.system.powered = this.property_value('Powered');\n        this.system.hands = this.property_value('Hands') || 1;\n        this.system.unit_encumbrance = this.calc_unit_encumbrance();\n        this.system.container_encumbrance = this.calc_container_encumbrance();\n        this.system.encumbrance = this.calc_encumbrance();\n        this.system.unit_loads = this.calc_unit_loads();\n        this.system.loads = this.calc_loads();\n    }\n\n    /**\n     * Obtains the value of the given property, defaulting to 0 is unspecified\n     *\n     * @param {string} property\n     * @return {number}\n     */\n    property_value(property) {\n        for (const prop of this.system.properties) {\n            if (prop.toLowerCase().startsWith(`${property.toLowerCase()} `)) {\n                const [p, val] = prop.split(' ');\n                return Number(val);\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * Removes an item from its parent container\n     *\n     * @return {Promise<void>}\n     */\n    async remove_from_container() {\n        if (this.type === 'item') this.update({ 'system.parent': null });\n    }\n\n    /**************************************\n     * METHODS THAT DEAL WITH ENCUMBRANCE *\n     **************************************/\n\n    /**\n     * Calculate the encumbrance per item, taking all item properties into account\n     *\n     * @return {number}\n     */\n    calc_unit_encumbrance() {\n        if (this.system.load) return 100;\n        else if (this.system.properties.includes('Neg')) return 0;\n        else {\n            for (const prop of this.system.properties) {\n                if (prop.startsWith('Implant ')) return 0;\n                if (prop.startsWith('Software ')) return 0;\n\n                if (prop.startsWith('Big ')) {\n                    const [big, val] = prop.split(' ');\n                    return Number(val);\n                }\n            }\n            return 1;\n        }\n    }\n\n    /**\n     * Calculates the loads per unit.\n     * Loads are Encumbrance 100 and are used in the trading and vehicles sub-systems.\n     *\n     * @return {number}\n     */\n    calc_unit_loads() {\n        return this.system.unit_encumbrance / 100;\n    }\n\n    /**\n     * Calculate the encumbrance value of the stack in regards to how much container space it takes.\n     *\n     * @return {number}\n     */\n    calc_container_encumbrance() {\n        return this.system.unit_encumbrance * this.system.quantity;\n    }\n\n    /**\n     * Calculate the encumbrance value of the stack, taking into account item properties,\n     * quantity and whether the item is equipped.\n     *\n     * @return {number}\n     */\n    calc_encumbrance() {\n        if (!this.system.carried) return 0;\n        if (this.system.parent) return 0;\n        if (this.system.equipped && this.system.properties.includes('Worn')) return 0;\n        return this.system.unit_encumbrance * this.system.quantity;\n    }\n\n    /**\n     * Calculate the number of loads in the stack.\n     * Loads are Encumbrance 100 and are used in the trading and vehicles sub-systems.\n     *\n     * @return {number}\n     */\n    calc_loads() {\n        return Math.floor(this.system.unit_loads * this.system.quantity);\n    }\n}\n","/**\n * Extend the basic ItemSheet with some very simple modifications\n */\nexport class SagaMachineItemSheet extends ItemSheet {\n    /**********************************\n     * METHODS THAT SET BASIC OPTIONS *\n     **********************************/\n\n\t/**\n\t * The default options for item sheets\n\t *\n\t * @override\n\t * @returns {DocumentSheetOptions}\n\t * */\n    static get defaultOptions() {\n        return foundry.utils.mergeObject(super.defaultOptions, {\n            classes: [\"saga-machine\", \"sheet\", \"item\"],\n            width: 600,\n            height: 360,\n            tabs: [{navSelector: \".sheet-tabs\", contentSelector: \".sheet-body\", initial: \"basics\"}],\n            scrollY: [\".basics\", \".attacks\", \"effects\", \".description\"]\n        });\n    }\n\n    /**\n     * Dynamically set the HTML template for the item type\n     *\n     * @returns {string}\n     */\n    get template() {\n        return `systems/saga-machine/templates/items/${this.item.type}-sheet.html`;\n    }\n\n    /**********************************\n     * METHODS THAT HANDLE SHEET DATA *\n     **********************************/\n\n\t/**\n\t * @inheritdoc\n\t * @override\n\t * @return Context\n\t * */\n\tgetData() {\n        const context = super.getData();\n\n        if (this.item.type === 'origin' || this.item.type === 'path') {\n            context.data.system.skills_provided = this.items_provided('skill', context.data.system.skills);\n            context.data.system.traits_provided = this.items_provided('trait', context.data.system.traits);\n            context.data.system.equipment_provided = this.items_provided('item', context.data.system.equipment);\n        }\n\n        return context;\n    }\n\n    /****************************************\n     * METHODS THAT SET SHEET INTERACTIVITY *\n     ****************************************/\n\n\t/**\n\t * @inheritdoc\n\t * @override\n\t * @param {JQuery} html\n\t * */\n\tactivateListeners(html) {\n        super.activateListeners(html);\n\n        // Everything below here is only needed if the sheet is editable\n\t\tif ( !this.isEditable ) return;\n\n        // Toggle edit/display of provided fields in origins/paths\n        html.find('.items-provided').on(\"contextmenu\", this.toggle_items_provided.bind(this));\n\n        html.find('.effect-create').on('click', this.on_create_effect.bind(this));  // Create active effect\n        html.find('.effect-edit').on('click', this.on_edit_effect.bind(this));      // Open active effect sheet\n        html.find('.effect-delete').on('click', this.on_delete_effect.bind(this));  // Delete active effect\n        html.find('.effect-toggle').on('click', this.on_toggle_effect.bind(this));  // Toggle effect on/off\n\n        // Handle attacks\n        this.draw_attacks(html);\n        html.find('.attacks .item-create').click(this.add_attack.bind(this));\n        html.find('.attacks .item-delete').click(this.delete_attack.bind(this));\n    }\n\n    /**\n     * Toggle edit/display of provided fields in origins/paths\n     *\n     * @param {Event} event\n     */\n    toggle_items_provided(event) {\n        event.preventDefault();\n        const target = $(event.target);\n        target.parent().find('.items-provided').each((i, e) => {\n            if ($(e).is(':visible')) e.style.display = 'none';\n            else e.style.display = 'block';\n        });\n    }\n\n    /**************************************\n     * METHODS THAT HANDLE ACTIVE EFFECTS *\n     **************************************/\n\n    /**\n     * Handle creating active effects\n     *\n     * @param {Event} event\n     * @return {Promise<void>}\n     */\n    async on_create_effect(event) {\n        event.preventDefault();\n        return await ActiveEffect.create({name: 'New Effect'}, {parent: this.item});\n    }\n\n    /**\n     * Handle editing active effects\n     *\n     * @param {Event} event\n     * @return {Promise<void>}\n     */\n    async on_edit_effect(event) {\n        const box = $(event.target).closest('.effect');\n        const id = box.data(\"id\");\n        const name = box.data(\"name\");\n        const effect = id ? this.item.effects.get(id) : this.item.effects.getName(name);\n        if (effect) effect.sheet.render(true);\n    }\n\n    /**\n     * Handle deleting active effects\n     *\n     * @param {Event} event\n     * @return {Promise<void>}\n     */\n    async on_delete_effect(event) {\n        const box = $(event.target).closest('.effect');\n        const id = box.data(\"id\");\n        const name = box.data(\"name\");\n        const effect = id ? this.item.effects.get(id) : this.item.effects.getName(name);\n        effect.delete();\n        box.slideUp(200, () => this.render(false));\n    }\n\n    /**\n     * Effect activate / disabled\n     *\n     * @param {Event} event\n     * @return {Promise<void>}\n     */\n    async on_toggle_effect(event) {\n        const box = $(event.target).closest('.effect');\n        const id = box.data(\"id\");\n        const name = box.data(\"name\");\n        const effect = id ? this.item.effects.get(id) : this.item.effects.getName(name);\n        effect.update({'disabled': !effect.disabled});\n    }\n\n    /*******************************\n     * METHODS THAT HANDLE ATTACKS *\n     *******************************/\n\n    /**\n     * Render the list of attacks\n     *\n     * @param {JQuery} html\n     */\n    draw_attacks(html) {\n        // Don't draw attacks if there are no attacks\n        if (!this.item.system.attacks || !this.item.system.attacks.length) return;\n\n        // Get the prototype attack node and parent node, return if it wasn't found\n        const prototype = html.find('.attack.prototype');\n        const parent = html.find('ol.attack-list');\n        if (!prototype || !prototype.length || !parent || !parent.length) return;\n\n        // For each attack, clone the prototype and set up the form\n        for (let attack of this.item.system.attacks) {\n            const clone = prototype.clone();\n            clone.removeClass('prototype');\n            clone.find(\"[name=attack_name]\").val(attack.name);\n            clone.find(\"[name=stat]\").val(attack.stat);\n            clone.find(\"[name=skill]\").val(attack.skill);\n            clone.find(\"[name=damage]\").val(this.find_damage(attack));\n            clone.find(\"[name=damage_type]\").val(this.find_damage_type(attack));\n            clone.find(\"[name=targets]\").val(attack.tn);\n            clone.find(\"[name=properties]\").val(attack.properties);\n            clone.find(\"[name=consequences]\").val(this.find_consequences(attack));\n            parent.append(clone);\n\n            // Set up the data handlers for the form, if this sheet is editable\n\t\t    if ( !this.isEditable ) continue;\n            clone.find('input, select').change(this.update_attacks.bind(this));\n        }\n    }\n\n    /**\n     * Add a new attack to the list\n     */\n    add_attack() {\n        if ( !this.isEditable ) return;\n\n        // Get the prototype attack node and parent node, return if it wasn't found\n        const prototype = this.element.find('.attack.prototype');\n        const parent = this.element.find('ol.attack-list');\n        if (!prototype || !prototype.length || !parent || !parent.length) return;\n\n        const clone = prototype.clone();\n        clone.removeClass('prototype');\n        clone.find('input, select').change(this.update_attacks.bind(this));\n        parent.append(clone);\n    }\n\n    /**\n     * Delete an attack from the list\n     *\n     * @param {Event} event\n     */\n    delete_attack(event) {\n        const box = $(event.currentTarget).closest(\".attack\");\n        const attack_list = box.closest('.attack-list');\n        box.remove();\n        this.update_attacks(event, attack_list);\n    }\n\n    /**\n     * Handle changes to the attack form\n     *\n     * @param {Event} event\n     * @param {JQuery} attack_list\n     */\n    update_attacks(event, attack_list=null) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Get all attacks\n        const attack_nodes = attack_list ? attack_list.find('.attack:not(.prototype)') :\n            $(event.currentTarget).closest('ol.attack-list').find('.attack:not(.prototype)');\n\n        // Iterate over each node and add to the list\n        const attacks = [];\n        attack_nodes.each((i, node) => {\n            let name = $(node).find(\"[name=attack_name]\").val().trim();\n            let stat = $(node).find(\"[name=stat]\").val().trim();\n            let skill = $(node).find(\"[name=skill]\").val().trim();\n            let properties = $(node).find(\"[name=properties]\").val().trim();\n            let damage = $(node).find(\"[name=damage]\").val().trim();\n            let damage_type = $(node).find(\"[name=damage_type]\").val().trim();\n            let targets = $(node).find(\"[name=targets]\").val().trim();\n            let consequences = $(node).find(\"[name=consequences]\").val().trim();\n\n            if (!stat) return; // Don't add if no stat is specified\n\n            // Create attack, add name and properties if set, add to list\n            const attack = {\n                stat: stat,\n                skill: skill,\n                tn: targets,\n                effects: this.create_effects(damage, damage_type, consequences)\n            };\n            if (name) attack['name'] = name;\n            if (properties) attack['properties'] = properties;\n            attacks.push(attack);\n\n            this.item.update({'system.attacks': attacks});\n        });\n    }\n\n    /**\n     * Get the attack's damage\n     *\n     * @param {Attack} attack\n     * @return {string}\n     */\n    find_damage(attack) {\n        return this.search_effects(attack, 'damage', 'value');\n    }\n\n    /**\n     * Get the attack's damage type\n     * @param {Attack} attack\n     * @return {string}\n     */\n    find_damage_type(attack) {\n        return this.search_effects(attack, 'damage', 'damage_type');\n    }\n\n    /**\n     * Get any consequences imposed with a successful attack\n     *\n     * @param {Attack} attack\n     * @return {string}\n     */\n    find_consequences(attack) {\n        return this.search_effects(attack, 'consequence', 'name', true);\n    }\n\n    /**\n     * Search those all effects imposed by the attack and return those matching the specified type\n     *\n     * @param {Attack} attack - The Attack object to search\n     * @param {string} type - The type of the Effect object\n     * @param {string} property - The property of the object containing the desired value\n     * @param {boolean} find_all - Whether to return all instances of the matching type or only the first\n     * @return {string}\n     */\n    search_effects(attack, type, property, find_all=false) {\n        // Ensure that effects are in the right format\n        if (!attack.effects || !attack.effects.length) return '';\n        let parsed_effects = typeof attack.effects === 'string' ?\n            JSON.parse(attack.effects) : attack.effects;\n        parsed_effects = Array.isArray(parsed_effects) ? parsed_effects : [parsed_effects];\n\n        const all_found = [];\n        for (let con of parsed_effects) {\n            if (con.type === type) {\n                let found = con[property];\n                if (found === undefined || found === null) found = '';\n                if (!find_all) return found\n                else all_found.push(found)\n            }\n        }\n        return all_found.join(', ');\n    }\n\n    /**\n     * Create new Effect objects for the entered damage and consequences\n     *\n     * @param {string} damage - The damage to apply\n     * @param {string} damage_type - The damage type in abbreviated format (e.g. cut, pi, sm)\n     * @param {string} consequences - The names of any consequences to impose\n     * @return {Effect[]}\n     */\n    create_effects(damage, damage_type, consequences) {\n        const effects_list = [];\n\n        if (damage !== '') {\n            effects_list.push({\n                type: \"damage\",\n                value: damage,\n                damage_type: damage_type,\n                when: \"success\"\n            });\n        }\n\n        if (consequences !== '') {\n            const all_consequences = consequences.split(',').map(c => c.trim());\n            for (let con of all_consequences)\n                effects_list.push({\n                    type: \"consequence\",\n                    name: con,\n                    when: \"success\"\n                });\n        }\n\n        return effects_list;\n    }\n\n    /****************************************\n     * METHODS THAT SUPPORT ORIGINS / PATHS *\n     ****************************************/\n\n    /**\n     * Parses items in the provided fields of origins and paths\n     *\n     * @param {string} type - The type of SagaMachineItem\n     * @param {string} property - The comma separated list of items to parse\n     * @return {string}\n     */\n    items_provided(type, property) {\n\n        if (!property) return '&horbar;';\n\n        const return_list = [];\n        const items_array = property.split(',').map(t => t.trim());\n        for (let raw_name of items_array) {\n            const match = this.matching_item(type, raw_name);\n            const [item, name, specialization, rank] = [match.item, match.name, match.specialization, match.rank];\n            if (!item) return_list.push(`<a class=\"content-link broken\" draggable=\"true\" data-type=\"${type}\" data-name=\"${name}\" data-specialization=\"${specialization}\" data-rank=\"${rank}\"><i class=\"fas fa-unlink\"></i>${raw_name}</a>`);\n            else return_list.push(`<a class=\"content-link\" draggable=\"true\" data-uuid=\"${item.uuid}\" data-id=\"${item.id}\" data-type=\"Item\" data-specialization=\"${specialization}\" data-rank=\"${rank}\" data-tooltip=\"Item\"><i class=\"fas fa-suitcase\"></i>${raw_name}</a>`);\n        }\n\n        return return_list.join(', ');\n    }\n\n    /**\n     * Find the SagaMachineItem that matches the name and specialization\n     *\n     * @param {string} type - The SagaMachineItem type\n     * @param {string} raw_name - The raw name in \"Name (Specialization) Rank\" format\n     * @return {{item: SagaMachineItem, name:string, specialization: string, rank: number|string}}\n     */\n    matching_item(type, raw_name) {\n        // Extract rank\n        let parts = raw_name.split(' ');\n        let rank = parts[parts.length-1];\n        if (isNaN(Number(rank))) rank = '';\n\n        // Extract specialization, if any\n        let specialization = raw_name.match(/\\(([^\\)]+)\\)/);\n        if (specialization) specialization = specialization[specialization.length-1];\n        else specialization = '';\n\n        // Extract name\n        let name = raw_name.slice(0, raw_name.length-rank.length);\n        parts = name.split('(');\n        if (parts.length > 1) name = parts[0];\n        name = name.trim()\n\n        // Query for matching items, return null if not found\n        const matches = game.items.filter(i => i.type === type && i.name === name);\n        if (matches.length) return { item: matches[0], name: name, specialization: specialization, rank: rank }\n        else return { item: null, name: name, specialization: specialization, rank: rank };\n    }\n}\n","import { add_effect_from_ui, evaluate_effect_variables, prompt_on_effect_deletion, remove_effect_from_ui, sync_effects,\n    sync_status } from \"../game/consequences.js\"\nimport { create_hotbar_macro } from \"./macros.js\";\nimport { add_apply_damage, add_edit_test, add_push_luck, attach_test_data, drop_chat_damage } from \"./chat.js\";\n\n/**\n * Run every time an actor is updated: Hooks.on('updateActor')\n *\n * @param {SagaMachineActor} actor\n * @param change\n * @param options\n * @param {string} id\n * @return {Promise<void>}\n */\nexport async function update_actor(actor, change, options, id) {\n    // Add or remove Hindered consequences for encumbrance\n    if (game.user.id === id && actor.type === 'character')\n        await actor.encumbrance_consequences();\n\n    // Update the combat initiative if the actor has changed its turn type\n    if (game.user.id === id && game.combat && (game.user.isGM || actor.isOwner))\n        game.combat.update_combatant_initiative(actor, change?.system?.fast_turn);\n}\n\n/**\n * Run every time an item is created: Hooks.on('createItem')\n *\n * @param {SagaMachineItem} item\n * @param options\n * @param {string} id\n * @return {Promise<void>}\n */\nexport async function create_item(item, options, id) {\n    /* Calls for items */\n\n    // Add or remove Hindered consequences for encumbrance\n    if (game.user.id === id && item.parent && item.parent.type === 'character' && item.type === 'item')\n        await item.parent.encumbrance_consequences();\n\n    // If this was dragged from a container, remove the container as a parent\n    if (game.user.id === id && item.parent && item.type === 'item' && item.system.parent)\n        await item.remove_from_container();\n\n    /* Calls for consequences */\n\n    // Sync consequences with status effects\n    if (game.user.id === id && item.type === \"consequence\" && item.parent)\n        await sync_status(item.parent);\n}\n\n/**\n * Run every time an item is updated: Hooks.on('updateItem')\n *\n * @param {SagaMachineItem} item\n * @param change\n * @param options\n * @param {string} id\n * @return {Promise<void>}\n */\nexport async function update_item(item, change, options, id) {\n    /* Calls for items */\n\n    // Add or remove Hindered consequences for encumbrance\n    if (game.user.id === id && item.parent && item.parent.type === 'character' && item.type === 'item')\n        await item.parent.encumbrance_consequences();\n\n    /* Calls for consequences */\n\n    // Sync consequences with status effects\n    if (game.user.id === id && item.type === \"consequence\" && item.parent)\n        await sync_status(item.parent);\n}\n\n/**\n * Run every time an item is deleted: Hooks.on('deleteItem')\n *\n * @param {SagaMachineItem} item\n * @param options\n * @param {string} id\n * @return {Promise<void>}\n */\nexport async function delete_item(item, options, id) {\n    /* Calls for items */\n\n    // Add or remove Hindered consequences for encumbrance\n    if (game.user.id === id && item.parent && item.parent.type === 'character' && item.type === 'item')\n        await item.parent.encumbrance_consequences();\n\n    /* Calls for consequences */\n\n    // Sync consequences with status effects\n    if (game.user.id === id && item.type === \"consequence\" && item.parent)\n        await sync_status(item.parent);\n}\n\n/**\n * Run before an active effect is created: Hooks.on('preCreateActiveEffect')\n *\n * @param {ActiveEffect} effect\n * @param data\n * @param options\n * @param {string} id\n * @return {boolean}\n */\nexport function pre_create_active_effect(effect, data, options, id) {\n    let continue_forward = true;\n\n    // If creating an effect on an actor which came from an item, replace @ variables with correct value\n    if (game.user.id === id && effect.modifiesActor && effect.parent && effect.parent.type === 'character'\n        && effect.origin) evaluate_effect_variables(effect)\n\n    return continue_forward;\n}\n\n/**\n * Run after an active effect is created: Hooks.on('createActiveEffect')\n *\n * @param {ActiveEffect} effect\n * @param options\n * @param {string} id\n * @return {Promise<void>}\n */\nexport async function create_active_effect(effect, options, id) {\n    // If this is a status applied directly from the UI\n    if (game.user.id === id && !effect.origin && effect.statuses?.size && effect.target)\n        await add_effect_from_ui(effect);\n\n    // Creating an effect on an item which belongs to an actor\n    if (game.user.id === id && !effect.modifiesActor && effect.transfer && effect.parent && effect.parent.parent &&\n        effect.parent.parent.type === 'character') await sync_effects(effect.parent);\n}\n\n/**\n * Run after an active effect is updated: Hooks.on('updateActiveEffect')\n *\n * @param {ActiveEffect} effect\n * @param change\n * @param options\n * @param {string} id\n * @return {Promise<void>}\n */\nexport async function update_active_effect(effect, change, options, id) {\n    // Updating an effect on an item which belongs to an actor\n    if (game.user.id === id && !effect.modifiesActor && effect.transfer && effect.parent && effect.parent.parent &&\n        effect.parent.parent.type === 'character') await sync_effects(effect.parent);\n}\n\n/**\n * Run before an active effect is deleted: Hooks.on('preDeleteActiveEffect')\n *\n * @param {ActiveEffect} effect\n * @param options\n * @param {string} id\n * @return {boolean}\n */\nexport function pre_delete_active_effect(effect, options, id) {\n    let continue_forward = true;\n\n    // If using the status UI to delete a consequence with a subject, stop and prompt\n    if (game.user.id === id && !effect.origin && effect.statuses?.size &&\n        (effect?.flags?.system?.subject_prompt || effect?.flags?.system?.value_prompt))\n        continue_forward &&= prompt_on_effect_deletion(effect);\n\n    return continue_forward;\n}\n\n/**\n * Run after an active effect is deleted: Hooks.on('deleteActiveEffect')\n *\n * @param {ActiveEffect} effect\n * @param options\n * @param {string} id\n * @return {Promise<void>}\n */\nexport async function delete_active_effect(effect, options, id) {\n    // If this is a status applied directly from the UI\n    if (game.user.id === id && !effect.origin && effect.statuses?.size && effect.target)\n        await remove_effect_from_ui(effect);\n\n    // Deleting an effect on an item which belongs to an actor\n    if (game.user.id === id && !effect.modifiesActor && effect.transfer && effect.parent && effect.parent.parent &&\n        effect.parent.parent.type === 'character') await sync_effects(effect.parent, true);\n}\n\n/**\n * Run after the current combat has been updated: Hooks.on('preUpdateCombat')\n *\n * @param {SagaMachineCombat} combat\n * @param update\n * @param options\n * @param {string} id\n * @return {Promise<void>}\n */\nexport async function pre_update_combat(combat, update, options, id){\n    // Perform start of combat and start of round tasks\n    if (game.user.id === id && update.round) {\n        await combat.start_of_round();\n    }\n}\n\n/**\n * Run after the user drops a draggable onto the hotbar: Hooks.on('hotbarDrop')\n *\n * @param {Hotbar} bar\n * @param data\n * @param {number} slot\n * @return {Promise<void>}\n */\nexport async function hotbar_drop(bar, data, slot) {\n    // Handle test macros dropped to the hotbar\n    await create_hotbar_macro(data, slot);\n}\n\n/**\n * Run when a chat card is displayed: Hooks.on('renderChatMessage')\n *\n * @param {ChatMessage} app\n * @param {jQuery} html\n * @param msg\n * @return {Promise<void>}\n */\nexport async function render_chat_message(app, html, msg) {\n    // Attach test data to the chat card\n    await attach_test_data(html);\n}\n\n/**\n * Run when data is dropped on an actor sheet: Hooks.on('dropActorSheetData')\n *\n * @param {SagaMachineActor} actor\n * @param {SagaMachineActorSheet} sheet\n * @param data\n * @return {Promise<void>}\n */\nexport async function drop_actor_sheet_data(actor, sheet, data) {\n    await drop_chat_damage(actor, data);\n}\n\n/**\n * Run when a chat card is right-clicked: Hooks.on('getChatLogEntryContext')\n *\n * @param {jQuery} html\n * @param {ContextMenuEntry[]} options\n * @return {Promise<void>}\n */\nexport async function get_chat_log_entry_context(html, options) {\n    // Add push Your Luck option\n    await add_push_luck(options);\n\n    // Add apply Damage option\n    await add_apply_damage(options);\n\n    // Add edit Test option\n    await add_edit_test(options);\n}","import { token_actor } from \"./utils.js\";\nimport { Test, test_dialog } from \"../game/tests.js\";\n\n/**\n * Create a Macro from an Item drop. Get an existing item macro if one exists, otherwise create a new one.\n *\n * @param {{type: string, stat:string|null, score:string|null, skill:string|null, tn:string|number|null,\n *          sceneId:string|null, tokenId: string|null, actorId:string|null}} data     The dropped data\n * @param {number} slot     The hotbar slot to use\n * @returns {Promise}\n */\nexport async function create_hotbar_macro(data, slot) {\n    // Only create macro for tests\n    if (data.type !== 'Test') return;\n\n    // Verify that the actor may be retrieved\n    const actor = token_actor({\n        scene_id: data['sceneId'],\n        token_id: data['tokenId'],\n        actor_id: data['actorId']\n    });\n    if (!actor) return ui.notifications.warn(\"You can only create macro buttons for known actors\");\n\n    // Generate the test label\n    const test = new Test({\n        actor: actor,\n        stat: data['stat'] || data['score'],\n        skill: data['skill'],\n        tn: data['tn']\n    });\n    const label = test.label\n\n    // Get the icon, if any\n    let skill = null;\n    if (!!data['skill']) skill = game.items.find(i => i.name === data['skill'] && i.type === 'skill');\n\n    // Create the macro command\n    const data_string = JSON.stringify(data);\n    const command = `game.sagamachine.sm_test_macro(${data_string});`;\n    let macro = game.macros.find(m => (m.name === label) && (m.command === command));\n    let macro_spec = {name: label, type: \"script\", command: command, flags: {\"sagamachine.sm_test_macro\": true}};\n    if (skill) macro_spec['img'] = skill.img;\n    if (!macro) macro = await Macro.create(macro_spec);\n\n    // Assign to the hotbar\n    await game.user.assignHotbarMacro(macro, slot);\n    return false;\n}\n\n/**\n * Create a Macro from an Item drop. Get an existing item macro if one exists, otherwise create a new one.\n *\n * @param {{sceneId: string|null, tokenId: string|null, actorId: string|null}} dataset\n */\nexport async function sm_test_macro(dataset) {\n    // Get the actor from any embedded IDs\n    let actor = token_actor({\n        scene_id: dataset['sceneId'],\n        token_id: dataset['tokenId'],\n        actor_id: dataset['actorId']\n    });\n\n    // If no actor is available, look up using the speaker\n    if (!actor) {\n        const speaker = ChatMessage.getSpeaker();\n        if (speaker.token) actor = game.actors.tokens[speaker.token];\n        if (!actor) actor = game.actors.get(speaker.actor);\n        dataset['actorId'] = actor.id\n    }\n\n    await test_dialog(dataset);\n}","import { Attack, Test } from \"../game/tests.js\";\nimport { Effect } from \"../game/damage.js\";\n\n/**\n * Attach test data to the chat card\n *\n * @param {jQuery} html\n * @return {Promise<void>}\n */\nexport async function attach_test_data(html) {\n    if (!html.find('.damage').length) return;  // Do nothing if no damage to attach\n\n    // Is the first hit a critical hit?\n    let critical = !!html.find('.critical').length;\n\n    // Gather data for all hits\n    const hits = [];\n    html.find('.damage').each((i, e) => {\n        const damage = Number($(e).text());\n        const damage_type = $(e).parent().find('.damage-type').text();\n        const pierce_armor = Number($(e).data('pierce')) || 0;\n        hits.push({damage: damage, damageType: damage_type, critical: critical, pierce: pierce_armor});\n        critical = false; // Subsequent hits aren't critical\n    });\n\n    // Attach drag listener\n    html[0].setAttribute(\"draggable\", true);\t// Add draggable and dragstart listener\n    html[0].addEventListener(\"dragstart\", ev => {\n        ev.currentTarget.dataset['hits'] = JSON.stringify(hits);\n        ev.dataTransfer.setData(\"text/plain\", JSON.stringify({hits: hits}));\n    }, false);\n}\n\n/**\n * Apply damage from a chat card, dropped onto an actor's character sheet\n *\n * @param {SagaMachineActor} actor\n * @param data\n * @return {Promise<void>}\n */\nexport async function drop_chat_damage(actor, data) {\n    if (data['hits'])\n        for (let hit of data['hits'])\n            await actor.apply_damage(hit['damage'], hit['damageType'], hit['critical'], hit['pierce']);\n}\n\n/**\n * Add the Push Luck menu item to chat cards\n *\n * @param {ContextMenuEntry[]} options\n * @return {Promise<void>}\n */\nexport async function add_push_luck(options) {\n    options.push({\n        name: 'Push Your Luck',\n        icon: '<i class=\"fas fa-dice\"></i>',\n        condition: html => !!html.find('.test-json').length,\n        callback: async html => {\n            // Recreate test object from json\n            const test = Test.from_json(JSON.parse(html.find('.test-json').val()));\n\n            // Check for ownership\n            if (!test?.actor?.isOwner)\n                return ui.notifications.warn(\"You can't Push Your Luck for this character.\");\n\n            // Check for enough luck\n            if (test?.actor?.system?.scores?.luck?.value <= 0)\n                return ui.notifications.warn(\"The character doesn't have enough Luck.\");\n\n            // Add additional boon, mark luck tag and re-evaluate\n            test.boons++;\n            test.use_luck = true;\n            await test.evaluate()\n\n            // Decrement luck\n            test.actor.update({'system.scores.luck.value': test.actor.system.scores.luck.value - 1});\n\n            // Apply any immediate test consequences\n            await test.apply_effects();\n\n            // Display the new chat card\n            await test.to_chat({ whisper: html.hasClass('whisper'), rolls: [test.results] });\n        }\n    });\n}\n\n/**\n * Add the Apply Damage menu option to chat cards\n *\n * @param {ContextMenuEntry[]} options\n * @return {Promise<void>}\n */\nexport async function add_apply_damage(options) {\n    options.push({\n        name: 'Apply Damage',\n        icon: '<i class=\"fas fa-user-minus\"></i>',\n        condition: html => !!html.find('.damage').length,\n        callback: html => {\n            // Get all selected tokens\n            let tokens = game?.canvas?.tokens?.controlled;\n\n            // If there are no valid tokens, and you are the GM, give a warning\n            if (!tokens.length && game.user.isGM) { ui.notifications.warn(\"No valid character selected.\"); return; }\n\n            // Filter for owned token actors, falling back to player character is none are selected\n            let valid_tokens = tokens.filter(t => t?.document?.actor?.isOwner)\n            if (!valid_tokens.length && game.user.character) valid_tokens = [game.user.character];\n\n            // For all valid actors\n            for (let token of valid_tokens) {\n                let actor = token?.document?.actor;\n                if (actor && actor.isOwner) {\n                    // Is the first hit a critical hit?\n                    let critical = !!html.find('.critical').length;\n\n                    // Apply each damage\n                    html.find('.damage').each((i, e) => {\n                        const damage = Number($(e).text());\n                        const damage_type = $(e).parent().find('.damage-type').text();\n                        const pierce_armor = Number($(e).data('pierce')) || 0;\n\n                        actor.apply_damage(damage, damage_type, critical, pierce_armor);\n                        critical = false; // Subsequent hits aren't critical\n                    });\n                }\n            }\n        }\n    });\n}\n\n/**\n * Add the Edit Test menu option to chat cards for GMs\n *\n * @param {ContextMenuEntry[]} options\n * @return {Promise<void>}\n */\nexport async function add_edit_test(options) {\n    options.push({\n        name: 'Edit Results',\n        icon: '<i class=\"fa fa-edit\"></i>',\n        condition: html => game.user.isGM,\n        callback: html => {\n            const message_id = html.data('messageId');\n            const test = Test.from_json(JSON.parse(html.find('.test-json').val()));\n\n            // Open edit dialog\n            new Dialog({\n                title: `Edit Results`,\n                content: `\n                    <form class=\"saga-machine\">\n                        <div class=\"form-group\">\n                            <label for=\"critical\">Success</label>\n                            <input type=\"checkbox\" name=\"success\" ${test.success ? 'checked' : ''}>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"critical\">Critical</label>\n                            <input type=\"checkbox\" name=\"critical\" ${test.critical ? 'checked' : ''}>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"value\">Margin</label>\n                            <input type=\"number\" name=\"margin\" value=\"${test.margin}\" autofocus>\n                        </div>\n                        <div class=\"sheet-body\">\n                            <ol class=\"items-list consequence-list\">\n                                <li class=\"item flexrow items-header consequence-row\">\n                                    <div class=\"item-name\">Type</div>\n                                    <div class=\"item-name\">Value</div>\n                                    <div class=\"item-controls\">\n                                        <a class=\"item-control item-create\" title=\"Create effect\"><i class=\"fas fa-plus\"></i> Add</a>\n                                    </div>\n                                </li>\n                \n                                <li class=\"item flexrow consequence consequence-row prototype\">\n                                    <select class=\"item-input item-name\" name=\"type\">\n                                        <option value=\"damage\">Damage</option>\n                                        <option value=\"consequence\">Consequence</option>\n                                        <option value=\"defense\">Defense</option>\n                                        <option value=\"message\">Message</option>\n                                    </select>\n                                    <input class=\"item-input item-name\" type=\"text\" name=\"value\" value=\"\" />\n                                    <div class=\"item-controls\">\n                                        <a class=\"item-control item-delete\" title=\"Delete Item\"><i class=\"fas fa-trash\"></i></a>\n                                    </div>\n                                </li>\n                            </ol>\n                        </div>\n                    </form>`,\n                render: html => {\n                    // Fill out existing consequences\n                    if (test.effects && test.effects.length) {\n                        // Get the prototype consequence node and parent node\n                        const prototype = html.find('.consequence.prototype');\n                        const parent = html.find('ol.consequence-list');\n\n                        // For each effect, clone the prototype and set up the form\n                        for (let effect of test.effects) {\n                            let value = null;\n                            switch (effect.type) {\n                                case 'consequence': value = effect.name; break;\n                                case 'damage': value = `${Number(effect.value) + (Number(effect.margin) || Number(test.margin))} ${effect.damage_type} ${effect.properties}`; break;\n                                case 'message': value = `${effect.key}: ${effect.value}`; break;\n                                default: value = '';\n                            }\n\n                            const clone = prototype.clone();\n                            clone.removeClass('prototype');\n                            clone.find(\"[name=type]\").val(effect.type);\n                            clone.find(\"[name=value]\").val(value);\n                            parent.append(clone);\n                        }\n                    }\n\n                    html.find('.consequence-list .item-create').click(event => {\n                        // Get the prototype consequence node and parent node, return if it wasn't found\n                        const prototype = html.find('.consequence.prototype');\n                        const parent = html.find('ol.consequence-list');\n                        if (!prototype || !prototype.length || !parent || !parent.length) return;\n\n                        const clone = prototype.clone();\n                        clone.removeClass('prototype');\n                        clone.find('.item-delete').click(event => $(event.currentTarget).closest(\".consequence\").remove());\n                        parent.append(clone);\n                    });\n                    html.find('.consequence-list .item-delete').click(event => $(event.currentTarget).closest(\".consequence\").remove());\n                },\n                buttons: {\n                    Edit: {\n                        icon: \"<i class='fas fa-check'></i>\",\n                        label: 'OK',\n                        callback: async (html) => {\n                            // Set values based on the contents of the form\n                            test.success = html.find(\"input[name=success]\").is(':checked');\n                            test.critical = html.find(\"input[name=critical]\").is(':checked');\n                            test.margin = Number(html.find(\"input[name=margin]\").val());\n                            test.edited = true;\n\n                            const effects = [];\n                            html.find('.consequence:not(.prototype)').each((i, e) => {\n                                const type = $(e).find('select[name=type]').val();\n                                const value = $(e).find('input[name=value]').val();\n\n                                const params = {};\n                                if      (type === 'consequence') params.name = value.trim();\n                                else if (type === 'message') {\n                                    const parts = value.split(': ');\n                                    if (parts.length >= 2) [params.key, params.value] = [parts[0], parts[1]];\n                                    else [params.key, params.value] = ['Message', parts[0]];\n                                }\n                                else if (type === 'damage') {\n                                    const parts = value.split(' ');\n                                    params.value = Number(parts?.[0]) - test.margin;\n                                    params.damage_type = parts?.[1];\n                                    if (parts.length >= 3) params.properties = Attack.parse_properties(parts.slice(2).join(' '));\n                                }\n\n                                const effect = new Effect({type: type, ...params}, test);\n                                effect.apply(test.success ? 'success' : 'failure')\n                                effects.push(effect);\n                                test.effects = effects;\n                            });\n\n                            // Save edited card\n                            await ChatMessage.updateDocuments([{_id: message_id, content: test.content(), flavor: test.flavor()}], {});\n                        }\n                    }\n                }\n            }).render(true);\n        }\n    });\n}"],"names":["$ba32b9ea93ee5c3a$export$9a00dee1beb8f576","word","charAt","toUpperCase","slice","$ba32b9ea93ee5c3a$export$99454b2c58b3846f","scene_id","token_id","actor_id","game","scenes","get","tokens","actor","actors","$ba32b9ea93ee5c3a$export$6d905af60429adc0","member_list","Math","floor","random","length","$f7972d8082eaa7d7$exports","e","t1","i","Object","keys","getOwnPropertySymbols","s","filter","getOwnPropertyDescriptor","enumerable","push","apply","arguments","a","forEach","Symbol","toPrimitive","call","TypeError","String","Number","defineProperty","value","configurable","writable","getOwnPropertyDescriptors","defineProperties","trim","toLowerCase","n","Array","isArray","map","o","indexOf","r","document","createElement","replace","innerHTML","innerText","l","DOMParser","parseFromString","body","firstElementChild","d","nodeType","h","g","prototype","toString","split","p","hasOwnProperty","assign","c","includes","u","normalize","m","test","navigator","userAgent","v","crypto","getRandomValues","Uint8Array","f","classList","contains","settings","classNames","tag","T","window","getSelection","getRangeAt","createTextNode","deleteContents","insertNode","w","__tagifyTagData","console","warn","b","parentNode","rangeCount","setStartAfter","collapse","removeAllRanges","addRange","y","previousSibling","before","x","delimiters","pattern","tagTextProp","maxTags","callbacks","addTagOnBlur","onChangeAfterBlur","duplicates","whitelist","blacklist","enforceWhitelist","userInput","keepInvalidTags","createInvalidTags","mixTagsAllowedAfter","mixTagsInterpolator","backspace","skipInvalid","pasteAsTags","editTags","clicks","keepInvalid","transformTag","a11y","focusableTags","mixMode","insertAfterTag","autoComplete","enabled","rightKey","namespace","selectMode","input","focus","tagNoAnimation","tagInvalid","tagNotAllowed","scopeLoading","hasMaxTags","hasNoTags","empty","inputInvalid","dropdown","dropdownWrapper","dropdownHeader","dropdownFooter","dropdownItem","dropdownItemActive","dropdownItemHidden","dropdownInital","tagText","tagX","tagLoading","tagEditing","tagFlash","tagHide","classname","maxItems","searchKeys","fuzzySearch","caseSensitive","accentedSearch","includeSelectedTags","highlightFirst","closeOnSelect","clearOnSelect","position","appendTarget","hooks","beforeRemoveTag","Promise","resolve","beforePaste","suggestionClick","O","_dropdown","bind","refs","M","I","N","exceed","duplicate","notAllowed","_","Proxy","__tagify","off","on","trigger","cloneData","isJQueryPlugin","jQuery","DOM","originalInput","triggerHandler","tagify","event","cloneEvent","HTMLElement","CustomEvent","detail","dispatchEvent","isFirefox","isIE","documentMode","getPersistedData","id","localStorage","getItem","JSON","parse","setPersistedData","setItem","stringify","Event","clearPersistedData","removeItem","applySettings","state","inputText","editing","composing","actions","flaggedTags","listeners","build","getCSSVars","loadOriginalValues","events","customBinding","binding","autofocus","parseTemplate","content","querySelector","getHeaderRef","getFooterRef","getAllSuggestionsRefs","querySelectorAll","dropdownItemSelector","show","mode","templates","dropdownItemNoMatch","enable","isLoading","readonly","clearTimeout","dropdownHide__bindEventsTimeout","suggestedListItems","filterListItems","scope","unshift","autocomplete","suggest","hide","fill","highlightOption","visible","setTimeout","query","setStateSelection","render","removeEventListener","setAttribute","removeChild","ddItemData","ddItemElm","selection","baseOffset","toggle","cloneNode","style","cssText","appendChild","clientHeight","add","remove","createListHTML","dropdownContent","join","fillHeaderFooter","replaceChild","refilter","placeAbove","pageYOffset","scrollTop","fullscreenElement","webkitFullscreenElement","documentElement","max","clientWidth","innerWidth","startContainer","startOffset","createRange","setStart","setEnd","left","getBoundingClientRect","right","top","bottom","offsetLeft","offsetTop","width","ceil","pageXOffset","onKeyDown","onMouseOver","onMouseLeave","onClick","onScroll","hasFocus","dropdownItemActiveSelector","getSuggestionDataByNode","key","preventDefault","getNextOrPrevOption","matches","ArrowLeft","getMappedValue","set","tagData","suggestionElm","then","selectOption","addTags","catch","raw","charCodeAt","removeTags","editTag","target","closest","button","scrollHeight","percentage","round","getAttribute","find","findIndex","removeAttribute","data","elm","onEditTagDone","__isValid","normalizeTags","toggleFocusClass","addEventListener","once","selectAll","suggestions","isTagDuplicate","some","exact","reduce","every","sortby","concat","mapValueTo","mappedValue","getSetTagData","helpers","sameStr","removeCollectionProp","omit","isObject","parseHTML","escapeHTML","extend","concatWithoutDups","getUID","isNodeTag","customEventsList","dataProps","wrapper","className","disabled","required","placeholder","title","class","getAttributes","t","generateClassSelectors","hasAttribute","RegExp","_delimiters","TEXTS","texts","getCustomAttributes","anchorOffset","anchorNode","range","getComputedStyle","CSSVars","tagHideTransition","pop","unit","getPropertyValue","integrated","originalInput_tabIndex","tabIndex","inputSelector","insertBefore","destroy","unbindGlobal","clearInterval","main","originalInputValueObserverInterval","blockChangeEvent","textContent","removeAllTags","parseMixTags","lastChild","tagName","insertAdjacentHTML","postUpdate","lastOriginalValueReported","loading","toggleClass","toggleScopeValidation","triggerChangeEvent","bubbles","simulated","_valueTracker","setValue","mainEvents","bindGlobal","onFocusBlur","keydown","onKeydown","click","onClickScope","dblclick","onDoubleClickScope","paste","onPaste","drop","onDrop","compositionstart","onCompositionStart","compositionend","onCompositionEnd","setInterval","observeOriginalInputValue","inputMutationObserver","MutationObserver","onInputDOMChange","disconnect","observe","childList","global","type","cb","onWindowKeyDown","onClickAnywhere","relatedTarget","addNew","Date","activeElement","nextElementSibling","getTagElms","nodeValue","fromCharCode","previousElementSibling","Element","nodeName","min","nextSibling","index","blur","inputSuggestion","onInput","onMixTagsInput","inputElm","validateTag","isValid","search","createDocumentFragment","inputType","createTagElem","childNodes","setRangeAtStartEnd","update","withoutChangeEvent","cloneRange","focusNode","endOffset","match","lastIndexOf","prefix","matchedPatternCount","onInputIE","tagifyValue","getNodeIndex","fixFirefoxLastTagNoCaret","clipboardData","getData","pastedText","injectAtCaret","onEditTagInput","__tagId","editTagChangeDetected","originalIsValid","newValue","onEditTagPaste","onEditTagFocus","onEditTagBlur","__originalData","message","onEditTagkeydown","__originalHTML","editable","addedNodes","outerHTML","replaceWith","tagSelector","removedNodes","getTagTextNode","tagTextSelector","setTagTextNode","getLastTag","skipValidation","editTagToggleValidity","removeTagsFromValue","previousData","replaceTag","reCheckInvalidTags","getInvalidTagAttrs","updateValueByDOMTags","appendMixTags","validate","source","substr","substring","replaceTextWithNode","getTagIdx","getTagIndexByValue","getTagElmByValue","flashTag","isTagBlacklisted","isTagWhitelisted","getWhitelistItem","setReadonly","setContentEditable","contentEditable","setDisabled","Error","splitText","selectTag","appendTag","addEmptyTag","addMixTags","__preInvalidData","prefixedTextToTag","createNodeIterator","NodeFilter","SHOW_TEXT","nextNode","node","idx","__removed","parseFloat","clientTop","removeTagsFromDOM","splice","setOriginalInputValue","debouncedUpdateTimeout","getInputValue","getCleanValue","getMixedTagsAsString","originalInputValueFormat","removeTag","$7294f01c4c99ce18$export$b5c87c9f30e8974e","_name","_description","boons","banes","modifier","divide","percent","constructor","name","description","parseInt","mod_str","boons_banes","repeat","mod","color","json","raw_mods_list","mods_list","params","URLSearchParams","error","includes_plus","includes_minus","GRAY","total_modifiers","tags","list_from_string","input_str","json_list","from_tag","tag_json","parts","all_mods","leading","at","$d5ef102242816c77$export$1b16fc9eb974a84d","_actor","_label","target_score","critical","evaluated","margin","pairs","results","skill_value","stat_value","success","randomizer","total","use_pair","dataset","sceneId","tokenId","actorId","system","stats","stat","scores","tn","isNaN","effects","$30134fcb90c67fad$export$a32b0b1c1ac59d04","effects_list","scene","token_data","items","token","Token","label","stat_label","skill_label","skill","tn_label","roll_syntax","make_pairs","found","highest_pair","dice","result","_total","active","discarded","lookup_skill","specialization","matching_skills","item","rank","calc_total","relevant_skill","lookup_tn","is_defense","is_willpower","user","targets","values","next","defense","willpower","double_ones","one_count","calc_margin","abs","evaluate","roll","Roll","apply_effects","properties","effects_evaluated","$d5ef102242816c77$export$6191c3ac084cc81b","has_property","base_attack","basic_attack_damage","damage_type","m_count","when","property_value","ordering","sort","damage_effects","flavor","target_message","success_message","success_class","result_message","effect_message","use_luck","edited","dice_html","to_return","stat_span","skill_span","modifier_span","test_json","to_json","formula","to_chat","whisper","rolls","toMessage","create","speaker","ChatMessage","getSpeaker","toJSON","CONST","CHAT_MESSAGE_TYPES","WHISPER","users","isGM","character","entries","isToken","parent","effect_json","con","_evaluated","_formula","_terms","terms","from_json","obj","sagamachine","SagaMachineActor","Die","faces","_effects_string","_effect","full_name","effects_string","effect","is_attack","strength_met","strength","damage","parse_properties","light","hands","base_damage","property","prop","startsWith","val","$d5ef102242816c77$export$5803ef6f71bdd50f","Dialog","renderTemplate","sheet","html","modifiers","__esModule","default","tag_data","replaceAll","inputs","modified_dataset","foundry","utils","deepClone","score","new_modifiers","buttons","callback","icon","IGNORES_ALL_ARMOR","right_time","format_message","consequence_link","consequence","str_dmg","dexterity","speed","endurance","intelligence","perception","charisma","determination","apply_consequence","apply_damage","apply_defense","apply_message","clean_name","subject","link","pierce","ignores","defense_tn","willpower_tn","$30134fcb90c67fad$var$Wound","descriptor","$30134fcb90c67fad$export$a8bf75e7367c8d41","generate_wound","wound","grave_wounds_table","tables","getName","draw","text","$96b9cba4b1d7a59a$export$bd4feec9a9a5101a","FAST_TURN","NPC_TURN","SLOW_TURN","$96b9cba4b1d7a59a$export$ca8ad600a8ec4279","Combatant","getInitiativeRoll","isNPC","getInitiativeValue","fast_turn","$96b9cba4b1d7a59a$export$c9b99f4a745fcbd1","Combat","rollInitiative","ids","updateTurn","messageOptions","updates","combatant","combatants","isOwner","async","_id","initiative","updateEmbeddedDocuments","turn","turns","update_combatant_initiative","turn_type","combat","setInitiative","start_of_round","rollAll","chat","hidden","statuses","from","capitalize","has","dying_tn","$96b9cba4b1d7a59a$export$6503760ac807196f","CombatTracker","activateListeners","viewed","each","el","combatant_id","getElementsByClassName","ev","li","currentTarget","combatantId","setupTurns","$d200992a7286a1e5$export$7065c91b0a27b3b9","system_conditions","standard_consequences","slugify","flags","core","overlay","subject_prompt","value_prompt","remove_others","no_consequence","$d200992a7286a1e5$export$ce53e9a4e8384701","skip_actor","skip_global","skip_new","Item","$d200992a7286a1e5$export$bce7246a7036e38","consequences","Set","add_set","difference","remove_set","delete","status_list","CONFIG","statusEffects","createEmbeddedDocuments","size","deleteEmbeddedDocuments","status_set","shift","$d200992a7286a1e5$export$40b3570d78570c16","delete_only","origin","uuid","copies","clone","$d200992a7286a1e5$export$7801755dddf1fd51","fromUuid","change","changes","$d200992a7286a1e5$export$b65e028fee10b7bb","do_math","Function","updateSource","$d200992a7286a1e5$export$31930d543788113d","status_name","first","Confirm","$d200992a7286a1e5$export$efd50a08c6cb878d","$28ccc140dd142615$export$c49d3afcc675f1b5","Actor","prepareDerivedData","$28ccc140dd142615$export$ed3c1ed9e6e8a483","calculate_scores","$28ccc140dd142615$export$251803a9103f8263","$28ccc140dd142615$export$d98152187a58a356","getRollData","is_npc","calculate_score","other_modifiers","base","arr","mid","nums","mods","base_score","armor_properties","equipped_armor","group","equipped","highest","arm","armor","Armor","bulky","Bulky","powered","Powered","Sealed","armor_value","encumbrance_total","encumbrance","wound_total","wounds","has_trait","trait_name","specialization_match","has_immunity","has_vulnerability","has_resistance","health","applied_damage","current_increment","dying_to_apply","new_increment","already_dying","dying_consequence","new_dying_value","ActiveEffect","consequence_name","specialized","actor_copy","final_descriptor","encumbrance_consequences","hindered","is_pc","npc","mods_object","other","attack","fatigue","custom","move","experiences_spent","experiences","spent","spent_stats","spent_skills","skills","spent_traits","traits","unspent","level","power_level","stat_cost","free","free_total","free_ranks","ranked","cost","total_spent","wealth","wealth_total","quantity","money","handling","space","loads_total","loads","Hooks","Handlebars","registerHelper","loadTemplates","$05cfedbfc2cc6c3c$export$c7f6895f6cb1258b","ActorSheet","defaultOptions","mergeObject","classes","height","tabs","navSelector","contentSelector","initial","scrollY","dragDrop","dragSelector","dropSelector","template","context","ambitions","paths","origins","all_skills","skill_groups","skills_and_traits","all_traits","trait_groups","equipment","containers","container","all_items","default_group","display_if_empty","raw_groups","group_items","final_groups","contents","groups_and_containers","top_groups","blank","equipment_groups","container_encumbrance","group_path","blank_name","access","object","path","groups","group_name","k","calc_health_progress_bar","isEditable","on_item_create","on_item_edit","on_item_delete","on_item_remove","on_item_update","expand_description","chat_description","attach_drag_events","attach_drop_events","_onDragStart","stopPropagation","attach_ids","mod_keys","altKey","ctrlKey","shiftKey","metaKey","dataTransfer","setData","$","itemData","box","parents","contained","slideUp","attribute","all_descriptions","is","slideToggle","item_id","attr","dt","originalEvent","effectAllowed","drop_item","container_id","on_score_toggle","hasClass","adjust_score","toggle_custom","on_score_increment","score_name","get_score","update_obj","element","score_custom","get_score_custom","ignore_array","pointer","img","on_test","$05cfedbfc2cc6c3c$export$eaa36efd5f1a839","limited","attacks","gather_attacks","on_item_equip","on_item_carry","on_npc_edit","carried","undefined","$05cfedbfc2cc6c3c$export$9059fd0f09215233","distribute_money","canvas","controlled","ui","notifications","money_remaining","money_each","target_names","$05cfedbfc2cc6c3c$export$d55003dbaa27bba5","calc_space_progress_bar","draw_positions","add_position","delete_position","removeClass","update_positions","append","position_list","crew","positions","position_nodes","$3e4d69c777799744$export$471af1c74e831048","_onCreate","options","userId","documents","BaseItem","DEFAULT_ICON","unit_encumbrance","calc_unit_encumbrance","calc_container_encumbrance","calc_encumbrance","unit_loads","calc_unit_loads","calc_loads","remove_from_container","load","big","$061a343a3435629e$export$11dc603c5bc66ba5","ItemSheet","skills_provided","items_provided","traits_provided","equipment_provided","toggle_items_provided","on_create_effect","on_edit_effect","on_delete_effect","on_toggle_effect","draw_attacks","add_attack","delete_attack","display","find_damage","find_damage_type","find_consequences","update_attacks","attack_list","attack_nodes","create_effects","search_effects","find_all","parsed_effects","all_found","return_list","raw_name","matching_item","$a856728f05f0c624$export$ed3f1528e78b2d0c","slot","data_string","command","macro","macros","macro_spec","Macro","assignHotbarMacro","$a856728f05f0c624$export$4ae6666db41501cf","$af2e12063643503f$export$3d7f02c9b93e6b0","hits","pierce_armor","damageType","$af2e12063643503f$export$a54b240a5cfd4caf","hit","$af2e12063643503f$export$d9445ce8959d2e19","condition","luck","$af2e12063643503f$export$220dda78442aea07","valid_tokens","$af2e12063643503f$export$5386e3bdcb090884","message_id","Edit","updateDocuments","$9d141e3789e0b83b$export$a6324e54748ebe3","$9d141e3789e0b83b$export$4bf3fd4b252a8de8","$9d141e3789e0b83b$export$38a029996c573874","$9d141e3789e0b83b$export$4a9b7a56f490dcad","$9d141e3789e0b83b$export$9dc996de602aaf4f","modifiesActor","$9d141e3789e0b83b$export$d367f85a279edb03","transfer","$9d141e3789e0b83b$export$60945f152bbb5568","$9d141e3789e0b83b$export$7e03fe5bbd47fde3","continue_forward","rank_display","delete_id","$9d141e3789e0b83b$export$3cc25891b8a467f7","$9d141e3789e0b83b$export$40058aa05d265e4f","$9d141e3789e0b83b$export$b326b618cce92063","bar","$9d141e3789e0b83b$export$e6333a552b7032f3","app","msg","$9d141e3789e0b83b$export$5c0c0cc3fc780035","$9d141e3789e0b83b$export$61c10505fc99de78","debug","log","SagaMachineItem","sm_test_macro","documentClass","Actors","unregisterSheet","Items","registerSheet","types","makeDefault","specialStatusEffects","DEFEATED","INCAPACITATED","INVISIBLE","register","hint","config","choices"],"version":3,"file":"sagamachine.js.map"}